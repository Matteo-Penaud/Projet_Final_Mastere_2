
test_sensors_without_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005558  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080056e8  080056e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800579c  0800579c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057a4  080057a4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057a8  080057a8  000157a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080057ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000005c  08005808  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08005808  00020384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010826  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ea  00000000  00000000  000308f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  000329e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b55  00000000  00000000  00033880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027352  00000000  00000000  000343d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010bd3  00000000  00000000  0005b727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb1d1  00000000  00000000  0006c2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042e4  00000000  00000000  001674cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0016b7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056d0 	.word	0x080056d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080056d0 	.word	0x080056d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b090      	sub	sp, #64	; 0x40
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fcc5 	bl	8000f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f895 	bl	80006b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800058a:	f000 f8e4 	bl	8000756 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fa55 	bl	8000a3c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000592:	f000 f90b 	bl	80007ac <MX_ADC1_Init>
  MX_ADC2_Init();
 8000596:	f000 f97f 	bl	8000898 <MX_ADC2_Init>
  MX_SPI1_Init();
 800059a:	f000 f9e1 	bl	8000960 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800059e:	f000 fa1d 	bl	80009dc <MX_USART2_UART_Init>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		uint32_t moisture_value = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0);
 80005a2:	2101      	movs	r1, #1
 80005a4:	483b      	ldr	r0, [pc, #236]	; (8000694 <main+0x118>)
 80005a6:	f002 fa31 	bl	8002a0c <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		uint32_t waterlevel_value = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 80005ae:	2102      	movs	r1, #2
 80005b0:	4838      	ldr	r0, [pc, #224]	; (8000694 <main+0x118>)
 80005b2:	f002 fa2b 	bl	8002a0c <HAL_GPIO_ReadPin>
 80005b6:	4603      	mov	r3, r0
 80005b8:	63bb      	str	r3, [r7, #56]	; 0x38


        // Lire la valeur du capteur analogique
        if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 80005ba:	4837      	ldr	r0, [pc, #220]	; (8000698 <main+0x11c>)
 80005bc:	f001 f87c 	bl	80016b8 <HAL_ADC_Start>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <main+0x4e>
            Error_Handler();
 80005c6:	f000 fa99 	bl	8000afc <Error_Handler>
        }
        if (HAL_ADC_Start(&hadc2) != HAL_OK) {
 80005ca:	4834      	ldr	r0, [pc, #208]	; (800069c <main+0x120>)
 80005cc:	f001 f874 	bl	80016b8 <HAL_ADC_Start>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <main+0x5e>
            Error_Handler();
 80005d6:	f000 fa91 	bl	8000afc <Error_Handler>
        }

        // Attendre la fin de la conversion
        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 80005da:	f04f 31ff 	mov.w	r1, #4294967295
 80005de:	482e      	ldr	r0, [pc, #184]	; (8000698 <main+0x11c>)
 80005e0:	f001 f924 	bl	800182c <HAL_ADC_PollForConversion>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <main+0x72>
            Error_Handler();
 80005ea:	f000 fa87 	bl	8000afc <Error_Handler>
        }
        if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) != HAL_OK) {
 80005ee:	f04f 31ff 	mov.w	r1, #4294967295
 80005f2:	482a      	ldr	r0, [pc, #168]	; (800069c <main+0x120>)
 80005f4:	f001 f91a 	bl	800182c <HAL_ADC_PollForConversion>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <main+0x86>
            Error_Handler();
 80005fe:	f000 fa7d 	bl	8000afc <Error_Handler>
        }
        // Lire la valeur convertie
        waterlevel_value = HAL_ADC_GetValue(&hadc1);
 8000602:	4825      	ldr	r0, [pc, #148]	; (8000698 <main+0x11c>)
 8000604:	f001 f9ea 	bl	80019dc <HAL_ADC_GetValue>
 8000608:	63b8      	str	r0, [r7, #56]	; 0x38
        moisture_value = HAL_ADC_GetValue(&hadc2);
 800060a:	4824      	ldr	r0, [pc, #144]	; (800069c <main+0x120>)
 800060c:	f001 f9e6 	bl	80019dc <HAL_ADC_GetValue>
 8000610:	63f8      	str	r0, [r7, #60]	; 0x3c


		// COM UART FOR DEBUG
		char uart_buffer[50];
		sprintf(uart_buffer, "Moisture = %lu\r\n", moisture_value);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000616:	4922      	ldr	r1, [pc, #136]	; (80006a0 <main+0x124>)
 8000618:	4618      	mov	r0, r3
 800061a:	f004 fbb5 	bl	8004d88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4618      	mov	r0, r3
 8000622:	f7ff fdd5 	bl	80001d0 <strlen>
 8000626:	4603      	mov	r3, r0
 8000628:	b29a      	uxth	r2, r3
 800062a:	1d39      	adds	r1, r7, #4
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
 8000630:	481c      	ldr	r0, [pc, #112]	; (80006a4 <main+0x128>)
 8000632:	f003 fe50 	bl	80042d6 <HAL_UART_Transmit>
		sprintf(uart_buffer, "Waterlevel = %lu\r\n", waterlevel_value);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800063a:	491b      	ldr	r1, [pc, #108]	; (80006a8 <main+0x12c>)
 800063c:	4618      	mov	r0, r3
 800063e:	f004 fba3 	bl	8004d88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fdc3 	bl	80001d0 <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	1d39      	adds	r1, r7, #4
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	4813      	ldr	r0, [pc, #76]	; (80006a4 <main+0x128>)
 8000656:	f003 fe3e 	bl	80042d6 <HAL_UART_Transmit>

		// COUNT IN UART DEBUG
		sprintf(uart_buffer, "count = %lu\r\n", count=count+1);
 800065a:	4b14      	ldr	r3, [pc, #80]	; (80006ac <main+0x130>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <main+0x130>)
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <main+0x130>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	4911      	ldr	r1, [pc, #68]	; (80006b0 <main+0x134>)
 800066c:	4618      	mov	r0, r3
 800066e:	f004 fb8b 	bl	8004d88 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *)uart_buffer, strlen(uart_buffer), HAL_MAX_DELAY);
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fdab 	bl	80001d0 <strlen>
 800067a:	4603      	mov	r3, r0
 800067c:	b29a      	uxth	r2, r3
 800067e:	1d39      	adds	r1, r7, #4
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <main+0x128>)
 8000686:	f003 fe26 	bl	80042d6 <HAL_UART_Transmit>

		HAL_Delay(1000); // WAIT 1 SEC
 800068a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068e:	f000 fcbb 	bl	8001008 <HAL_Delay>
	{
 8000692:	e786      	b.n	80005a2 <main+0x26>
 8000694:	48000800 	.word	0x48000800
 8000698:	20000078 	.word	0x20000078
 800069c:	200000dc 	.word	0x200000dc
 80006a0:	080056e8 	.word	0x080056e8
 80006a4:	200001a4 	.word	0x200001a4
 80006a8:	080056fc 	.word	0x080056fc
 80006ac:	2000022c 	.word	0x2000022c
 80006b0:	08005710 	.word	0x08005710

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b096      	sub	sp, #88	; 0x58
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2244      	movs	r2, #68	; 0x44
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fb80 	bl	8004dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	463b      	mov	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006da:	f002 f9f9 	bl	8002ad0 <HAL_PWREx_ControlVoltageScaling>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e4:	f000 fa0a 	bl	8000afc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2310      	movs	r3, #16
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fa:	2302      	movs	r3, #2
 80006fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000702:	2308      	movs	r3, #8
 8000704:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000706:	2307      	movs	r3, #7
 8000708:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	4618      	mov	r0, r3
 8000718:	f002 fa30 	bl	8002b7c <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000722:	f000 f9eb 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2303      	movs	r3, #3
 800072c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800073a:	463b      	mov	r3, r7
 800073c:	2103      	movs	r1, #3
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fdf8 	bl	8003334 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800074a:	f000 f9d7 	bl	8000afc <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3758      	adds	r7, #88	; 0x58
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}

08000756 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b0a2      	sub	sp, #136	; 0x88
 800075a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075c:	463b      	mov	r3, r7
 800075e:	2288      	movs	r2, #136	; 0x88
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f004 fb30 	bl	8004dc8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000768:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800076c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800076e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000772:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800077c:	2308      	movs	r3, #8
 800077e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000780:	2307      	movs	r3, #7
 8000782:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000784:	2302      	movs	r3, #2
 8000786:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800078c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000790:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	4618      	mov	r0, r3
 8000796:	f002 fff1 	bl	800377c <HAL_RCCEx_PeriphCLKConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80007a0:	f000 f9ac 	bl	8000afc <Error_Handler>
  }
}
 80007a4:	bf00      	nop
 80007a6:	3788      	adds	r7, #136	; 0x88
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ce:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_ADC1_Init+0xe0>)
 80007d0:	4a2f      	ldr	r2, [pc, #188]	; (8000890 <MX_ADC1_Init+0xe4>)
 80007d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d4:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_ADC1_Init+0xe0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_ADC1_Init+0xe0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_ADC1_Init+0xe0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_ADC1_Init+0xe0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_ADC1_Init+0xe0>)
 80007ee:	2204      	movs	r2, #4
 80007f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_ADC1_Init+0xe0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_ADC1_Init+0xe0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_ADC1_Init+0xe0>)
 8000800:	2201      	movs	r2, #1
 8000802:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_ADC1_Init+0xe0>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_ADC1_Init+0xe0>)
 800080e:	2200      	movs	r2, #0
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_ADC1_Init+0xe0>)
 8000814:	2200      	movs	r2, #0
 8000816:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_ADC1_Init+0xe0>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000820:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_ADC1_Init+0xe0>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_ADC1_Init+0xe0>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4817      	ldr	r0, [pc, #92]	; (800088c <MX_ADC1_Init+0xe0>)
 8000830:	f000 fdf2 	bl	8001418 <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 f95f 	bl	8000afc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4810      	ldr	r0, [pc, #64]	; (800088c <MX_ADC1_Init+0xe0>)
 800084a:	f001 fd73 	bl	8002334 <HAL_ADCEx_MultiModeConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000854:	f000 f952 	bl	8000afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_ADC1_Init+0xe8>)
 800085a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	2306      	movs	r3, #6
 800085e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000864:	237f      	movs	r3, #127	; 0x7f
 8000866:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000868:	2304      	movs	r3, #4
 800086a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_ADC1_Init+0xe0>)
 8000876:	f001 f8bf 	bl	80019f8 <HAL_ADC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000880:	f000 f93c 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	; 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000078 	.word	0x20000078
 8000890:	50040000 	.word	0x50040000
 8000894:	04300002 	.word	0x04300002

08000898 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089e:	463b      	mov	r3, r7
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
 80008ac:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008ae:	4b29      	ldr	r3, [pc, #164]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008b0:	4a29      	ldr	r2, [pc, #164]	; (8000958 <MX_ADC2_Init+0xc0>)
 80008b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008b4:	4b27      	ldr	r3, [pc, #156]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008da:	2200      	movs	r2, #0
 80008dc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f2:	4b18      	ldr	r3, [pc, #96]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008f8:	4b16      	ldr	r3, [pc, #88]	; (8000954 <MX_ADC2_Init+0xbc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000900:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_ADC2_Init+0xbc>)
 8000902:	2200      	movs	r2, #0
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000906:	4b13      	ldr	r3, [pc, #76]	; (8000954 <MX_ADC2_Init+0xbc>)
 8000908:	2200      	movs	r2, #0
 800090a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800090e:	4811      	ldr	r0, [pc, #68]	; (8000954 <MX_ADC2_Init+0xbc>)
 8000910:	f000 fd82 	bl	8001418 <HAL_ADC_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800091a:	f000 f8ef 	bl	8000afc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_ADC2_Init+0xc4>)
 8000920:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000922:	2306      	movs	r3, #6
 8000924:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800092a:	237f      	movs	r3, #127	; 0x7f
 800092c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800092e:	2304      	movs	r3, #4
 8000930:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000936:	463b      	mov	r3, r7
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <MX_ADC2_Init+0xbc>)
 800093c:	f001 f85c 	bl	80019f8 <HAL_ADC_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000946:	f000 f8d9 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000dc 	.word	0x200000dc
 8000958:	50040100 	.word	0x50040100
 800095c:	08600004 	.word	0x08600004

08000960 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000964:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000966:	4a1c      	ldr	r2, [pc, #112]	; (80009d8 <MX_SPI1_Init+0x78>)
 8000968:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800096a:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <MX_SPI1_Init+0x74>)
 800096c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000970:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_SPI1_Init+0x74>)
 800097a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800097e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000988:	2201      	movs	r2, #1
 800098a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800098c:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_SPI1_Init+0x74>)
 800098e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000992:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_SPI1_Init+0x74>)
 8000996:	2228      	movs	r2, #40	; 0x28
 8000998:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009ae:	2207      	movs	r2, #7
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_SPI1_Init+0x74>)
 80009c0:	f003 fb98 	bl	80040f4 <HAL_SPI_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009ca:	f000 f897 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000140 	.word	0x20000140
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <MX_USART2_UART_Init+0x5c>)
 80009e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 80009e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a02:	220c      	movs	r2, #12
 8000a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_USART2_UART_Init+0x58>)
 8000a20:	f003 fc0b 	bl	800423a <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a2a:	f000 f867 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200001a4 	.word	0x200001a4
 8000a38:	40004400 	.word	0x40004400

08000a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a28      	ldr	r2, [pc, #160]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a58:	f043 0304 	orr.w	r3, r3, #4
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0304 	and.w	r3, r3, #4
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	4a22      	ldr	r2, [pc, #136]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_GPIO_Init+0xbc>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abc:	f001 ffbe 	bl	8002a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000adc:	f001 fdec 	bl	80026b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2028      	movs	r0, #40	; 0x28
 8000ae6:	f001 fdb0 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aea:	2028      	movs	r0, #40	; 0x28
 8000aec:	f001 fdc9 	bl	8002682 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000af0:	bf00      	nop
 8000af2:	3728      	adds	r7, #40	; 0x28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40021000 	.word	0x40021000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000b04:	e7fe      	b.n	8000b04 <Error_Handler+0x8>
	...

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <HAL_MspInit+0x44>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <HAL_MspInit+0x44>)
 8000b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <HAL_MspInit+0x44>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_MspInit+0x44>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3a:	603b      	str	r3, [r7, #0]
 8000b3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	40021000 	.word	0x40021000

08000b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08c      	sub	sp, #48	; 0x30
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 031c 	add.w	r3, r7, #28
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a33      	ldr	r2, [pc, #204]	; (8000c3c <HAL_ADC_MspInit+0xec>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d12d      	bne.n	8000bce <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000b72:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <HAL_ADC_MspInit+0xf0>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	4a31      	ldr	r2, [pc, #196]	; (8000c40 <HAL_ADC_MspInit+0xf0>)
 8000b7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000b7c:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <HAL_ADC_MspInit+0xf0>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d10b      	bne.n	8000b9c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b88:	4a2e      	ldr	r2, [pc, #184]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000b8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba0:	4a28      	ldr	r2, [pc, #160]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000ba2:	f043 0304 	orr.w	r3, r3, #4
 8000ba6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bb8:	230b      	movs	r3, #11
 8000bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4820      	ldr	r0, [pc, #128]	; (8000c48 <HAL_ADC_MspInit+0xf8>)
 8000bc8:	f001 fd76 	bl	80026b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000bcc:	e031      	b.n	8000c32 <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <HAL_ADC_MspInit+0xfc>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d12c      	bne.n	8000c32 <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_ADC_MspInit+0xf0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <HAL_ADC_MspInit+0xf0>)
 8000be0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_ADC_MspInit+0xf0>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d10b      	bne.n	8000c02 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000bf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000c08:	f043 0304 	orr.w	r3, r3, #4
 8000c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_ADC_MspInit+0xf4>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	f003 0304 	and.w	r3, r3, #4
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c1e:	230b      	movs	r3, #11
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <HAL_ADC_MspInit+0xf8>)
 8000c2e:	f001 fd43 	bl	80026b8 <HAL_GPIO_Init>
}
 8000c32:	bf00      	nop
 8000c34:	3730      	adds	r7, #48	; 0x30
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	50040000 	.word	0x50040000
 8000c40:	20000230 	.word	0x20000230
 8000c44:	40021000 	.word	0x40021000
 8000c48:	48000800 	.word	0x48000800
 8000c4c:	50040100 	.word	0x50040100

08000c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a25      	ldr	r2, [pc, #148]	; (8000d04 <HAL_SPI_MspInit+0xb4>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d144      	bne.n	8000cfc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c72:	4b25      	ldr	r3, [pc, #148]	; (8000d08 <HAL_SPI_MspInit+0xb8>)
 8000c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c76:	4a24      	ldr	r2, [pc, #144]	; (8000d08 <HAL_SPI_MspInit+0xb8>)
 8000c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c7e:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <HAL_SPI_MspInit+0xb8>)
 8000c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <HAL_SPI_MspInit+0xb8>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <HAL_SPI_MspInit+0xb8>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_SPI_MspInit+0xb8>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_SPI_MspInit+0xb8>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <HAL_SPI_MspInit+0xb8>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <HAL_SPI_MspInit+0xb8>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cba:	23c0      	movs	r3, #192	; 0xc0
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cca:	2305      	movs	r3, #5
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd8:	f001 fcee 	bl	80026b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cec:	2305      	movs	r3, #5
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <HAL_SPI_MspInit+0xbc>)
 8000cf8:	f001 fcde 	bl	80026b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40013000 	.word	0x40013000
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	48000400 	.word	0x48000400

08000d10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b0ac      	sub	sp, #176	; 0xb0
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2288      	movs	r2, #136	; 0x88
 8000d2e:	2100      	movs	r1, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 f849 	bl	8004dc8 <memset>
  if(huart->Instance==USART2)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <HAL_UART_MspInit+0xb0>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d13b      	bne.n	8000db8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d40:	2302      	movs	r3, #2
 8000d42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f002 fd15 	bl	800377c <HAL_RCCEx_PeriphCLKConfig>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d58:	f7ff fed0 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_UART_MspInit+0xb4>)
 8000d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d60:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <HAL_UART_MspInit+0xb4>)
 8000d62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d66:	6593      	str	r3, [r2, #88]	; 0x58
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_UART_MspInit+0xb4>)
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <HAL_UART_MspInit+0xb4>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d78:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <HAL_UART_MspInit+0xb4>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <HAL_UART_MspInit+0xb4>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da4:	2307      	movs	r3, #7
 8000da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f001 fc80 	bl	80026b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	37b0      	adds	r7, #176	; 0xb0
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004400 	.word	0x40004400
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <NMI_Handler+0x4>

08000dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd2:	e7fe      	b.n	8000dd2 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <MemManage_Handler+0x4>

08000dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <BusFault_Handler+0x4>

08000de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <UsageFault_Handler+0x4>

08000de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e02:	b480      	push	{r7}
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e14:	f000 f8d8 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e24:	f001 fe22 	bl	8002a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f003 ffbc 	bl	8004dd8 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20018000 	.word	0x20018000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	20000234 	.word	0x20000234
 8000e94:	20000388 	.word	0x20000388

08000e98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <SystemInit+0x20>)
 8000e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <SystemInit+0x20>)
 8000ea4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ec0:	f7ff ffea 	bl	8000e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec4:	480c      	ldr	r0, [pc, #48]	; (8000ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec6:	490d      	ldr	r1, [pc, #52]	; (8000efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <LoopForever+0xe>)
  movs r3, #0
 8000eca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ecc:	e002      	b.n	8000ed4 <LoopCopyDataInit>

08000ece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ed2:	3304      	adds	r3, #4

08000ed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed8:	d3f9      	bcc.n	8000ece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000edc:	4c0a      	ldr	r4, [pc, #40]	; (8000f08 <LoopForever+0x16>)
  movs r3, #0
 8000ede:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee0:	e001      	b.n	8000ee6 <LoopFillZerobss>

08000ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee4:	3204      	adds	r2, #4

08000ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee8:	d3fb      	bcc.n	8000ee2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eea:	f003 ff7b 	bl	8004de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000eee:	f7ff fb45 	bl	800057c <main>

08000ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ef4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000f00:	080057ac 	.word	0x080057ac
  ldr r2, =_sbss
 8000f04:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000f08:	20000384 	.word	0x20000384

08000f0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_2_IRQHandler>
	...

08000f10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f16:	2300      	movs	r3, #0
 8000f18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_Init+0x3c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_Init+0x3c>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f26:	2003      	movs	r0, #3
 8000f28:	f001 fb84 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f000 f80f 	bl	8000f50 <HAL_InitTick>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d002      	beq.n	8000f3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	e001      	b.n	8000f42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3e:	f7ff fde3 	bl	8000b08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f42:	79fb      	ldrb	r3, [r7, #7]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40022000 	.word	0x40022000

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d023      	beq.n	8000fac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_InitTick+0x70>)
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_InitTick+0x6c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 fb8f 	bl	800269e <HAL_SYSTICK_Config>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10f      	bne.n	8000fa6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d809      	bhi.n	8000fa0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	6879      	ldr	r1, [r7, #4]
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f001 fb59 	bl	800264a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_InitTick+0x74>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e007      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e004      	b.n	8000fb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	e001      	b.n	8000fb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	; (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008
 8000fec:	20000238 	.word	0x20000238

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	; (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000238 	.word	0x20000238

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008

08001050 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	431a      	orrs	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	609a      	str	r2, [r3, #8]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	431a      	orrs	r2, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	609a      	str	r2, [r3, #8]
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3360      	adds	r3, #96	; 0x60
 80010ca:	461a      	mov	r2, r3
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <LL_ADC_SetOffset+0x44>)
 80010da:	4013      	ands	r3, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	4313      	orrs	r3, r2
 80010e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010f0:	bf00      	nop
 80010f2:	371c      	adds	r7, #28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	03fff000 	.word	0x03fff000

08001100 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3360      	adds	r3, #96	; 0x60
 800110e:	461a      	mov	r2, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3360      	adds	r3, #96	; 0x60
 800113c:	461a      	mov	r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	431a      	orrs	r2, r3
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001156:	bf00      	nop
 8001158:	371c      	adds	r7, #28
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3330      	adds	r3, #48	; 0x30
 8001198:	461a      	mov	r2, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	f003 030c 	and.w	r3, r3, #12
 80011a4:	4413      	add	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f003 031f 	and.w	r3, r3, #31
 80011b2:	211f      	movs	r1, #31
 80011b4:	fa01 f303 	lsl.w	r3, r1, r3
 80011b8:	43db      	mvns	r3, r3
 80011ba:	401a      	ands	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	0e9b      	lsrs	r3, r3, #26
 80011c0:	f003 011f 	and.w	r1, r3, #31
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	431a      	orrs	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011d4:	bf00      	nop
 80011d6:	371c      	adds	r7, #28
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b087      	sub	sp, #28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3314      	adds	r3, #20
 80011f0:	461a      	mov	r2, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	0e5b      	lsrs	r3, r3, #25
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	4413      	add	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	0d1b      	lsrs	r3, r3, #20
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	2107      	movs	r1, #7
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	401a      	ands	r2, r3
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	0d1b      	lsrs	r3, r3, #20
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	fa01 f303 	lsl.w	r3, r1, r3
 8001224:	431a      	orrs	r2, r3
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800122a:	bf00      	nop
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001250:	43db      	mvns	r3, r3
 8001252:	401a      	ands	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0318 	and.w	r3, r3, #24
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <LL_ADC_SetChannelSingleDiff+0x44>)
 800125c:	40d9      	lsrs	r1, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	400b      	ands	r3, r1
 8001262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001266:	431a      	orrs	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	0007ffff 	.word	0x0007ffff

08001280 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 031f 	and.w	r3, r3, #31
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80012c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6093      	str	r3, [r2, #8]
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012f0:	d101      	bne.n	80012f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012f2:	2301      	movs	r3, #1
 80012f4:	e000      	b.n	80012f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001314:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001318:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001340:	d101      	bne.n	8001346 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001364:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001368:	f043 0201 	orr.w	r2, r3, #1
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <LL_ADC_IsEnabled+0x18>
 8001390:	2301      	movs	r3, #1
 8001392:	e000      	b.n	8001396 <LL_ADC_IsEnabled+0x1a>
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013b6:	f043 0204 	orr.w	r2, r3, #4
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d101      	bne.n	80013e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013e2:	2300      	movs	r3, #0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b08      	cmp	r3, #8
 8001402:	d101      	bne.n	8001408 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
	...

08001418 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b089      	sub	sp, #36	; 0x24
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e130      	b.n	8001694 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	2b00      	cmp	r3, #0
 800143e:	d109      	bne.n	8001454 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fb85 	bl	8000b50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff3f 	bl	80012dc <LL_ADC_IsDeepPowerDownEnabled>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff25 	bl	80012b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff5a 	bl	800132c <LL_ADC_IsInternalRegulatorEnabled>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d115      	bne.n	80014aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff3e 	bl	8001304 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001488:	4b84      	ldr	r3, [pc, #528]	; (800169c <HAL_ADC_Init+0x284>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	099b      	lsrs	r3, r3, #6
 800148e:	4a84      	ldr	r2, [pc, #528]	; (80016a0 <HAL_ADC_Init+0x288>)
 8001490:	fba2 2303 	umull	r2, r3, r2, r3
 8001494:	099b      	lsrs	r3, r3, #6
 8001496:	3301      	adds	r3, #1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800149c:	e002      	b.n	80014a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f9      	bne.n	800149e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff3c 	bl	800132c <LL_ADC_IsInternalRegulatorEnabled>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10d      	bne.n	80014d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014be:	f043 0210 	orr.w	r2, r3, #16
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ca:	f043 0201 	orr.w	r2, r3, #1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff ff75 	bl	80013ca <LL_ADC_REG_IsConversionOngoing>
 80014e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f040 80c9 	bne.w	8001682 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f040 80c5 	bne.w	8001682 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001500:	f043 0202 	orr.w	r2, r3, #2
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff35 	bl	800137c <LL_ADC_IsEnabled>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d115      	bne.n	8001544 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001518:	4862      	ldr	r0, [pc, #392]	; (80016a4 <HAL_ADC_Init+0x28c>)
 800151a:	f7ff ff2f 	bl	800137c <LL_ADC_IsEnabled>
 800151e:	4604      	mov	r4, r0
 8001520:	4861      	ldr	r0, [pc, #388]	; (80016a8 <HAL_ADC_Init+0x290>)
 8001522:	f7ff ff2b 	bl	800137c <LL_ADC_IsEnabled>
 8001526:	4603      	mov	r3, r0
 8001528:	431c      	orrs	r4, r3
 800152a:	4860      	ldr	r0, [pc, #384]	; (80016ac <HAL_ADC_Init+0x294>)
 800152c:	f7ff ff26 	bl	800137c <LL_ADC_IsEnabled>
 8001530:	4603      	mov	r3, r0
 8001532:	4323      	orrs	r3, r4
 8001534:	2b00      	cmp	r3, #0
 8001536:	d105      	bne.n	8001544 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4619      	mov	r1, r3
 800153e:	485c      	ldr	r0, [pc, #368]	; (80016b0 <HAL_ADC_Init+0x298>)
 8001540:	f7ff fd86 	bl	8001050 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	7e5b      	ldrb	r3, [r3, #25]
 8001548:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800154e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001554:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800155a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001562:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d106      	bne.n	8001580 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	3b01      	subs	r3, #1
 8001578:	045b      	lsls	r3, r3, #17
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	2b00      	cmp	r3, #0
 8001586:	d009      	beq.n	800159c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001594:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	4b44      	ldr	r3, [pc, #272]	; (80016b4 <HAL_ADC_Init+0x29c>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	69b9      	ldr	r1, [r7, #24]
 80015ac:	430b      	orrs	r3, r1
 80015ae:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff1b 	bl	80013f0 <LL_ADC_INJ_IsConversionOngoing>
 80015ba:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d13d      	bne.n	800163e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d13a      	bne.n	800163e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015cc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015d4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015e4:	f023 0302 	bic.w	r3, r3, #2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	69b9      	ldr	r1, [r7, #24]
 80015ee:	430b      	orrs	r3, r1
 80015f0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d118      	bne.n	800162e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001606:	f023 0304 	bic.w	r3, r3, #4
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001612:	4311      	orrs	r1, r2
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001618:	4311      	orrs	r1, r2
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800161e:	430a      	orrs	r2, r1
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	611a      	str	r2, [r3, #16]
 800162c:	e007      	b.n	800163e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d10c      	bne.n	8001660 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164c:	f023 010f 	bic.w	r1, r3, #15
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	1e5a      	subs	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	631a      	str	r2, [r3, #48]	; 0x30
 800165e:	e007      	b.n	8001670 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 020f 	bic.w	r2, r2, #15
 800166e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001674:	f023 0303 	bic.w	r3, r3, #3
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	655a      	str	r2, [r3, #84]	; 0x54
 8001680:	e007      	b.n	8001692 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	f043 0210 	orr.w	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001692:	7ffb      	ldrb	r3, [r7, #31]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3724      	adds	r7, #36	; 0x24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd90      	pop	{r4, r7, pc}
 800169c:	20000000 	.word	0x20000000
 80016a0:	053e2d63 	.word	0x053e2d63
 80016a4:	50040000 	.word	0x50040000
 80016a8:	50040100 	.word	0x50040100
 80016ac:	50040200 	.word	0x50040200
 80016b0:	50040300 	.word	0x50040300
 80016b4:	fff0c007 	.word	0xfff0c007

080016b8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016c0:	4857      	ldr	r0, [pc, #348]	; (8001820 <HAL_ADC_Start+0x168>)
 80016c2:	f7ff fddd 	bl	8001280 <LL_ADC_GetMultimode>
 80016c6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fe7c 	bl	80013ca <LL_ADC_REG_IsConversionOngoing>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f040 809c 	bne.w	8001812 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d101      	bne.n	80016e8 <HAL_ADC_Start+0x30>
 80016e4:	2302      	movs	r3, #2
 80016e6:	e097      	b.n	8001818 <HAL_ADC_Start+0x160>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 fd73 	bl	80021dc <ADC_Enable>
 80016f6:	4603      	mov	r3, r0
 80016f8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80016fa:	7dfb      	ldrb	r3, [r7, #23]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f040 8083 	bne.w	8001808 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001706:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a42      	ldr	r2, [pc, #264]	; (8001824 <HAL_ADC_Start+0x16c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d002      	beq.n	8001726 <HAL_ADC_Start+0x6e>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	e000      	b.n	8001728 <HAL_ADC_Start+0x70>
 8001726:	4b40      	ldr	r3, [pc, #256]	; (8001828 <HAL_ADC_Start+0x170>)
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	4293      	cmp	r3, r2
 800172e:	d002      	beq.n	8001736 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d105      	bne.n	8001742 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800174e:	d106      	bne.n	800175e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	f023 0206 	bic.w	r2, r3, #6
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	659a      	str	r2, [r3, #88]	; 0x58
 800175c:	e002      	b.n	8001764 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	221c      	movs	r2, #28
 800176a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a2a      	ldr	r2, [pc, #168]	; (8001824 <HAL_ADC_Start+0x16c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d002      	beq.n	8001784 <HAL_ADC_Start+0xcc>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	e000      	b.n	8001786 <HAL_ADC_Start+0xce>
 8001784:	4b28      	ldr	r3, [pc, #160]	; (8001828 <HAL_ADC_Start+0x170>)
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	4293      	cmp	r3, r2
 800178c:	d008      	beq.n	80017a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	2b05      	cmp	r3, #5
 8001798:	d002      	beq.n	80017a0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2b09      	cmp	r3, #9
 800179e:	d114      	bne.n	80017ca <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fded 	bl	80013a2 <LL_ADC_REG_StartConversion>
 80017c8:	e025      	b.n	8001816 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a12      	ldr	r2, [pc, #72]	; (8001824 <HAL_ADC_Start+0x16c>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d002      	beq.n	80017e6 <HAL_ADC_Start+0x12e>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	e000      	b.n	80017e8 <HAL_ADC_Start+0x130>
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_ADC_Start+0x170>)
 80017e8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00f      	beq.n	8001816 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
 8001806:	e006      	b.n	8001816 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001810:	e001      	b.n	8001816 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001812:	2302      	movs	r3, #2
 8001814:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001816:	7dfb      	ldrb	r3, [r7, #23]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3718      	adds	r7, #24
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	50040300 	.word	0x50040300
 8001824:	50040100 	.word	0x50040100
 8001828:	50040000 	.word	0x50040000

0800182c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001836:	4866      	ldr	r0, [pc, #408]	; (80019d0 <HAL_ADC_PollForConversion+0x1a4>)
 8001838:	f7ff fd22 	bl	8001280 <LL_ADC_GetMultimode>
 800183c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	2b08      	cmp	r3, #8
 8001844:	d102      	bne.n	800184c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001846:	2308      	movs	r3, #8
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e02a      	b.n	80018a2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d005      	beq.n	800185e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b05      	cmp	r3, #5
 8001856:	d002      	beq.n	800185e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b09      	cmp	r3, #9
 800185c:	d111      	bne.n	8001882 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d007      	beq.n	800187c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001870:	f043 0220 	orr.w	r2, r3, #32
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0a4      	b.n	80019c6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800187c:	2304      	movs	r3, #4
 800187e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001880:	e00f      	b.n	80018a2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001882:	4853      	ldr	r0, [pc, #332]	; (80019d0 <HAL_ADC_PollForConversion+0x1a4>)
 8001884:	f7ff fd0a 	bl	800129c <LL_ADC_GetMultiDMATransfer>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	f043 0220 	orr.w	r2, r3, #32
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e093      	b.n	80019c6 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800189e:	2304      	movs	r3, #4
 80018a0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018a2:	f7ff fba5 	bl	8000ff0 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018a8:	e021      	b.n	80018ee <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d01d      	beq.n	80018ee <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018b2:	f7ff fb9d 	bl	8000ff0 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d302      	bcc.n	80018c8 <HAL_ADC_PollForConversion+0x9c>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d112      	bne.n	80018ee <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	4013      	ands	r3, r2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10b      	bne.n	80018ee <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018da:	f043 0204 	orr.w	r2, r3, #4
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e06b      	b.n	80019c6 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0d6      	beq.n	80018aa <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001900:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fc28 	bl	8001162 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d01c      	beq.n	8001952 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	7e5b      	ldrb	r3, [r3, #25]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d118      	bne.n	8001952 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b08      	cmp	r3, #8
 800192c:	d111      	bne.n	8001952 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001932:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d105      	bne.n	8001952 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	f043 0201 	orr.w	r2, r3, #1
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <HAL_ADC_PollForConversion+0x1a8>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d002      	beq.n	8001962 <HAL_ADC_PollForConversion+0x136>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	e000      	b.n	8001964 <HAL_ADC_PollForConversion+0x138>
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_ADC_PollForConversion+0x1ac>)
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	4293      	cmp	r3, r2
 800196a:	d008      	beq.n	800197e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d005      	beq.n	800197e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2b05      	cmp	r3, #5
 8001976:	d002      	beq.n	800197e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2b09      	cmp	r3, #9
 800197c:	d104      	bne.n	8001988 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	e00c      	b.n	80019a2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a11      	ldr	r2, [pc, #68]	; (80019d4 <HAL_ADC_PollForConversion+0x1a8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d002      	beq.n	8001998 <HAL_ADC_PollForConversion+0x16c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	e000      	b.n	800199a <HAL_ADC_PollForConversion+0x16e>
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_ADC_PollForConversion+0x1ac>)
 800199a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	2b08      	cmp	r3, #8
 80019a6:	d104      	bne.n	80019b2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2208      	movs	r2, #8
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e008      	b.n	80019c4 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d103      	bne.n	80019c4 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	220c      	movs	r2, #12
 80019c2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	50040300 	.word	0x50040300
 80019d4:	50040100 	.word	0x50040100
 80019d8:	50040000 	.word	0x50040000

080019dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b0b6      	sub	sp, #216	; 0xd8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d101      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x22>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e3c9      	b.n	80021ae <HAL_ADC_ConfigChannel+0x7b6>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fccf 	bl	80013ca <LL_ADC_REG_IsConversionOngoing>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f040 83aa 	bne.w	8002188 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b05      	cmp	r3, #5
 8001a42:	d824      	bhi.n	8001a8e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	3b02      	subs	r3, #2
 8001a4a:	2b03      	cmp	r3, #3
 8001a4c:	d81b      	bhi.n	8001a86 <HAL_ADC_ConfigChannel+0x8e>
 8001a4e:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <HAL_ADC_ConfigChannel+0x5c>)
 8001a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a54:	08001a65 	.word	0x08001a65
 8001a58:	08001a6d 	.word	0x08001a6d
 8001a5c:	08001a75 	.word	0x08001a75
 8001a60:	08001a7d 	.word	0x08001a7d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001a64:	230c      	movs	r3, #12
 8001a66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a6a:	e010      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001a6c:	2312      	movs	r3, #18
 8001a6e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a72:	e00c      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001a74:	2318      	movs	r3, #24
 8001a76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a7a:	e008      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a84:	e003      	b.n	8001a8e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001a86:	2306      	movs	r3, #6
 8001a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a8c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6818      	ldr	r0, [r3, #0]
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	461a      	mov	r2, r3
 8001a98:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001a9c:	f7ff fb74 	bl	8001188 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fc90 	bl	80013ca <LL_ADC_REG_IsConversionOngoing>
 8001aaa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fc9c 	bl	80013f0 <LL_ADC_INJ_IsConversionOngoing>
 8001ab8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001abc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	f040 81a4 	bne.w	8001e0e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f040 819f 	bne.w	8001e0e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	6819      	ldr	r1, [r3, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	461a      	mov	r2, r3
 8001ade:	f7ff fb7f 	bl	80011e0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	08db      	lsrs	r3, r3, #3
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	691b      	ldr	r3, [r3, #16]
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d00a      	beq.n	8001b1a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	6919      	ldr	r1, [r3, #16]
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b14:	f7ff fad0 	bl	80010b8 <LL_ADC_SetOffset>
 8001b18:	e179      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff faed 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10a      	bne.n	8001b46 <HAL_ADC_ConfigChannel+0x14e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fae2 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	0e9b      	lsrs	r3, r3, #26
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	e01e      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x18c>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fad7 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 8001b60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001b74:	2320      	movs	r3, #32
 8001b76:	e004      	b.n	8001b82 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001b78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b7c:	fab3 f383 	clz	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x1a4>
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0e9b      	lsrs	r3, r3, #26
 8001b96:	f003 031f 	and.w	r3, r3, #31
 8001b9a:	e018      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1d6>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001bc0:	2320      	movs	r3, #32
 8001bc2:	e004      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001bc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bc8:	fab3 f383 	clz	r3, r3
 8001bcc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d106      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff faa6 	bl	800112c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2101      	movs	r1, #1
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fa8a 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10a      	bne.n	8001c0c <HAL_ADC_ConfigChannel+0x214>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fa7f 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	0e9b      	lsrs	r3, r3, #26
 8001c06:	f003 021f 	and.w	r2, r3, #31
 8001c0a:	e01e      	b.n	8001c4a <HAL_ADC_ConfigChannel+0x252>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff fa74 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c22:	fa93 f3a3 	rbit	r3, r3
 8001c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001c3a:	2320      	movs	r3, #32
 8001c3c:	e004      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001c3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x26a>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0e9b      	lsrs	r3, r3, #26
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	e018      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x29c>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001c76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001c86:	2320      	movs	r3, #32
 8001c88:	e004      	b.n	8001c94 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001c8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c8e:	fab3 f383 	clz	r3, r3
 8001c92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d106      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fa43 	bl	800112c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2102      	movs	r1, #2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fa27 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d10a      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x2da>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff fa1c 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	0e9b      	lsrs	r3, r3, #26
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	e01e      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x318>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2102      	movs	r1, #2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fa11 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ce8:	fa93 f3a3 	rbit	r3, r3
 8001cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001d00:	2320      	movs	r3, #32
 8001d02:	e004      	b.n	8001d0e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d08:	fab3 f383 	clz	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d105      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x330>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0e9b      	lsrs	r3, r3, #26
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	e014      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x35a>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001d36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001d44:	2320      	movs	r3, #32
 8001d46:	e004      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001d48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d4c:	fab3 f383 	clz	r3, r3
 8001d50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d106      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff f9e4 	bl	800112c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2103      	movs	r1, #3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff f9c8 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10a      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x398>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2103      	movs	r1, #3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff f9bd 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	0e9b      	lsrs	r3, r3, #26
 8001d8a:	f003 021f 	and.w	r2, r3, #31
 8001d8e:	e017      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x3c8>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2103      	movs	r1, #3
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f9b2 	bl	8001100 <LL_ADC_GetOffsetChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001daa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001db2:	2320      	movs	r3, #32
 8001db4:	e003      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d105      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x3e0>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	0e9b      	lsrs	r3, r3, #26
 8001dd2:	f003 031f 	and.w	r3, r3, #31
 8001dd6:	e011      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x404>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001de8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001dea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001df0:	2320      	movs	r3, #32
 8001df2:	e003      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d106      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2200      	movs	r2, #0
 8001e06:	2103      	movs	r1, #3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff f98f 	bl	800112c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff fab2 	bl	800137c <LL_ADC_IsEnabled>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 8140 	bne.w	80020a0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	6819      	ldr	r1, [r3, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	f7ff fa03 	bl	8001238 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	4a8f      	ldr	r2, [pc, #572]	; (8002074 <HAL_ADC_ConfigChannel+0x67c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	f040 8131 	bne.w	80020a0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d10b      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x46e>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	0e9b      	lsrs	r3, r3, #26
 8001e54:	3301      	adds	r3, #1
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	2b09      	cmp	r3, #9
 8001e5c:	bf94      	ite	ls
 8001e5e:	2301      	movls	r3, #1
 8001e60:	2300      	movhi	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	e019      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x4a2>
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e6e:	fa93 f3a3 	rbit	r3, r3
 8001e72:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e76:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001e7e:	2320      	movs	r3, #32
 8001e80:	e003      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f003 031f 	and.w	r3, r3, #31
 8001e90:	2b09      	cmp	r3, #9
 8001e92:	bf94      	ite	ls
 8001e94:	2301      	movls	r3, #1
 8001e96:	2300      	movhi	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d079      	beq.n	8001f92 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d107      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x4c2>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0e9b      	lsrs	r3, r3, #26
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	069b      	lsls	r3, r3, #26
 8001eb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eb8:	e015      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x4ee>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eca:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	e003      	b.n	8001ede <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	3301      	adds	r3, #1
 8001ee0:	069b      	lsls	r3, r3, #26
 8001ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d109      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x50e>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	2101      	movs	r1, #1
 8001f00:	fa01 f303 	lsl.w	r3, r1, r3
 8001f04:	e017      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x53e>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001f14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f16:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	e003      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001f22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	2101      	movs	r1, #1
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	ea42 0103 	orr.w	r1, r2, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10a      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x564>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0e9b      	lsrs	r3, r3, #26
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f003 021f 	and.w	r2, r3, #31
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	051b      	lsls	r3, r3, #20
 8001f5a:	e018      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x596>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001f74:	2320      	movs	r3, #32
 8001f76:	e003      	b.n	8001f80 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f7a:	fab3 f383 	clz	r3, r3
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	3301      	adds	r3, #1
 8001f82:	f003 021f 	and.w	r2, r3, #31
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	e081      	b.n	8002096 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d107      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x5b6>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	0e9b      	lsrs	r3, r3, #26
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	069b      	lsls	r3, r3, #26
 8001fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fac:	e015      	b.n	8001fda <HAL_ADC_ConfigChannel+0x5e2>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d101      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001fc6:	2320      	movs	r3, #32
 8001fc8:	e003      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	fab3 f383 	clz	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	069b      	lsls	r3, r3, #26
 8001fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x602>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	0e9b      	lsrs	r3, r3, #26
 8001fec:	3301      	adds	r3, #1
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	e017      	b.n	800202a <HAL_ADC_ConfigChannel+0x632>
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	fa93 f3a3 	rbit	r3, r3
 8002006:	61bb      	str	r3, [r7, #24]
  return result;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002012:	2320      	movs	r3, #32
 8002014:	e003      	b.n	800201e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	3301      	adds	r3, #1
 8002020:	f003 031f 	and.w	r3, r3, #31
 8002024:	2101      	movs	r1, #1
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	ea42 0103 	orr.w	r1, r2, r3
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10d      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x65e>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	3301      	adds	r3, #1
 8002042:	f003 021f 	and.w	r2, r3, #31
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	3b1e      	subs	r3, #30
 800204e:	051b      	lsls	r3, r3, #20
 8002050:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002054:	e01e      	b.n	8002094 <HAL_ADC_ConfigChannel+0x69c>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	60fb      	str	r3, [r7, #12]
  return result;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d104      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800206e:	2320      	movs	r3, #32
 8002070:	e006      	b.n	8002080 <HAL_ADC_ConfigChannel+0x688>
 8002072:	bf00      	nop
 8002074:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fab3 f383 	clz	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	3301      	adds	r3, #1
 8002082:	f003 021f 	and.w	r2, r3, #31
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	3b1e      	subs	r3, #30
 800208e:	051b      	lsls	r3, r3, #20
 8002090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002094:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800209a:	4619      	mov	r1, r3
 800209c:	f7ff f8a0 	bl	80011e0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <HAL_ADC_ConfigChannel+0x7c0>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d07a      	beq.n	80021a2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80020ac:	4843      	ldr	r0, [pc, #268]	; (80021bc <HAL_ADC_ConfigChannel+0x7c4>)
 80020ae:	f7fe fff5 	bl	800109c <LL_ADC_GetCommonPathInternalCh>
 80020b2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a41      	ldr	r2, [pc, #260]	; (80021c0 <HAL_ADC_ConfigChannel+0x7c8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d12c      	bne.n	800211a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d126      	bne.n	800211a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a3c      	ldr	r2, [pc, #240]	; (80021c4 <HAL_ADC_ConfigChannel+0x7cc>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d004      	beq.n	80020e0 <HAL_ADC_ConfigChannel+0x6e8>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a3b      	ldr	r2, [pc, #236]	; (80021c8 <HAL_ADC_ConfigChannel+0x7d0>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d15d      	bne.n	800219c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020e8:	4619      	mov	r1, r3
 80020ea:	4834      	ldr	r0, [pc, #208]	; (80021bc <HAL_ADC_ConfigChannel+0x7c4>)
 80020ec:	f7fe ffc3 	bl	8001076 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020f0:	4b36      	ldr	r3, [pc, #216]	; (80021cc <HAL_ADC_ConfigChannel+0x7d4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	099b      	lsrs	r3, r3, #6
 80020f6:	4a36      	ldr	r2, [pc, #216]	; (80021d0 <HAL_ADC_ConfigChannel+0x7d8>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	1c5a      	adds	r2, r3, #1
 8002100:	4613      	mov	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800210a:	e002      	b.n	8002112 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	3b01      	subs	r3, #1
 8002110:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f9      	bne.n	800210c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002118:	e040      	b.n	800219c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a2d      	ldr	r2, [pc, #180]	; (80021d4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d118      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002128:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d112      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x74c>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a22      	ldr	r2, [pc, #136]	; (80021c8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d12d      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002144:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002148:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214c:	4619      	mov	r1, r3
 800214e:	481b      	ldr	r0, [pc, #108]	; (80021bc <HAL_ADC_ConfigChannel+0x7c4>)
 8002150:	f7fe ff91 	bl	8001076 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002154:	e024      	b.n	80021a0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a1f      	ldr	r2, [pc, #124]	; (80021d8 <HAL_ADC_ConfigChannel+0x7e0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d120      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002160:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d11a      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d115      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002176:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800217a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800217e:	4619      	mov	r1, r3
 8002180:	480e      	ldr	r0, [pc, #56]	; (80021bc <HAL_ADC_ConfigChannel+0x7c4>)
 8002182:	f7fe ff78 	bl	8001076 <LL_ADC_SetCommonPathInternalCh>
 8002186:	e00c      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218c:	f043 0220 	orr.w	r2, r3, #32
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800219a:	e002      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800219c:	bf00      	nop
 800219e:	e000      	b.n	80021a2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80021aa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	37d8      	adds	r7, #216	; 0xd8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	80080000 	.word	0x80080000
 80021bc:	50040300 	.word	0x50040300
 80021c0:	c7520000 	.word	0xc7520000
 80021c4:	50040000 	.word	0x50040000
 80021c8:	50040200 	.word	0x50040200
 80021cc:	20000000 	.word	0x20000000
 80021d0:	053e2d63 	.word	0x053e2d63
 80021d4:	cb840000 	.word	0xcb840000
 80021d8:	80000001 	.word	0x80000001

080021dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff f8c5 	bl	800137c <LL_ADC_IsEnabled>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d169      	bne.n	80022cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689a      	ldr	r2, [r3, #8]
 80021fe:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <ADC_Enable+0xfc>)
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800220a:	f043 0210 	orr.w	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	f043 0201 	orr.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e055      	b.n	80022ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff f894 	bl	8001354 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800222c:	482b      	ldr	r0, [pc, #172]	; (80022dc <ADC_Enable+0x100>)
 800222e:	f7fe ff35 	bl	800109c <LL_ADC_GetCommonPathInternalCh>
 8002232:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002238:	2b00      	cmp	r3, #0
 800223a:	d013      	beq.n	8002264 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800223c:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <ADC_Enable+0x104>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	099b      	lsrs	r3, r3, #6
 8002242:	4a28      	ldr	r2, [pc, #160]	; (80022e4 <ADC_Enable+0x108>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	4613      	mov	r3, r2
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002256:	e002      	b.n	800225e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	3b01      	subs	r3, #1
 800225c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f9      	bne.n	8002258 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002264:	f7fe fec4 	bl	8000ff0 <HAL_GetTick>
 8002268:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800226a:	e028      	b.n	80022be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff f883 	bl	800137c <LL_ADC_IsEnabled>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d104      	bne.n	8002286 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff f867 	bl	8001354 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002286:	f7fe feb3 	bl	8000ff0 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d914      	bls.n	80022be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d00d      	beq.n	80022be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	f043 0210 	orr.w	r2, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	f043 0201 	orr.w	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e007      	b.n	80022ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d1cf      	bne.n	800226c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	8000003f 	.word	0x8000003f
 80022dc:	50040300 	.word	0x50040300
 80022e0:	20000000 	.word	0x20000000
 80022e4:	053e2d63 	.word	0x053e2d63

080022e8 <LL_ADC_IsEnabled>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <LL_ADC_IsEnabled+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_IsEnabled+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <LL_ADC_REG_IsConversionOngoing>:
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b04      	cmp	r3, #4
 8002320:	d101      	bne.n	8002326 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002334:	b590      	push	{r4, r7, lr}
 8002336:	b09f      	sub	sp, #124	; 0x7c
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800234e:	2302      	movs	r3, #2
 8002350:	e093      	b.n	800247a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800235a:	2300      	movs	r3, #0
 800235c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800235e:	2300      	movs	r3, #0
 8002360:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a47      	ldr	r2, [pc, #284]	; (8002484 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d102      	bne.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800236c:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	e001      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10b      	bne.n	8002394 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002380:	f043 0220 	orr.w	r2, r3, #32
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e072      	b.n	800247a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ffb9 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 800239c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ffb3 	bl	800230e <LL_ADC_REG_IsConversionOngoing>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d154      	bne.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80023ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d151      	bne.n	8002458 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80023b4:	4b35      	ldr	r3, [pc, #212]	; (800248c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80023b6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d02c      	beq.n	800241a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80023c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023d2:	035b      	lsls	r3, r3, #13
 80023d4:	430b      	orrs	r3, r1
 80023d6:	431a      	orrs	r2, r3
 80023d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023da:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023dc:	4829      	ldr	r0, [pc, #164]	; (8002484 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023de:	f7ff ff83 	bl	80022e8 <LL_ADC_IsEnabled>
 80023e2:	4604      	mov	r4, r0
 80023e4:	4828      	ldr	r0, [pc, #160]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023e6:	f7ff ff7f 	bl	80022e8 <LL_ADC_IsEnabled>
 80023ea:	4603      	mov	r3, r0
 80023ec:	431c      	orrs	r4, r3
 80023ee:	4828      	ldr	r0, [pc, #160]	; (8002490 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80023f0:	f7ff ff7a 	bl	80022e8 <LL_ADC_IsEnabled>
 80023f4:	4603      	mov	r3, r0
 80023f6:	4323      	orrs	r3, r4
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d137      	bne.n	800246c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80023fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002404:	f023 030f 	bic.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	6811      	ldr	r1, [r2, #0]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	6892      	ldr	r2, [r2, #8]
 8002410:	430a      	orrs	r2, r1
 8002412:	431a      	orrs	r2, r3
 8002414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002416:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002418:	e028      	b.n	800246c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800241a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002424:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002426:	4817      	ldr	r0, [pc, #92]	; (8002484 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002428:	f7ff ff5e 	bl	80022e8 <LL_ADC_IsEnabled>
 800242c:	4604      	mov	r4, r0
 800242e:	4816      	ldr	r0, [pc, #88]	; (8002488 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002430:	f7ff ff5a 	bl	80022e8 <LL_ADC_IsEnabled>
 8002434:	4603      	mov	r3, r0
 8002436:	431c      	orrs	r4, r3
 8002438:	4815      	ldr	r0, [pc, #84]	; (8002490 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800243a:	f7ff ff55 	bl	80022e8 <LL_ADC_IsEnabled>
 800243e:	4603      	mov	r3, r0
 8002440:	4323      	orrs	r3, r4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d112      	bne.n	800246c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800244e:	f023 030f 	bic.w	r3, r3, #15
 8002452:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002454:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002456:	e009      	b.n	800246c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	f043 0220 	orr.w	r2, r3, #32
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800246a:	e000      	b.n	800246e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800246c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002476:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800247a:	4618      	mov	r0, r3
 800247c:	377c      	adds	r7, #124	; 0x7c
 800247e:	46bd      	mov	sp, r7
 8002480:	bd90      	pop	{r4, r7, pc}
 8002482:	bf00      	nop
 8002484:	50040000 	.word	0x50040000
 8002488:	50040100 	.word	0x50040100
 800248c:	50040300 	.word	0x50040300
 8002490:	50040200 	.word	0x50040200

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
         );
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	210f      	movs	r1, #15
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f7ff ff8e 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff29 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800265c:	f7ff ff3e 	bl	80024dc <__NVIC_GetPriorityGrouping>
 8002660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	6978      	ldr	r0, [r7, #20]
 8002668:	f7ff ff8e 	bl	8002588 <NVIC_EncodePriority>
 800266c:	4602      	mov	r2, r0
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff5d 	bl	8002534 <__NVIC_SetPriority>
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff31 	bl	80024f8 <__NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffa2 	bl	80025f0 <SysTick_Config>
 80026ac:	4603      	mov	r3, r0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026c6:	e17f      	b.n	80029c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	4013      	ands	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 8171 	beq.w	80029c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d005      	beq.n	80026f8 <HAL_GPIO_Init+0x40>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d130      	bne.n	800275a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800272e:	2201      	movs	r2, #1
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0201 	and.w	r2, r3, #1
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b03      	cmp	r3, #3
 8002764:	d118      	bne.n	8002798 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800276c:	2201      	movs	r2, #1
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	4013      	ands	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	08db      	lsrs	r3, r3, #3
 8002782:	f003 0201 	and.w	r2, r3, #1
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4313      	orrs	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b03      	cmp	r3, #3
 80027a2:	d017      	beq.n	80027d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	2203      	movs	r2, #3
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d123      	bne.n	8002828 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	08da      	lsrs	r2, r3, #3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3208      	adds	r2, #8
 80027e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 0307 	and.w	r3, r3, #7
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	220f      	movs	r2, #15
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	4013      	ands	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	08da      	lsrs	r2, r3, #3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3208      	adds	r2, #8
 8002822:	6939      	ldr	r1, [r7, #16]
 8002824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0203 	and.w	r2, r3, #3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 80ac 	beq.w	80029c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800286a:	4b5f      	ldr	r3, [pc, #380]	; (80029e8 <HAL_GPIO_Init+0x330>)
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	4a5e      	ldr	r2, [pc, #376]	; (80029e8 <HAL_GPIO_Init+0x330>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6613      	str	r3, [r2, #96]	; 0x60
 8002876:	4b5c      	ldr	r3, [pc, #368]	; (80029e8 <HAL_GPIO_Init+0x330>)
 8002878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002882:	4a5a      	ldr	r2, [pc, #360]	; (80029ec <HAL_GPIO_Init+0x334>)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4013      	ands	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028ac:	d025      	beq.n	80028fa <HAL_GPIO_Init+0x242>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a4f      	ldr	r2, [pc, #316]	; (80029f0 <HAL_GPIO_Init+0x338>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d01f      	beq.n	80028f6 <HAL_GPIO_Init+0x23e>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a4e      	ldr	r2, [pc, #312]	; (80029f4 <HAL_GPIO_Init+0x33c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d019      	beq.n	80028f2 <HAL_GPIO_Init+0x23a>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a4d      	ldr	r2, [pc, #308]	; (80029f8 <HAL_GPIO_Init+0x340>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d013      	beq.n	80028ee <HAL_GPIO_Init+0x236>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4c      	ldr	r2, [pc, #304]	; (80029fc <HAL_GPIO_Init+0x344>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00d      	beq.n	80028ea <HAL_GPIO_Init+0x232>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4b      	ldr	r2, [pc, #300]	; (8002a00 <HAL_GPIO_Init+0x348>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d007      	beq.n	80028e6 <HAL_GPIO_Init+0x22e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4a      	ldr	r2, [pc, #296]	; (8002a04 <HAL_GPIO_Init+0x34c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d101      	bne.n	80028e2 <HAL_GPIO_Init+0x22a>
 80028de:	2306      	movs	r3, #6
 80028e0:	e00c      	b.n	80028fc <HAL_GPIO_Init+0x244>
 80028e2:	2307      	movs	r3, #7
 80028e4:	e00a      	b.n	80028fc <HAL_GPIO_Init+0x244>
 80028e6:	2305      	movs	r3, #5
 80028e8:	e008      	b.n	80028fc <HAL_GPIO_Init+0x244>
 80028ea:	2304      	movs	r3, #4
 80028ec:	e006      	b.n	80028fc <HAL_GPIO_Init+0x244>
 80028ee:	2303      	movs	r3, #3
 80028f0:	e004      	b.n	80028fc <HAL_GPIO_Init+0x244>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e002      	b.n	80028fc <HAL_GPIO_Init+0x244>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <HAL_GPIO_Init+0x244>
 80028fa:	2300      	movs	r3, #0
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	f002 0203 	and.w	r2, r2, #3
 8002902:	0092      	lsls	r2, r2, #2
 8002904:	4093      	lsls	r3, r2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800290c:	4937      	ldr	r1, [pc, #220]	; (80029ec <HAL_GPIO_Init+0x334>)
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	089b      	lsrs	r3, r3, #2
 8002912:	3302      	adds	r3, #2
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800291a:	4b3b      	ldr	r3, [pc, #236]	; (8002a08 <HAL_GPIO_Init+0x350>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d003      	beq.n	800293e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800293e:	4a32      	ldr	r2, [pc, #200]	; (8002a08 <HAL_GPIO_Init+0x350>)
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002944:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <HAL_GPIO_Init+0x350>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	43db      	mvns	r3, r3
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002968:	4a27      	ldr	r2, [pc, #156]	; (8002a08 <HAL_GPIO_Init+0x350>)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800296e:	4b26      	ldr	r3, [pc, #152]	; (8002a08 <HAL_GPIO_Init+0x350>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	43db      	mvns	r3, r3
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	4013      	ands	r3, r2
 800297c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_GPIO_Init+0x350>)
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_GPIO_Init+0x350>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	43db      	mvns	r3, r3
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	4013      	ands	r3, r2
 80029a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <HAL_GPIO_Init+0x350>)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	3301      	adds	r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa22 f303 	lsr.w	r3, r2, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f47f ae78 	bne.w	80026c8 <HAL_GPIO_Init+0x10>
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	371c      	adds	r7, #28
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	40010000 	.word	0x40010000
 80029f0:	48000400 	.word	0x48000400
 80029f4:	48000800 	.word	0x48000800
 80029f8:	48000c00 	.word	0x48000c00
 80029fc:	48001000 	.word	0x48001000
 8002a00:	48001400 	.word	0x48001400
 8002a04:	48001800 	.word	0x48001800
 8002a08:	40010400 	.word	0x40010400

08002a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d002      	beq.n	8002a2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
 8002a28:	e001      	b.n	8002a2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	807b      	strh	r3, [r7, #2]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a4c:	787b      	ldrb	r3, [r7, #1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a52:	887a      	ldrh	r2, [r7, #2]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a58:	e002      	b.n	8002a60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a78:	695a      	ldr	r2, [r3, #20]
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d006      	beq.n	8002a90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a82:	4a05      	ldr	r2, [pc, #20]	; (8002a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 f806 	bl	8002a9c <HAL_GPIO_EXTI_Callback>
  }
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40010400 	.word	0x40010400

08002a9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ab8:	4b04      	ldr	r3, [pc, #16]	; (8002acc <HAL_PWREx_GetVoltageRange+0x18>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40007000 	.word	0x40007000

08002ad0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ade:	d130      	bne.n	8002b42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ae0:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aec:	d038      	beq.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002af6:	4a1e      	ldr	r2, [pc, #120]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002af8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002afc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002afe:	4b1d      	ldr	r3, [pc, #116]	; (8002b74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2232      	movs	r2, #50	; 0x32
 8002b04:	fb02 f303 	mul.w	r3, r2, r3
 8002b08:	4a1b      	ldr	r2, [pc, #108]	; (8002b78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	0c9b      	lsrs	r3, r3, #18
 8002b10:	3301      	adds	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b14:	e002      	b.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b1e:	695b      	ldr	r3, [r3, #20]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b28:	d102      	bne.n	8002b30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f2      	bne.n	8002b16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b30:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3c:	d110      	bne.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e00f      	b.n	8002b62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b4e:	d007      	beq.n	8002b60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b58:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40007000 	.word	0x40007000
 8002b74:	20000000 	.word	0x20000000
 8002b78:	431bde83 	.word	0x431bde83

08002b7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e3ca      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b8e:	4b97      	ldr	r3, [pc, #604]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b98:	4b94      	ldr	r3, [pc, #592]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0310 	and.w	r3, r3, #16
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	f000 80e4 	beq.w	8002d78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x4a>
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	f040 808b 	bne.w	8002cd4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	f040 8087 	bne.w	8002cd4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bc6:	4b89      	ldr	r3, [pc, #548]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_RCC_OscConfig+0x62>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e3a2      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1a      	ldr	r2, [r3, #32]
 8002be2:	4b82      	ldr	r3, [pc, #520]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d004      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x7c>
 8002bee:	4b7f      	ldr	r3, [pc, #508]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf6:	e005      	b.n	8002c04 <HAL_RCC_OscConfig+0x88>
 8002bf8:	4b7c      	ldr	r3, [pc, #496]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d223      	bcs.n	8002c50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fd55 	bl	80036bc <RCC_SetFlashLatencyFromMSIRange>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e383      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c1c:	4b73      	ldr	r3, [pc, #460]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a72      	ldr	r2, [pc, #456]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c22:	f043 0308 	orr.w	r3, r3, #8
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	4b70      	ldr	r3, [pc, #448]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	496d      	ldr	r1, [pc, #436]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c3a:	4b6c      	ldr	r3, [pc, #432]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	4968      	ldr	r1, [pc, #416]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
 8002c4e:	e025      	b.n	8002c9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c50:	4b66      	ldr	r3, [pc, #408]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a65      	ldr	r2, [pc, #404]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c56:	f043 0308 	orr.w	r3, r3, #8
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	4b63      	ldr	r3, [pc, #396]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	4960      	ldr	r1, [pc, #384]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c6e:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	021b      	lsls	r3, r3, #8
 8002c7c:	495b      	ldr	r1, [pc, #364]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a1b      	ldr	r3, [r3, #32]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fd15 	bl	80036bc <RCC_SetFlashLatencyFromMSIRange>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e343      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c9c:	f000 fc4a 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b52      	ldr	r3, [pc, #328]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	4950      	ldr	r1, [pc, #320]	; (8002df0 <HAL_RCC_OscConfig+0x274>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb8:	4a4e      	ldr	r2, [pc, #312]	; (8002df4 <HAL_RCC_OscConfig+0x278>)
 8002cba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002cbc:	4b4e      	ldr	r3, [pc, #312]	; (8002df8 <HAL_RCC_OscConfig+0x27c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe f945 	bl	8000f50 <HAL_InitTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d052      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	e327      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d032      	beq.n	8002d42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cdc:	4b43      	ldr	r3, [pc, #268]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a42      	ldr	r2, [pc, #264]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ce8:	f7fe f982 	bl	8000ff0 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cf0:	f7fe f97e 	bl	8000ff0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e310      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d02:	4b3a      	ldr	r3, [pc, #232]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d0e:	4b37      	ldr	r3, [pc, #220]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a36      	ldr	r2, [pc, #216]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d14:	f043 0308 	orr.w	r3, r3, #8
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4931      	ldr	r1, [pc, #196]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d2c:	4b2f      	ldr	r3, [pc, #188]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	492c      	ldr	r1, [pc, #176]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	604b      	str	r3, [r1, #4]
 8002d40:	e01a      	b.n	8002d78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d42:	4b2a      	ldr	r3, [pc, #168]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a29      	ldr	r2, [pc, #164]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d4e:	f7fe f94f 	bl	8000ff0 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d56:	f7fe f94b 	bl	8000ff0 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e2dd      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002d68:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0x1da>
 8002d74:	e000      	b.n	8002d78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d074      	beq.n	8002e6e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d005      	beq.n	8002d96 <HAL_RCC_OscConfig+0x21a>
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2b0c      	cmp	r3, #12
 8002d8e:	d10e      	bne.n	8002dae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d10b      	bne.n	8002dae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d96:	4b15      	ldr	r3, [pc, #84]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d064      	beq.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d160      	bne.n	8002e6c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e2ba      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x24a>
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	e026      	b.n	8002e14 <HAL_RCC_OscConfig+0x298>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dce:	d115      	bne.n	8002dfc <HAL_RCC_OscConfig+0x280>
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a05      	ldr	r2, [pc, #20]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002dd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b03      	ldr	r3, [pc, #12]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a02      	ldr	r2, [pc, #8]	; (8002dec <HAL_RCC_OscConfig+0x270>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
 8002de8:	e014      	b.n	8002e14 <HAL_RCC_OscConfig+0x298>
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	08005720 	.word	0x08005720
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000004 	.word	0x20000004
 8002dfc:	4ba0      	ldr	r3, [pc, #640]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a9f      	ldr	r2, [pc, #636]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	4b9d      	ldr	r3, [pc, #628]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a9c      	ldr	r2, [pc, #624]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d013      	beq.n	8002e44 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe f8e8 	bl	8000ff0 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e24:	f7fe f8e4 	bl	8000ff0 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b64      	cmp	r3, #100	; 0x64
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e276      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e36:	4b92      	ldr	r3, [pc, #584]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x2a8>
 8002e42:	e014      	b.n	8002e6e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe f8d4 	bl	8000ff0 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e4c:	f7fe f8d0 	bl	8000ff0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b64      	cmp	r3, #100	; 0x64
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e262      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002e5e:	4b88      	ldr	r3, [pc, #544]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x2d0>
 8002e6a:	e000      	b.n	8002e6e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d060      	beq.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b04      	cmp	r3, #4
 8002e7e:	d005      	beq.n	8002e8c <HAL_RCC_OscConfig+0x310>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	2b0c      	cmp	r3, #12
 8002e84:	d119      	bne.n	8002eba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d116      	bne.n	8002eba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e8c:	4b7c      	ldr	r3, [pc, #496]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x328>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e23f      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea4:	4b76      	ldr	r3, [pc, #472]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	4973      	ldr	r1, [pc, #460]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb8:	e040      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d023      	beq.n	8002f0a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ec2:	4b6f      	ldr	r3, [pc, #444]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a6e      	ldr	r2, [pc, #440]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ece:	f7fe f88f 	bl	8000ff0 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed6:	f7fe f88b 	bl	8000ff0 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e21d      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ee8:	4b65      	ldr	r3, [pc, #404]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef4:	4b62      	ldr	r3, [pc, #392]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	061b      	lsls	r3, r3, #24
 8002f02:	495f      	ldr	r1, [pc, #380]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	604b      	str	r3, [r1, #4]
 8002f08:	e018      	b.n	8002f3c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0a:	4b5d      	ldr	r3, [pc, #372]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a5c      	ldr	r2, [pc, #368]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7fe f86b 	bl	8000ff0 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7fe f867 	bl	8000ff0 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e1f9      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f30:	4b53      	ldr	r3, [pc, #332]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f0      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d03c      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01c      	beq.n	8002f8a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f50:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f56:	4a4a      	ldr	r2, [pc, #296]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f58:	f043 0301 	orr.w	r3, r3, #1
 8002f5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe f846 	bl	8000ff0 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fe f842 	bl	8000ff0 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1d4      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f7a:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ef      	beq.n	8002f68 <HAL_RCC_OscConfig+0x3ec>
 8002f88:	e01b      	b.n	8002fc2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f8a:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f90:	4a3b      	ldr	r2, [pc, #236]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002f92:	f023 0301 	bic.w	r3, r3, #1
 8002f96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fe f829 	bl	8000ff0 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa2:	f7fe f825 	bl	8000ff0 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1b7      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d1ef      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80a6 	beq.w	800311c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002fd4:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d10d      	bne.n	8002ffc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	4a26      	ldr	r2, [pc, #152]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fea:	6593      	str	r3, [r2, #88]	; 0x58
 8002fec:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ffc:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_RCC_OscConfig+0x508>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d118      	bne.n	800303a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003008:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <HAL_RCC_OscConfig+0x508>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <HAL_RCC_OscConfig+0x508>)
 800300e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003012:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003014:	f7fd ffec 	bl	8000ff0 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800301c:	f7fd ffe8 	bl	8000ff0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e17a      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <HAL_RCC_OscConfig+0x508>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d108      	bne.n	8003054 <HAL_RCC_OscConfig+0x4d8>
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	4a0d      	ldr	r2, [pc, #52]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 800304a:	f043 0301 	orr.w	r3, r3, #1
 800304e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003052:	e029      	b.n	80030a8 <HAL_RCC_OscConfig+0x52c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	2b05      	cmp	r3, #5
 800305a:	d115      	bne.n	8003088 <HAL_RCC_OscConfig+0x50c>
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 800305e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003062:	4a07      	ldr	r2, [pc, #28]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800306c:	4b04      	ldr	r3, [pc, #16]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 800306e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003072:	4a03      	ldr	r2, [pc, #12]	; (8003080 <HAL_RCC_OscConfig+0x504>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800307c:	e014      	b.n	80030a8 <HAL_RCC_OscConfig+0x52c>
 800307e:	bf00      	nop
 8003080:	40021000 	.word	0x40021000
 8003084:	40007000 	.word	0x40007000
 8003088:	4b9c      	ldr	r3, [pc, #624]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	4a9b      	ldr	r2, [pc, #620]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003090:	f023 0301 	bic.w	r3, r3, #1
 8003094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003098:	4b98      	ldr	r3, [pc, #608]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309e:	4a97      	ldr	r2, [pc, #604]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80030a0:	f023 0304 	bic.w	r3, r3, #4
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d016      	beq.n	80030de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fd ff9e 	bl	8000ff0 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7fd ff9a 	bl	8000ff0 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e12a      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030ce:	4b8b      	ldr	r3, [pc, #556]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ed      	beq.n	80030b8 <HAL_RCC_OscConfig+0x53c>
 80030dc:	e015      	b.n	800310a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fd ff87 	bl	8000ff0 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030e4:	e00a      	b.n	80030fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e6:	f7fd ff83 	bl	8000ff0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e113      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030fc:	4b7f      	ldr	r3, [pc, #508]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80030fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1ed      	bne.n	80030e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800310a:	7ffb      	ldrb	r3, [r7, #31]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d105      	bne.n	800311c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003110:	4b7a      	ldr	r3, [pc, #488]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	4a79      	ldr	r2, [pc, #484]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800311a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80fe 	beq.w	8003322 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	2b02      	cmp	r3, #2
 800312c:	f040 80d0 	bne.w	80032d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003130:	4b72      	ldr	r3, [pc, #456]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003140:	429a      	cmp	r2, r3
 8003142:	d130      	bne.n	80031a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	3b01      	subs	r3, #1
 8003150:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003152:	429a      	cmp	r2, r3
 8003154:	d127      	bne.n	80031a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003160:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d11f      	bne.n	80031a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003170:	2a07      	cmp	r2, #7
 8003172:	bf14      	ite	ne
 8003174:	2201      	movne	r2, #1
 8003176:	2200      	moveq	r2, #0
 8003178:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800317a:	4293      	cmp	r3, r2
 800317c:	d113      	bne.n	80031a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003188:	085b      	lsrs	r3, r3, #1
 800318a:	3b01      	subs	r3, #1
 800318c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800318e:	429a      	cmp	r2, r3
 8003190:	d109      	bne.n	80031a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	085b      	lsrs	r3, r3, #1
 800319e:	3b01      	subs	r3, #1
 80031a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d06e      	beq.n	8003284 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	d069      	beq.n	8003280 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031ac:	4b53      	ldr	r3, [pc, #332]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d105      	bne.n	80031c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80031b8:	4b50      	ldr	r3, [pc, #320]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0ad      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031c8:	4b4c      	ldr	r3, [pc, #304]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a4b      	ldr	r2, [pc, #300]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031d4:	f7fd ff0c 	bl	8000ff0 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031dc:	f7fd ff08 	bl	8000ff0 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e09a      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ee:	4b43      	ldr	r3, [pc, #268]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f0      	bne.n	80031dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031fa:	4b40      	ldr	r3, [pc, #256]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_RCC_OscConfig+0x784>)
 8003200:	4013      	ands	r3, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800320a:	3a01      	subs	r2, #1
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	4311      	orrs	r1, r2
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003214:	0212      	lsls	r2, r2, #8
 8003216:	4311      	orrs	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800321c:	0852      	lsrs	r2, r2, #1
 800321e:	3a01      	subs	r2, #1
 8003220:	0552      	lsls	r2, r2, #21
 8003222:	4311      	orrs	r1, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003228:	0852      	lsrs	r2, r2, #1
 800322a:	3a01      	subs	r2, #1
 800322c:	0652      	lsls	r2, r2, #25
 800322e:	4311      	orrs	r1, r2
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003234:	0912      	lsrs	r2, r2, #4
 8003236:	0452      	lsls	r2, r2, #17
 8003238:	430a      	orrs	r2, r1
 800323a:	4930      	ldr	r1, [pc, #192]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 800323c:	4313      	orrs	r3, r2
 800323e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003240:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2d      	ldr	r2, [pc, #180]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800324a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800324c:	4b2b      	ldr	r3, [pc, #172]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003256:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003258:	f7fd feca 	bl	8000ff0 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003260:	f7fd fec6 	bl	8000ff0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e058      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003272:	4b22      	ldr	r3, [pc, #136]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800327e:	e050      	b.n	8003322 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e04f      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d148      	bne.n	8003322 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003290:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 8003296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800329a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800329c:	4b17      	ldr	r3, [pc, #92]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	4a16      	ldr	r2, [pc, #88]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80032a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032a8:	f7fd fea2 	bl	8000ff0 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fd fe9e 	bl	8000ff0 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e030      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032c2:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x734>
 80032ce:	e028      	b.n	8003322 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b0c      	cmp	r3, #12
 80032d4:	d023      	beq.n	800331e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032d6:	4b09      	ldr	r3, [pc, #36]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a08      	ldr	r2, [pc, #32]	; (80032fc <HAL_RCC_OscConfig+0x780>)
 80032dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fd fe85 	bl	8000ff0 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	e00c      	b.n	8003304 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ea:	f7fd fe81 	bl	8000ff0 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d905      	bls.n	8003304 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e013      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
 80032fc:	40021000 	.word	0x40021000
 8003300:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003304:	4b09      	ldr	r3, [pc, #36]	; (800332c <HAL_RCC_OscConfig+0x7b0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ec      	bne.n	80032ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003310:	4b06      	ldr	r3, [pc, #24]	; (800332c <HAL_RCC_OscConfig+0x7b0>)
 8003312:	68da      	ldr	r2, [r3, #12]
 8003314:	4905      	ldr	r1, [pc, #20]	; (800332c <HAL_RCC_OscConfig+0x7b0>)
 8003316:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCC_OscConfig+0x7b4>)
 8003318:	4013      	ands	r3, r2
 800331a:	60cb      	str	r3, [r1, #12]
 800331c:	e001      	b.n	8003322 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e000      	b.n	8003324 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40021000 	.word	0x40021000
 8003330:	feeefffc 	.word	0xfeeefffc

08003334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d101      	bne.n	8003348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0e7      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003348:	4b75      	ldr	r3, [pc, #468]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d910      	bls.n	8003378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003356:	4b72      	ldr	r3, [pc, #456]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 0207 	bic.w	r2, r3, #7
 800335e:	4970      	ldr	r1, [pc, #448]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b6e      	ldr	r3, [pc, #440]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0cf      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d010      	beq.n	80033a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	4b66      	ldr	r3, [pc, #408]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003390:	429a      	cmp	r2, r3
 8003392:	d908      	bls.n	80033a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003394:	4b63      	ldr	r3, [pc, #396]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4960      	ldr	r1, [pc, #384]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033a2:	4313      	orrs	r3, r2
 80033a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d04c      	beq.n	800344c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b03      	cmp	r3, #3
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ba:	4b5a      	ldr	r3, [pc, #360]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d121      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e0a6      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d2:	4b54      	ldr	r3, [pc, #336]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d115      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e09a      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ea:	4b4e      	ldr	r3, [pc, #312]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e08e      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033fa:	4b4a      	ldr	r3, [pc, #296]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e086      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800340a:	4b46      	ldr	r3, [pc, #280]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 0203 	bic.w	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	4943      	ldr	r1, [pc, #268]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003418:	4313      	orrs	r3, r2
 800341a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fd fde8 	bl	8000ff0 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	e00a      	b.n	800343a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003424:	f7fd fde4 	bl	8000ff0 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d901      	bls.n	800343a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e06e      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343a:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 020c 	and.w	r2, r3, #12
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	429a      	cmp	r2, r3
 800344a:	d1eb      	bne.n	8003424 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0302 	and.w	r3, r3, #2
 8003454:	2b00      	cmp	r3, #0
 8003456:	d010      	beq.n	800347a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689a      	ldr	r2, [r3, #8]
 800345c:	4b31      	ldr	r3, [pc, #196]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003464:	429a      	cmp	r2, r3
 8003466:	d208      	bcs.n	800347a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	492b      	ldr	r1, [pc, #172]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800347a:	4b29      	ldr	r3, [pc, #164]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d210      	bcs.n	80034aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003488:	4b25      	ldr	r3, [pc, #148]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f023 0207 	bic.w	r2, r3, #7
 8003490:	4923      	ldr	r1, [pc, #140]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <HAL_RCC_ClockConfig+0x1ec>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e036      	b.n	8003518 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	4918      	ldr	r1, [pc, #96]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034d4:	4b13      	ldr	r3, [pc, #76]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4910      	ldr	r1, [pc, #64]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034e8:	f000 f824 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80034ec:	4602      	mov	r2, r0
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <HAL_RCC_ClockConfig+0x1f0>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	091b      	lsrs	r3, r3, #4
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	490b      	ldr	r1, [pc, #44]	; (8003528 <HAL_RCC_ClockConfig+0x1f4>)
 80034fa:	5ccb      	ldrb	r3, [r1, r3]
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	4a09      	ldr	r2, [pc, #36]	; (800352c <HAL_RCC_ClockConfig+0x1f8>)
 8003506:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003508:	4b09      	ldr	r3, [pc, #36]	; (8003530 <HAL_RCC_ClockConfig+0x1fc>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd fd1f 	bl	8000f50 <HAL_InitTick>
 8003512:	4603      	mov	r3, r0
 8003514:	72fb      	strb	r3, [r7, #11]

  return status;
 8003516:	7afb      	ldrb	r3, [r7, #11]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40022000 	.word	0x40022000
 8003524:	40021000 	.word	0x40021000
 8003528:	08005720 	.word	0x08005720
 800352c:	20000000 	.word	0x20000000
 8003530:	20000004 	.word	0x20000004

08003534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003534:	b480      	push	{r7}
 8003536:	b089      	sub	sp, #36	; 0x24
 8003538:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800353a:	2300      	movs	r3, #0
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	2300      	movs	r3, #0
 8003540:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003542:	4b3e      	ldr	r3, [pc, #248]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800354c:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0x34>
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d121      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d11e      	bne.n	80035a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003568:	4b34      	ldr	r3, [pc, #208]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d107      	bne.n	8003584 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003574:	4b31      	ldr	r3, [pc, #196]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 030f 	and.w	r3, r3, #15
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	e005      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003584:	4b2d      	ldr	r3, [pc, #180]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003590:	4a2b      	ldr	r2, [pc, #172]	; (8003640 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003598:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035a4:	e00a      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d102      	bne.n	80035b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <HAL_RCC_GetSysClockFreq+0x110>)
 80035ae:	61bb      	str	r3, [r7, #24]
 80035b0:	e004      	b.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d101      	bne.n	80035bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035b8:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_RCC_GetSysClockFreq+0x114>)
 80035ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d134      	bne.n	800362c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0303 	and.w	r3, r3, #3
 80035ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d003      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0xa6>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d003      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0xac>
 80035d8:	e005      	b.n	80035e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80035da:	4b1a      	ldr	r3, [pc, #104]	; (8003644 <HAL_RCC_GetSysClockFreq+0x110>)
 80035dc:	617b      	str	r3, [r7, #20]
      break;
 80035de:	e005      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80035e0:	4b19      	ldr	r3, [pc, #100]	; (8003648 <HAL_RCC_GetSysClockFreq+0x114>)
 80035e2:	617b      	str	r3, [r7, #20]
      break;
 80035e4:	e002      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	617b      	str	r3, [r7, #20]
      break;
 80035ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	3301      	adds	r3, #1
 80035f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	fb03 f202 	mul.w	r2, r3, r2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003612:	4b0a      	ldr	r3, [pc, #40]	; (800363c <HAL_RCC_GetSysClockFreq+0x108>)
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	0e5b      	lsrs	r3, r3, #25
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	3301      	adds	r3, #1
 800361e:	005b      	lsls	r3, r3, #1
 8003620:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	fbb2 f3f3 	udiv	r3, r2, r3
 800362a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800362c:	69bb      	ldr	r3, [r7, #24]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3724      	adds	r7, #36	; 0x24
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	08005738 	.word	0x08005738
 8003644:	00f42400 	.word	0x00f42400
 8003648:	007a1200 	.word	0x007a1200

0800364c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003650:	4b03      	ldr	r3, [pc, #12]	; (8003660 <HAL_RCC_GetHCLKFreq+0x14>)
 8003652:	681b      	ldr	r3, [r3, #0]
}
 8003654:	4618      	mov	r0, r3
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000000 	.word	0x20000000

08003664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003668:	f7ff fff0 	bl	800364c <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	0a1b      	lsrs	r3, r3, #8
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4904      	ldr	r1, [pc, #16]	; (800368c <HAL_RCC_GetPCLK1Freq+0x28>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40021000 	.word	0x40021000
 800368c:	08005730 	.word	0x08005730

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003694:	f7ff ffda 	bl	800364c <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0adb      	lsrs	r3, r3, #11
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4904      	ldr	r1, [pc, #16]	; (80036b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	40021000 	.word	0x40021000
 80036b8:	08005730 	.word	0x08005730

080036bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80036c4:	2300      	movs	r3, #0
 80036c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80036c8:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80036d4:	f7ff f9ee 	bl	8002ab4 <HAL_PWREx_GetVoltageRange>
 80036d8:	6178      	str	r0, [r7, #20]
 80036da:	e014      	b.n	8003706 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80036dc:	4b25      	ldr	r3, [pc, #148]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	4a24      	ldr	r2, [pc, #144]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e6:	6593      	str	r3, [r2, #88]	; 0x58
 80036e8:	4b22      	ldr	r3, [pc, #136]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80036f4:	f7ff f9de 	bl	8002ab4 <HAL_PWREx_GetVoltageRange>
 80036f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80036fa:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003704:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370c:	d10b      	bne.n	8003726 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b80      	cmp	r3, #128	; 0x80
 8003712:	d919      	bls.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2ba0      	cmp	r3, #160	; 0xa0
 8003718:	d902      	bls.n	8003720 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800371a:	2302      	movs	r3, #2
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	e013      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003720:	2301      	movs	r3, #1
 8003722:	613b      	str	r3, [r7, #16]
 8003724:	e010      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b80      	cmp	r3, #128	; 0x80
 800372a:	d902      	bls.n	8003732 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800372c:	2303      	movs	r3, #3
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	e00a      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b80      	cmp	r3, #128	; 0x80
 8003736:	d102      	bne.n	800373e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003738:	2302      	movs	r3, #2
 800373a:	613b      	str	r3, [r7, #16]
 800373c:	e004      	b.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b70      	cmp	r3, #112	; 0x70
 8003742:	d101      	bne.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003744:	2301      	movs	r3, #1
 8003746:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f023 0207 	bic.w	r2, r3, #7
 8003750:	4909      	ldr	r1, [pc, #36]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003758:	4b07      	ldr	r3, [pc, #28]	; (8003778 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	429a      	cmp	r2, r3
 8003764:	d001      	beq.n	800376a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40021000 	.word	0x40021000
 8003778:	40022000 	.word	0x40022000

0800377c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003784:	2300      	movs	r3, #0
 8003786:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003788:	2300      	movs	r3, #0
 800378a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003794:	2b00      	cmp	r3, #0
 8003796:	d041      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800379c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037a0:	d02a      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80037a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80037a6:	d824      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037ac:	d008      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80037ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037b2:	d81e      	bhi.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80037b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037bc:	d010      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80037be:	e018      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037c0:	4b86      	ldr	r3, [pc, #536]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a85      	ldr	r2, [pc, #532]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037cc:	e015      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 fabb 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037de:	e00c      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3320      	adds	r3, #32
 80037e4:	2100      	movs	r1, #0
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fba6 	bl	8003f38 <RCCEx_PLLSAI2_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037f0:	e003      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	74fb      	strb	r3, [r7, #19]
      break;
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10b      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003800:	4b76      	ldr	r3, [pc, #472]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003806:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380e:	4973      	ldr	r1, [pc, #460]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003816:	e001      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d041      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800382c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003830:	d02a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003832:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003836:	d824      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003838:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800383c:	d008      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800383e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003842:	d81e      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800384c:	d010      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800384e:	e018      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003850:	4b62      	ldr	r3, [pc, #392]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	4a61      	ldr	r2, [pc, #388]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800385c:	e015      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3304      	adds	r3, #4
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f000 fa73 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800386e:	e00c      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	3320      	adds	r3, #32
 8003874:	2100      	movs	r1, #0
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fb5e 	bl	8003f38 <RCCEx_PLLSAI2_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003880:	e003      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	74fb      	strb	r3, [r7, #19]
      break;
 8003886:	e000      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800388a:	7cfb      	ldrb	r3, [r7, #19]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10b      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003890:	4b52      	ldr	r3, [pc, #328]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800389e:	494f      	ldr	r1, [pc, #316]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038a6:	e001      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a8:	7cfb      	ldrb	r3, [r7, #19]
 80038aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a0 	beq.w	80039fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ba:	2300      	movs	r3, #0
 80038bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038be:	4b47      	ldr	r3, [pc, #284]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80038ce:	2300      	movs	r3, #0
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00d      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038d4:	4b41      	ldr	r3, [pc, #260]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d8:	4a40      	ldr	r2, [pc, #256]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038de:	6593      	str	r3, [r2, #88]	; 0x58
 80038e0:	4b3e      	ldr	r3, [pc, #248]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e8:	60bb      	str	r3, [r7, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ec:	2301      	movs	r3, #1
 80038ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038f0:	4b3b      	ldr	r3, [pc, #236]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a3a      	ldr	r2, [pc, #232]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80038f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038fc:	f7fd fb78 	bl	8000ff0 <HAL_GetTick>
 8003900:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003902:	e009      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003904:	f7fd fb74 	bl	8000ff0 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d902      	bls.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	74fb      	strb	r3, [r7, #19]
        break;
 8003916:	e005      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003918:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0ef      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003924:	7cfb      	ldrb	r3, [r7, #19]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d15c      	bne.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800392a:	4b2c      	ldr	r3, [pc, #176]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003934:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01f      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	429a      	cmp	r2, r3
 8003946:	d019      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003948:	4b24      	ldr	r3, [pc, #144]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800394e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003952:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003954:	4b21      	ldr	r3, [pc, #132]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	4a20      	ldr	r2, [pc, #128]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003964:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800396c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003974:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fd fb33 	bl	8000ff0 <HAL_GetTick>
 800398a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800398c:	e00b      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800398e:	f7fd fb2f 	bl	8000ff0 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	f241 3288 	movw	r2, #5000	; 0x1388
 800399c:	4293      	cmp	r3, r2
 800399e:	d902      	bls.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	74fb      	strb	r3, [r7, #19]
            break;
 80039a4:	e006      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0ec      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80039b4:	7cfb      	ldrb	r3, [r7, #19]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ca:	4904      	ldr	r1, [pc, #16]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039d2:	e009      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039d4:	7cfb      	ldrb	r3, [r7, #19]
 80039d6:	74bb      	strb	r3, [r7, #18]
 80039d8:	e006      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039e8:	7c7b      	ldrb	r3, [r7, #17]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039ee:	4b9e      	ldr	r3, [pc, #632]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	4a9d      	ldr	r2, [pc, #628]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a06:	4b98      	ldr	r3, [pc, #608]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	f023 0203 	bic.w	r2, r3, #3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	4994      	ldr	r1, [pc, #592]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a28:	4b8f      	ldr	r3, [pc, #572]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f023 020c 	bic.w	r2, r3, #12
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a36:	498c      	ldr	r1, [pc, #560]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0304 	and.w	r3, r3, #4
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a4a:	4b87      	ldr	r3, [pc, #540]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a58:	4983      	ldr	r1, [pc, #524]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a6c:	4b7e      	ldr	r3, [pc, #504]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	497b      	ldr	r1, [pc, #492]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0310 	and.w	r3, r3, #16
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a8e:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9c:	4972      	ldr	r1, [pc, #456]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ab0:	4b6d      	ldr	r3, [pc, #436]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003abe:	496a      	ldr	r1, [pc, #424]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad2:	4b65      	ldr	r3, [pc, #404]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	4961      	ldr	r1, [pc, #388]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003af4:	4b5c      	ldr	r3, [pc, #368]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b02:	4959      	ldr	r1, [pc, #356]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b16:	4b54      	ldr	r3, [pc, #336]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b24:	4950      	ldr	r1, [pc, #320]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b38:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	4948      	ldr	r1, [pc, #288]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b5a:	4b43      	ldr	r3, [pc, #268]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b68:	493f      	ldr	r1, [pc, #252]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d028      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b7c:	4b3a      	ldr	r3, [pc, #232]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8a:	4937      	ldr	r1, [pc, #220]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b9a:	d106      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b9c:	4b32      	ldr	r3, [pc, #200]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4a31      	ldr	r2, [pc, #196]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba6:	60d3      	str	r3, [r2, #12]
 8003ba8:	e011      	b.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003bb2:	d10c      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3304      	adds	r3, #4
 8003bb8:	2101      	movs	r1, #1
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f8c8 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003bca:	7cfb      	ldrb	r3, [r7, #19]
 8003bcc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d028      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bda:	4b23      	ldr	r3, [pc, #140]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	491f      	ldr	r1, [pc, #124]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bf8:	d106      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bfa:	4b1b      	ldr	r3, [pc, #108]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	4a1a      	ldr	r2, [pc, #104]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c04:	60d3      	str	r3, [r2, #12]
 8003c06:	e011      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c10:	d10c      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	2101      	movs	r1, #1
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f000 f899 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c22:	7cfb      	ldrb	r3, [r7, #19]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d001      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d02b      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c38:	4b0b      	ldr	r3, [pc, #44]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	4908      	ldr	r1, [pc, #32]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c56:	d109      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a02      	ldr	r2, [pc, #8]	; (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c62:	60d3      	str	r3, [r2, #12]
 8003c64:	e014      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 f867 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 8003c82:	4603      	mov	r3, r0
 8003c84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c86:	7cfb      	ldrb	r3, [r7, #19]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d02f      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c9c:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003caa:	4928      	ldr	r1, [pc, #160]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cba:	d10d      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	2102      	movs	r1, #2
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 f844 	bl	8003d50 <RCCEx_PLLSAI1_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d014      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cd2:	7cfb      	ldrb	r3, [r7, #19]
 8003cd4:	74bb      	strb	r3, [r7, #18]
 8003cd6:	e011      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3320      	adds	r3, #32
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 f925 	bl	8003f38 <RCCEx_PLLSAI2_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d08:	4b10      	ldr	r3, [pc, #64]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d16:	490d      	ldr	r1, [pc, #52]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d2a:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d30:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d3a:	4904      	ldr	r1, [pc, #16]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d42:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40021000 	.word	0x40021000

08003d50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d5e:	4b75      	ldr	r3, [pc, #468]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d018      	beq.n	8003d9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d6a:	4b72      	ldr	r3, [pc, #456]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	f003 0203 	and.w	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d10d      	bne.n	8003d96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
       ||
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003d82:	4b6c      	ldr	r3, [pc, #432]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	091b      	lsrs	r3, r3, #4
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
       ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d047      	beq.n	8003e26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
 8003d9a:	e044      	b.n	8003e26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2b03      	cmp	r3, #3
 8003da2:	d018      	beq.n	8003dd6 <RCCEx_PLLSAI1_Config+0x86>
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d825      	bhi.n	8003df4 <RCCEx_PLLSAI1_Config+0xa4>
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d002      	beq.n	8003db2 <RCCEx_PLLSAI1_Config+0x62>
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d009      	beq.n	8003dc4 <RCCEx_PLLSAI1_Config+0x74>
 8003db0:	e020      	b.n	8003df4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003db2:	4b60      	ldr	r3, [pc, #384]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d11d      	bne.n	8003dfa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc2:	e01a      	b.n	8003dfa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dc4:	4b5b      	ldr	r3, [pc, #364]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d116      	bne.n	8003dfe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd4:	e013      	b.n	8003dfe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dd6:	4b57      	ldr	r3, [pc, #348]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003de2:	4b54      	ldr	r3, [pc, #336]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003df2:	e006      	b.n	8003e02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	73fb      	strb	r3, [r7, #15]
      break;
 8003df8:	e004      	b.n	8003e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dfa:	bf00      	nop
 8003dfc:	e002      	b.n	8003e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003dfe:	bf00      	nop
 8003e00:	e000      	b.n	8003e04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e02:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10d      	bne.n	8003e26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e0a:	4b4a      	ldr	r3, [pc, #296]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6819      	ldr	r1, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	4944      	ldr	r1, [pc, #272]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d17d      	bne.n	8003f28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e2c:	4b41      	ldr	r3, [pc, #260]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a40      	ldr	r2, [pc, #256]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e38:	f7fd f8da 	bl	8000ff0 <HAL_GetTick>
 8003e3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e3e:	e009      	b.n	8003e54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e40:	f7fd f8d6 	bl	8000ff0 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d902      	bls.n	8003e54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	73fb      	strb	r3, [r7, #15]
        break;
 8003e52:	e005      	b.n	8003e60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e54:	4b37      	ldr	r3, [pc, #220]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1ef      	bne.n	8003e40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d160      	bne.n	8003f28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d111      	bne.n	8003e90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e6c:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6892      	ldr	r2, [r2, #8]
 8003e7c:	0211      	lsls	r1, r2, #8
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68d2      	ldr	r2, [r2, #12]
 8003e82:	0912      	lsrs	r2, r2, #4
 8003e84:	0452      	lsls	r2, r2, #17
 8003e86:	430a      	orrs	r2, r1
 8003e88:	492a      	ldr	r1, [pc, #168]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	610b      	str	r3, [r1, #16]
 8003e8e:	e027      	b.n	8003ee0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d112      	bne.n	8003ebc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e96:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003e9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6892      	ldr	r2, [r2, #8]
 8003ea6:	0211      	lsls	r1, r2, #8
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6912      	ldr	r2, [r2, #16]
 8003eac:	0852      	lsrs	r2, r2, #1
 8003eae:	3a01      	subs	r2, #1
 8003eb0:	0552      	lsls	r2, r2, #21
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	491f      	ldr	r1, [pc, #124]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	610b      	str	r3, [r1, #16]
 8003eba:	e011      	b.n	8003ee0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003ec4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6892      	ldr	r2, [r2, #8]
 8003ecc:	0211      	lsls	r1, r2, #8
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6952      	ldr	r2, [r2, #20]
 8003ed2:	0852      	lsrs	r2, r2, #1
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	0652      	lsls	r2, r2, #25
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	4916      	ldr	r1, [pc, #88]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003ee0:	4b14      	ldr	r3, [pc, #80]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eec:	f7fd f880 	bl	8000ff0 <HAL_GetTick>
 8003ef0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ef2:	e009      	b.n	8003f08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003ef4:	f7fd f87c 	bl	8000ff0 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d902      	bls.n	8003f08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	73fb      	strb	r3, [r7, #15]
          break;
 8003f06:	e005      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ef      	beq.n	8003ef4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	4904      	ldr	r1, [pc, #16]	; (8003f34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000

08003f38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f46:	4b6a      	ldr	r3, [pc, #424]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d018      	beq.n	8003f84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f52:	4b67      	ldr	r3, [pc, #412]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0203 	and.w	r2, r3, #3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d10d      	bne.n	8003f7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
       ||
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003f6a:	4b61      	ldr	r3, [pc, #388]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	1c5a      	adds	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
       ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d047      	beq.n	800400e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	73fb      	strb	r3, [r7, #15]
 8003f82:	e044      	b.n	800400e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d018      	beq.n	8003fbe <RCCEx_PLLSAI2_Config+0x86>
 8003f8c:	2b03      	cmp	r3, #3
 8003f8e:	d825      	bhi.n	8003fdc <RCCEx_PLLSAI2_Config+0xa4>
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d002      	beq.n	8003f9a <RCCEx_PLLSAI2_Config+0x62>
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d009      	beq.n	8003fac <RCCEx_PLLSAI2_Config+0x74>
 8003f98:	e020      	b.n	8003fdc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f9a:	4b55      	ldr	r3, [pc, #340]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d11d      	bne.n	8003fe2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003faa:	e01a      	b.n	8003fe2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fac:	4b50      	ldr	r3, [pc, #320]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d116      	bne.n	8003fe6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fbc:	e013      	b.n	8003fe6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fbe:	4b4c      	ldr	r3, [pc, #304]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fca:	4b49      	ldr	r3, [pc, #292]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fda:	e006      	b.n	8003fea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe0:	e004      	b.n	8003fec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003fea:	bf00      	nop
    }

    if(status == HAL_OK)
 8003fec:	7bfb      	ldrb	r3, [r7, #15]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	3b01      	subs	r3, #1
 8004004:	011b      	lsls	r3, r3, #4
 8004006:	430b      	orrs	r3, r1
 8004008:	4939      	ldr	r1, [pc, #228]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800400a:	4313      	orrs	r3, r2
 800400c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d167      	bne.n	80040e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004014:	4b36      	ldr	r3, [pc, #216]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a35      	ldr	r2, [pc, #212]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800401a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004020:	f7fc ffe6 	bl	8000ff0 <HAL_GetTick>
 8004024:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004026:	e009      	b.n	800403c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004028:	f7fc ffe2 	bl	8000ff0 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d902      	bls.n	800403c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	73fb      	strb	r3, [r7, #15]
        break;
 800403a:	e005      	b.n	8004048 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800403c:	4b2c      	ldr	r3, [pc, #176]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1ef      	bne.n	8004028 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d14a      	bne.n	80040e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d111      	bne.n	8004078 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004054:	4b26      	ldr	r3, [pc, #152]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800405c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6892      	ldr	r2, [r2, #8]
 8004064:	0211      	lsls	r1, r2, #8
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68d2      	ldr	r2, [r2, #12]
 800406a:	0912      	lsrs	r2, r2, #4
 800406c:	0452      	lsls	r2, r2, #17
 800406e:	430a      	orrs	r2, r1
 8004070:	491f      	ldr	r1, [pc, #124]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004072:	4313      	orrs	r3, r2
 8004074:	614b      	str	r3, [r1, #20]
 8004076:	e011      	b.n	800409c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004078:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6892      	ldr	r2, [r2, #8]
 8004088:	0211      	lsls	r1, r2, #8
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6912      	ldr	r2, [r2, #16]
 800408e:	0852      	lsrs	r2, r2, #1
 8004090:	3a01      	subs	r2, #1
 8004092:	0652      	lsls	r2, r2, #25
 8004094:	430a      	orrs	r2, r1
 8004096:	4916      	ldr	r1, [pc, #88]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004098:	4313      	orrs	r3, r2
 800409a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a13      	ldr	r2, [pc, #76]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fc ffa2 	bl	8000ff0 <HAL_GetTick>
 80040ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040ae:	e009      	b.n	80040c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040b0:	f7fc ff9e 	bl	8000ff0 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d902      	bls.n	80040c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	73fb      	strb	r3, [r7, #15]
          break;
 80040c2:	e005      	b.n	80040d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80040c4:	4b0a      	ldr	r3, [pc, #40]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0ef      	beq.n	80040b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d8:	695a      	ldr	r2, [r3, #20]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	4904      	ldr	r1, [pc, #16]	; (80040f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000

080040f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e095      	b.n	8004232 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	2b00      	cmp	r3, #0
 800410c:	d108      	bne.n	8004120 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004116:	d009      	beq.n	800412c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
 800411e:	e005      	b.n	800412c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7fc fd82 	bl	8000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004162:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800416c:	d902      	bls.n	8004174 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e002      	b.n	800417a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004178:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004182:	d007      	beq.n	8004194 <HAL_SPI_Init+0xa0>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800418c:	d002      	beq.n	8004194 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	ea42 0103 	orr.w	r1, r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	0c1b      	lsrs	r3, r3, #16
 80041f0:	f003 0204 	and.w	r2, r3, #4
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004210:	ea42 0103 	orr.w	r1, r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e040      	b.n	80042ce <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d106      	bne.n	8004262 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f7fc fd57 	bl	8000d10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2224      	movs	r2, #36	; 0x24
 8004266:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fb6b 	bl	800495c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f8b0 	bl	80043ec <UART_SetConfig>
 800428c:	4603      	mov	r3, r0
 800428e:	2b01      	cmp	r3, #1
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e01b      	b.n	80042ce <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f042 0201 	orr.w	r2, r2, #1
 80042c4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 fbea 	bl	8004aa0 <UART_CheckIdleState>
 80042cc:	4603      	mov	r3, r0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b08a      	sub	sp, #40	; 0x28
 80042da:	af02      	add	r7, sp, #8
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	60b9      	str	r1, [r7, #8]
 80042e0:	603b      	str	r3, [r7, #0]
 80042e2:	4613      	mov	r3, r2
 80042e4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d178      	bne.n	80043e0 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d002      	beq.n	80042fa <HAL_UART_Transmit+0x24>
 80042f4:	88fb      	ldrh	r3, [r7, #6]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e071      	b.n	80043e2 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2221      	movs	r2, #33	; 0x21
 800430a:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800430c:	f7fc fe70 	bl	8000ff0 <HAL_GetTick>
 8004310:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	88fa      	ldrh	r2, [r7, #6]
 800431e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432a:	d108      	bne.n	800433e <HAL_UART_Transmit+0x68>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d104      	bne.n	800433e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004334:	2300      	movs	r3, #0
 8004336:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	e003      	b.n	8004346 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004346:	e030      	b.n	80043aa <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2200      	movs	r2, #0
 8004350:	2180      	movs	r1, #128	; 0x80
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fc4c 	bl	8004bf0 <UART_WaitOnFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d004      	beq.n	8004368 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2220      	movs	r2, #32
 8004362:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e03c      	b.n	80043e2 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	881a      	ldrh	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800437a:	b292      	uxth	r2, r2
 800437c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	3302      	adds	r3, #2
 8004382:	61bb      	str	r3, [r7, #24]
 8004384:	e008      	b.n	8004398 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	781a      	ldrb	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	b292      	uxth	r2, r2
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	3301      	adds	r3, #1
 8004396:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800439e:	b29b      	uxth	r3, r3
 80043a0:	3b01      	subs	r3, #1
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1c8      	bne.n	8004348 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2200      	movs	r2, #0
 80043be:	2140      	movs	r1, #64	; 0x40
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 fc15 	bl	8004bf0 <UART_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d004      	beq.n	80043d6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e005      	b.n	80043e2 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	e000      	b.n	80043e2 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80043e0:	2302      	movs	r3, #2
  }
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
	...

080043ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f0:	b08a      	sub	sp, #40	; 0x28
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	431a      	orrs	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	431a      	orrs	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	4313      	orrs	r3, r2
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4ba4      	ldr	r3, [pc, #656]	; (80046ac <UART_SetConfig+0x2c0>)
 800441c:	4013      	ands	r3, r2
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004424:	430b      	orrs	r3, r1
 8004426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	68da      	ldr	r2, [r3, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a99      	ldr	r2, [pc, #612]	; (80046b0 <UART_SetConfig+0x2c4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d004      	beq.n	8004458 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004454:	4313      	orrs	r3, r2
 8004456:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004468:	430a      	orrs	r2, r1
 800446a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a90      	ldr	r2, [pc, #576]	; (80046b4 <UART_SetConfig+0x2c8>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d126      	bne.n	80044c4 <UART_SetConfig+0xd8>
 8004476:	4b90      	ldr	r3, [pc, #576]	; (80046b8 <UART_SetConfig+0x2cc>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447c:	f003 0303 	and.w	r3, r3, #3
 8004480:	2b03      	cmp	r3, #3
 8004482:	d81b      	bhi.n	80044bc <UART_SetConfig+0xd0>
 8004484:	a201      	add	r2, pc, #4	; (adr r2, 800448c <UART_SetConfig+0xa0>)
 8004486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448a:	bf00      	nop
 800448c:	0800449d 	.word	0x0800449d
 8004490:	080044ad 	.word	0x080044ad
 8004494:	080044a5 	.word	0x080044a5
 8004498:	080044b5 	.word	0x080044b5
 800449c:	2301      	movs	r3, #1
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044a2:	e116      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80044a4:	2302      	movs	r3, #2
 80044a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044aa:	e112      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80044ac:	2304      	movs	r3, #4
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b2:	e10e      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80044b4:	2308      	movs	r3, #8
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ba:	e10a      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80044bc:	2310      	movs	r3, #16
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c2:	e106      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a7c      	ldr	r2, [pc, #496]	; (80046bc <UART_SetConfig+0x2d0>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d138      	bne.n	8004540 <UART_SetConfig+0x154>
 80044ce:	4b7a      	ldr	r3, [pc, #488]	; (80046b8 <UART_SetConfig+0x2cc>)
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d82d      	bhi.n	8004538 <UART_SetConfig+0x14c>
 80044dc:	a201      	add	r2, pc, #4	; (adr r2, 80044e4 <UART_SetConfig+0xf8>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	08004519 	.word	0x08004519
 80044e8:	08004539 	.word	0x08004539
 80044ec:	08004539 	.word	0x08004539
 80044f0:	08004539 	.word	0x08004539
 80044f4:	08004529 	.word	0x08004529
 80044f8:	08004539 	.word	0x08004539
 80044fc:	08004539 	.word	0x08004539
 8004500:	08004539 	.word	0x08004539
 8004504:	08004521 	.word	0x08004521
 8004508:	08004539 	.word	0x08004539
 800450c:	08004539 	.word	0x08004539
 8004510:	08004539 	.word	0x08004539
 8004514:	08004531 	.word	0x08004531
 8004518:	2300      	movs	r3, #0
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800451e:	e0d8      	b.n	80046d2 <UART_SetConfig+0x2e6>
 8004520:	2302      	movs	r3, #2
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004526:	e0d4      	b.n	80046d2 <UART_SetConfig+0x2e6>
 8004528:	2304      	movs	r3, #4
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452e:	e0d0      	b.n	80046d2 <UART_SetConfig+0x2e6>
 8004530:	2308      	movs	r3, #8
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004536:	e0cc      	b.n	80046d2 <UART_SetConfig+0x2e6>
 8004538:	2310      	movs	r3, #16
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453e:	e0c8      	b.n	80046d2 <UART_SetConfig+0x2e6>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a5e      	ldr	r2, [pc, #376]	; (80046c0 <UART_SetConfig+0x2d4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d125      	bne.n	8004596 <UART_SetConfig+0x1aa>
 800454a:	4b5b      	ldr	r3, [pc, #364]	; (80046b8 <UART_SetConfig+0x2cc>)
 800454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004550:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004554:	2b30      	cmp	r3, #48	; 0x30
 8004556:	d016      	beq.n	8004586 <UART_SetConfig+0x19a>
 8004558:	2b30      	cmp	r3, #48	; 0x30
 800455a:	d818      	bhi.n	800458e <UART_SetConfig+0x1a2>
 800455c:	2b20      	cmp	r3, #32
 800455e:	d00a      	beq.n	8004576 <UART_SetConfig+0x18a>
 8004560:	2b20      	cmp	r3, #32
 8004562:	d814      	bhi.n	800458e <UART_SetConfig+0x1a2>
 8004564:	2b00      	cmp	r3, #0
 8004566:	d002      	beq.n	800456e <UART_SetConfig+0x182>
 8004568:	2b10      	cmp	r3, #16
 800456a:	d008      	beq.n	800457e <UART_SetConfig+0x192>
 800456c:	e00f      	b.n	800458e <UART_SetConfig+0x1a2>
 800456e:	2300      	movs	r3, #0
 8004570:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004574:	e0ad      	b.n	80046d2 <UART_SetConfig+0x2e6>
 8004576:	2302      	movs	r3, #2
 8004578:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800457c:	e0a9      	b.n	80046d2 <UART_SetConfig+0x2e6>
 800457e:	2304      	movs	r3, #4
 8004580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004584:	e0a5      	b.n	80046d2 <UART_SetConfig+0x2e6>
 8004586:	2308      	movs	r3, #8
 8004588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458c:	e0a1      	b.n	80046d2 <UART_SetConfig+0x2e6>
 800458e:	2310      	movs	r3, #16
 8004590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004594:	e09d      	b.n	80046d2 <UART_SetConfig+0x2e6>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a4a      	ldr	r2, [pc, #296]	; (80046c4 <UART_SetConfig+0x2d8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d125      	bne.n	80045ec <UART_SetConfig+0x200>
 80045a0:	4b45      	ldr	r3, [pc, #276]	; (80046b8 <UART_SetConfig+0x2cc>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045aa:	2bc0      	cmp	r3, #192	; 0xc0
 80045ac:	d016      	beq.n	80045dc <UART_SetConfig+0x1f0>
 80045ae:	2bc0      	cmp	r3, #192	; 0xc0
 80045b0:	d818      	bhi.n	80045e4 <UART_SetConfig+0x1f8>
 80045b2:	2b80      	cmp	r3, #128	; 0x80
 80045b4:	d00a      	beq.n	80045cc <UART_SetConfig+0x1e0>
 80045b6:	2b80      	cmp	r3, #128	; 0x80
 80045b8:	d814      	bhi.n	80045e4 <UART_SetConfig+0x1f8>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d002      	beq.n	80045c4 <UART_SetConfig+0x1d8>
 80045be:	2b40      	cmp	r3, #64	; 0x40
 80045c0:	d008      	beq.n	80045d4 <UART_SetConfig+0x1e8>
 80045c2:	e00f      	b.n	80045e4 <UART_SetConfig+0x1f8>
 80045c4:	2300      	movs	r3, #0
 80045c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ca:	e082      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80045cc:	2302      	movs	r3, #2
 80045ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045d2:	e07e      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80045d4:	2304      	movs	r3, #4
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045da:	e07a      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80045dc:	2308      	movs	r3, #8
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e2:	e076      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80045e4:	2310      	movs	r3, #16
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ea:	e072      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a35      	ldr	r2, [pc, #212]	; (80046c8 <UART_SetConfig+0x2dc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d12a      	bne.n	800464c <UART_SetConfig+0x260>
 80045f6:	4b30      	ldr	r3, [pc, #192]	; (80046b8 <UART_SetConfig+0x2cc>)
 80045f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004604:	d01a      	beq.n	800463c <UART_SetConfig+0x250>
 8004606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800460a:	d81b      	bhi.n	8004644 <UART_SetConfig+0x258>
 800460c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004610:	d00c      	beq.n	800462c <UART_SetConfig+0x240>
 8004612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004616:	d815      	bhi.n	8004644 <UART_SetConfig+0x258>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <UART_SetConfig+0x238>
 800461c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004620:	d008      	beq.n	8004634 <UART_SetConfig+0x248>
 8004622:	e00f      	b.n	8004644 <UART_SetConfig+0x258>
 8004624:	2300      	movs	r3, #0
 8004626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800462a:	e052      	b.n	80046d2 <UART_SetConfig+0x2e6>
 800462c:	2302      	movs	r3, #2
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004632:	e04e      	b.n	80046d2 <UART_SetConfig+0x2e6>
 8004634:	2304      	movs	r3, #4
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e04a      	b.n	80046d2 <UART_SetConfig+0x2e6>
 800463c:	2308      	movs	r3, #8
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e046      	b.n	80046d2 <UART_SetConfig+0x2e6>
 8004644:	2310      	movs	r3, #16
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e042      	b.n	80046d2 <UART_SetConfig+0x2e6>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a17      	ldr	r2, [pc, #92]	; (80046b0 <UART_SetConfig+0x2c4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d13a      	bne.n	80046cc <UART_SetConfig+0x2e0>
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <UART_SetConfig+0x2cc>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800465c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004660:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004664:	d01a      	beq.n	800469c <UART_SetConfig+0x2b0>
 8004666:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800466a:	d81b      	bhi.n	80046a4 <UART_SetConfig+0x2b8>
 800466c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004670:	d00c      	beq.n	800468c <UART_SetConfig+0x2a0>
 8004672:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004676:	d815      	bhi.n	80046a4 <UART_SetConfig+0x2b8>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <UART_SetConfig+0x298>
 800467c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004680:	d008      	beq.n	8004694 <UART_SetConfig+0x2a8>
 8004682:	e00f      	b.n	80046a4 <UART_SetConfig+0x2b8>
 8004684:	2300      	movs	r3, #0
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468a:	e022      	b.n	80046d2 <UART_SetConfig+0x2e6>
 800468c:	2302      	movs	r3, #2
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004692:	e01e      	b.n	80046d2 <UART_SetConfig+0x2e6>
 8004694:	2304      	movs	r3, #4
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e01a      	b.n	80046d2 <UART_SetConfig+0x2e6>
 800469c:	2308      	movs	r3, #8
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e016      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80046a4:	2310      	movs	r3, #16
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	e012      	b.n	80046d2 <UART_SetConfig+0x2e6>
 80046ac:	efff69f3 	.word	0xefff69f3
 80046b0:	40008000 	.word	0x40008000
 80046b4:	40013800 	.word	0x40013800
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40004400 	.word	0x40004400
 80046c0:	40004800 	.word	0x40004800
 80046c4:	40004c00 	.word	0x40004c00
 80046c8:	40005000 	.word	0x40005000
 80046cc:	2310      	movs	r3, #16
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a9f      	ldr	r2, [pc, #636]	; (8004954 <UART_SetConfig+0x568>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d17a      	bne.n	80047d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046e0:	2b08      	cmp	r3, #8
 80046e2:	d824      	bhi.n	800472e <UART_SetConfig+0x342>
 80046e4:	a201      	add	r2, pc, #4	; (adr r2, 80046ec <UART_SetConfig+0x300>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	08004711 	.word	0x08004711
 80046f0:	0800472f 	.word	0x0800472f
 80046f4:	08004719 	.word	0x08004719
 80046f8:	0800472f 	.word	0x0800472f
 80046fc:	0800471f 	.word	0x0800471f
 8004700:	0800472f 	.word	0x0800472f
 8004704:	0800472f 	.word	0x0800472f
 8004708:	0800472f 	.word	0x0800472f
 800470c:	08004727 	.word	0x08004727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004710:	f7fe ffa8 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8004714:	61f8      	str	r0, [r7, #28]
        break;
 8004716:	e010      	b.n	800473a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004718:	4b8f      	ldr	r3, [pc, #572]	; (8004958 <UART_SetConfig+0x56c>)
 800471a:	61fb      	str	r3, [r7, #28]
        break;
 800471c:	e00d      	b.n	800473a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800471e:	f7fe ff09 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 8004722:	61f8      	str	r0, [r7, #28]
        break;
 8004724:	e009      	b.n	800473a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472a:	61fb      	str	r3, [r7, #28]
        break;
 800472c:	e005      	b.n	800473a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004738:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80fb 	beq.w	8004938 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685a      	ldr	r2, [r3, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	4413      	add	r3, r2
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	429a      	cmp	r2, r3
 8004750:	d305      	bcc.n	800475e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004758:	69fa      	ldr	r2, [r7, #28]
 800475a:	429a      	cmp	r2, r3
 800475c:	d903      	bls.n	8004766 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004764:	e0e8      	b.n	8004938 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	2200      	movs	r2, #0
 800476a:	461c      	mov	r4, r3
 800476c:	4615      	mov	r5, r2
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	022b      	lsls	r3, r5, #8
 8004778:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800477c:	0222      	lsls	r2, r4, #8
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	6849      	ldr	r1, [r1, #4]
 8004782:	0849      	lsrs	r1, r1, #1
 8004784:	2000      	movs	r0, #0
 8004786:	4688      	mov	r8, r1
 8004788:	4681      	mov	r9, r0
 800478a:	eb12 0a08 	adds.w	sl, r2, r8
 800478e:	eb43 0b09 	adc.w	fp, r3, r9
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	603b      	str	r3, [r7, #0]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047a0:	4650      	mov	r0, sl
 80047a2:	4659      	mov	r1, fp
 80047a4:	f7fb fd6c 	bl	8000280 <__aeabi_uldivmod>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4613      	mov	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047b6:	d308      	bcc.n	80047ca <UART_SetConfig+0x3de>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047be:	d204      	bcs.n	80047ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	60da      	str	r2, [r3, #12]
 80047c8:	e0b6      	b.n	8004938 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047d0:	e0b2      	b.n	8004938 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047da:	d15e      	bne.n	800489a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d828      	bhi.n	8004836 <UART_SetConfig+0x44a>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <UART_SetConfig+0x400>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004811 	.word	0x08004811
 80047f0:	08004819 	.word	0x08004819
 80047f4:	08004821 	.word	0x08004821
 80047f8:	08004837 	.word	0x08004837
 80047fc:	08004827 	.word	0x08004827
 8004800:	08004837 	.word	0x08004837
 8004804:	08004837 	.word	0x08004837
 8004808:	08004837 	.word	0x08004837
 800480c:	0800482f 	.word	0x0800482f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004810:	f7fe ff28 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 8004814:	61f8      	str	r0, [r7, #28]
        break;
 8004816:	e014      	b.n	8004842 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004818:	f7fe ff3a 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 800481c:	61f8      	str	r0, [r7, #28]
        break;
 800481e:	e010      	b.n	8004842 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004820:	4b4d      	ldr	r3, [pc, #308]	; (8004958 <UART_SetConfig+0x56c>)
 8004822:	61fb      	str	r3, [r7, #28]
        break;
 8004824:	e00d      	b.n	8004842 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004826:	f7fe fe85 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 800482a:	61f8      	str	r0, [r7, #28]
        break;
 800482c:	e009      	b.n	8004842 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800482e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004832:	61fb      	str	r3, [r7, #28]
        break;
 8004834:	e005      	b.n	8004842 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004840:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d077      	beq.n	8004938 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	005a      	lsls	r2, r3, #1
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	441a      	add	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	fbb2 f3f3 	udiv	r3, r2, r3
 800485c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	2b0f      	cmp	r3, #15
 8004862:	d916      	bls.n	8004892 <UART_SetConfig+0x4a6>
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800486a:	d212      	bcs.n	8004892 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f023 030f 	bic.w	r3, r3, #15
 8004874:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	085b      	lsrs	r3, r3, #1
 800487a:	b29b      	uxth	r3, r3
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	b29a      	uxth	r2, r3
 8004882:	8afb      	ldrh	r3, [r7, #22]
 8004884:	4313      	orrs	r3, r2
 8004886:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	8afa      	ldrh	r2, [r7, #22]
 800488e:	60da      	str	r2, [r3, #12]
 8004890:	e052      	b.n	8004938 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004898:	e04e      	b.n	8004938 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800489a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d827      	bhi.n	80048f2 <UART_SetConfig+0x506>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <UART_SetConfig+0x4bc>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048cd 	.word	0x080048cd
 80048ac:	080048d5 	.word	0x080048d5
 80048b0:	080048dd 	.word	0x080048dd
 80048b4:	080048f3 	.word	0x080048f3
 80048b8:	080048e3 	.word	0x080048e3
 80048bc:	080048f3 	.word	0x080048f3
 80048c0:	080048f3 	.word	0x080048f3
 80048c4:	080048f3 	.word	0x080048f3
 80048c8:	080048eb 	.word	0x080048eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048cc:	f7fe feca 	bl	8003664 <HAL_RCC_GetPCLK1Freq>
 80048d0:	61f8      	str	r0, [r7, #28]
        break;
 80048d2:	e014      	b.n	80048fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d4:	f7fe fedc 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 80048d8:	61f8      	str	r0, [r7, #28]
        break;
 80048da:	e010      	b.n	80048fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048dc:	4b1e      	ldr	r3, [pc, #120]	; (8004958 <UART_SetConfig+0x56c>)
 80048de:	61fb      	str	r3, [r7, #28]
        break;
 80048e0:	e00d      	b.n	80048fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e2:	f7fe fe27 	bl	8003534 <HAL_RCC_GetSysClockFreq>
 80048e6:	61f8      	str	r0, [r7, #28]
        break;
 80048e8:	e009      	b.n	80048fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ee:	61fb      	str	r3, [r7, #28]
        break;
 80048f0:	e005      	b.n	80048fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80048fc:	bf00      	nop
    }

    if (pclk != 0U)
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d019      	beq.n	8004938 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	085a      	lsrs	r2, r3, #1
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	441a      	add	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	fbb2 f3f3 	udiv	r3, r2, r3
 8004916:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b0f      	cmp	r3, #15
 800491c:	d909      	bls.n	8004932 <UART_SetConfig+0x546>
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d205      	bcs.n	8004932 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60da      	str	r2, [r3, #12]
 8004930:	e002      	b.n	8004938 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004944:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004948:	4618      	mov	r0, r3
 800494a:	3728      	adds	r7, #40	; 0x28
 800494c:	46bd      	mov	sp, r7
 800494e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004952:	bf00      	nop
 8004954:	40008000 	.word	0x40008000
 8004958:	00f42400 	.word	0x00f42400

0800495c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	f003 0308 	and.w	r3, r3, #8
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01a      	beq.n	8004a72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a5a:	d10a      	bne.n	8004a72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	605a      	str	r2, [r3, #4]
  }
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b098      	sub	sp, #96	; 0x60
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ab0:	f7fc fa9e 	bl	8000ff0 <HAL_GetTick>
 8004ab4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d12e      	bne.n	8004b22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ac4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004acc:	2200      	movs	r2, #0
 8004ace:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f88c 	bl	8004bf0 <UART_WaitOnFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d021      	beq.n	8004b22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae6:	e853 3f00 	ldrex	r3, [r3]
 8004aea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af2:	653b      	str	r3, [r7, #80]	; 0x50
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004afc:	647b      	str	r3, [r7, #68]	; 0x44
 8004afe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b04:	e841 2300 	strex	r3, r2, [r1]
 8004b08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e6      	bne.n	8004ade <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2220      	movs	r2, #32
 8004b14:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e062      	b.n	8004be8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d149      	bne.n	8004bc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f856 	bl	8004bf0 <UART_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d03c      	beq.n	8004bc4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	623b      	str	r3, [r7, #32]
   return(result);
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b68:	633b      	str	r3, [r7, #48]	; 0x30
 8004b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e6      	bne.n	8004b4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3308      	adds	r3, #8
 8004b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3308      	adds	r3, #8
 8004b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b9c:	61fa      	str	r2, [r7, #28]
 8004b9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	69b9      	ldr	r1, [r7, #24]
 8004ba2:	69fa      	ldr	r2, [r7, #28]
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	617b      	str	r3, [r7, #20]
   return(result);
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e011      	b.n	8004be8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3758      	adds	r7, #88	; 0x58
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c00:	e049      	b.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c08:	d045      	beq.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0a:	f7fc f9f1 	bl	8000ff0 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e048      	b.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d031      	beq.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d110      	bne.n	8004c62 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2208      	movs	r2, #8
 8004c46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f838 	bl	8004cbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2208      	movs	r2, #8
 8004c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e029      	b.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	69db      	ldr	r3, [r3, #28]
 8004c68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c70:	d111      	bne.n	8004c96 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f81e 	bl	8004cbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e00f      	b.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	69da      	ldr	r2, [r3, #28]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	79fb      	ldrb	r3, [r7, #7]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d0a6      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b095      	sub	sp, #84	; 0x54
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	e853 3f00 	ldrex	r3, [r3]
 8004cd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ce6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cec:	e841 2300 	strex	r3, r2, [r1]
 8004cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1e6      	bne.n	8004cc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	3308      	adds	r3, #8
 8004cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	e853 3f00 	ldrex	r3, [r3]
 8004d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f023 0301 	bic.w	r3, r3, #1
 8004d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	3308      	adds	r3, #8
 8004d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d20:	e841 2300 	strex	r3, r2, [r1]
 8004d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1e5      	bne.n	8004cf8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d118      	bne.n	8004d66 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f023 0310 	bic.w	r3, r3, #16
 8004d48:	647b      	str	r3, [r7, #68]	; 0x44
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6979      	ldr	r1, [r7, #20]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e6      	bne.n	8004d34 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d7a:	bf00      	nop
 8004d7c:	3754      	adds	r7, #84	; 0x54
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <siprintf>:
 8004d88:	b40e      	push	{r1, r2, r3}
 8004d8a:	b500      	push	{lr}
 8004d8c:	b09c      	sub	sp, #112	; 0x70
 8004d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d90:	9002      	str	r0, [sp, #8]
 8004d92:	9006      	str	r0, [sp, #24]
 8004d94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d98:	4809      	ldr	r0, [pc, #36]	; (8004dc0 <siprintf+0x38>)
 8004d9a:	9107      	str	r1, [sp, #28]
 8004d9c:	9104      	str	r1, [sp, #16]
 8004d9e:	4909      	ldr	r1, [pc, #36]	; (8004dc4 <siprintf+0x3c>)
 8004da0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004da4:	9105      	str	r1, [sp, #20]
 8004da6:	6800      	ldr	r0, [r0, #0]
 8004da8:	9301      	str	r3, [sp, #4]
 8004daa:	a902      	add	r1, sp, #8
 8004dac:	f000 f992 	bl	80050d4 <_svfiprintf_r>
 8004db0:	9b02      	ldr	r3, [sp, #8]
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
 8004db6:	b01c      	add	sp, #112	; 0x70
 8004db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dbc:	b003      	add	sp, #12
 8004dbe:	4770      	bx	lr
 8004dc0:	20000058 	.word	0x20000058
 8004dc4:	ffff0208 	.word	0xffff0208

08004dc8 <memset>:
 8004dc8:	4402      	add	r2, r0
 8004dca:	4603      	mov	r3, r0
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d100      	bne.n	8004dd2 <memset+0xa>
 8004dd0:	4770      	bx	lr
 8004dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8004dd6:	e7f9      	b.n	8004dcc <memset+0x4>

08004dd8 <__errno>:
 8004dd8:	4b01      	ldr	r3, [pc, #4]	; (8004de0 <__errno+0x8>)
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	20000058 	.word	0x20000058

08004de4 <__libc_init_array>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	4d0d      	ldr	r5, [pc, #52]	; (8004e1c <__libc_init_array+0x38>)
 8004de8:	4c0d      	ldr	r4, [pc, #52]	; (8004e20 <__libc_init_array+0x3c>)
 8004dea:	1b64      	subs	r4, r4, r5
 8004dec:	10a4      	asrs	r4, r4, #2
 8004dee:	2600      	movs	r6, #0
 8004df0:	42a6      	cmp	r6, r4
 8004df2:	d109      	bne.n	8004e08 <__libc_init_array+0x24>
 8004df4:	4d0b      	ldr	r5, [pc, #44]	; (8004e24 <__libc_init_array+0x40>)
 8004df6:	4c0c      	ldr	r4, [pc, #48]	; (8004e28 <__libc_init_array+0x44>)
 8004df8:	f000 fc6a 	bl	80056d0 <_init>
 8004dfc:	1b64      	subs	r4, r4, r5
 8004dfe:	10a4      	asrs	r4, r4, #2
 8004e00:	2600      	movs	r6, #0
 8004e02:	42a6      	cmp	r6, r4
 8004e04:	d105      	bne.n	8004e12 <__libc_init_array+0x2e>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0c:	4798      	blx	r3
 8004e0e:	3601      	adds	r6, #1
 8004e10:	e7ee      	b.n	8004df0 <__libc_init_array+0xc>
 8004e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e16:	4798      	blx	r3
 8004e18:	3601      	adds	r6, #1
 8004e1a:	e7f2      	b.n	8004e02 <__libc_init_array+0x1e>
 8004e1c:	080057a4 	.word	0x080057a4
 8004e20:	080057a4 	.word	0x080057a4
 8004e24:	080057a4 	.word	0x080057a4
 8004e28:	080057a8 	.word	0x080057a8

08004e2c <__retarget_lock_acquire_recursive>:
 8004e2c:	4770      	bx	lr

08004e2e <__retarget_lock_release_recursive>:
 8004e2e:	4770      	bx	lr

08004e30 <_free_r>:
 8004e30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e32:	2900      	cmp	r1, #0
 8004e34:	d044      	beq.n	8004ec0 <_free_r+0x90>
 8004e36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e3a:	9001      	str	r0, [sp, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e42:	bfb8      	it	lt
 8004e44:	18e4      	addlt	r4, r4, r3
 8004e46:	f000 f8df 	bl	8005008 <__malloc_lock>
 8004e4a:	4a1e      	ldr	r2, [pc, #120]	; (8004ec4 <_free_r+0x94>)
 8004e4c:	9801      	ldr	r0, [sp, #4]
 8004e4e:	6813      	ldr	r3, [r2, #0]
 8004e50:	b933      	cbnz	r3, 8004e60 <_free_r+0x30>
 8004e52:	6063      	str	r3, [r4, #4]
 8004e54:	6014      	str	r4, [r2, #0]
 8004e56:	b003      	add	sp, #12
 8004e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e5c:	f000 b8da 	b.w	8005014 <__malloc_unlock>
 8004e60:	42a3      	cmp	r3, r4
 8004e62:	d908      	bls.n	8004e76 <_free_r+0x46>
 8004e64:	6825      	ldr	r5, [r4, #0]
 8004e66:	1961      	adds	r1, r4, r5
 8004e68:	428b      	cmp	r3, r1
 8004e6a:	bf01      	itttt	eq
 8004e6c:	6819      	ldreq	r1, [r3, #0]
 8004e6e:	685b      	ldreq	r3, [r3, #4]
 8004e70:	1949      	addeq	r1, r1, r5
 8004e72:	6021      	streq	r1, [r4, #0]
 8004e74:	e7ed      	b.n	8004e52 <_free_r+0x22>
 8004e76:	461a      	mov	r2, r3
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	b10b      	cbz	r3, 8004e80 <_free_r+0x50>
 8004e7c:	42a3      	cmp	r3, r4
 8004e7e:	d9fa      	bls.n	8004e76 <_free_r+0x46>
 8004e80:	6811      	ldr	r1, [r2, #0]
 8004e82:	1855      	adds	r5, r2, r1
 8004e84:	42a5      	cmp	r5, r4
 8004e86:	d10b      	bne.n	8004ea0 <_free_r+0x70>
 8004e88:	6824      	ldr	r4, [r4, #0]
 8004e8a:	4421      	add	r1, r4
 8004e8c:	1854      	adds	r4, r2, r1
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	6011      	str	r1, [r2, #0]
 8004e92:	d1e0      	bne.n	8004e56 <_free_r+0x26>
 8004e94:	681c      	ldr	r4, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	6053      	str	r3, [r2, #4]
 8004e9a:	440c      	add	r4, r1
 8004e9c:	6014      	str	r4, [r2, #0]
 8004e9e:	e7da      	b.n	8004e56 <_free_r+0x26>
 8004ea0:	d902      	bls.n	8004ea8 <_free_r+0x78>
 8004ea2:	230c      	movs	r3, #12
 8004ea4:	6003      	str	r3, [r0, #0]
 8004ea6:	e7d6      	b.n	8004e56 <_free_r+0x26>
 8004ea8:	6825      	ldr	r5, [r4, #0]
 8004eaa:	1961      	adds	r1, r4, r5
 8004eac:	428b      	cmp	r3, r1
 8004eae:	bf04      	itt	eq
 8004eb0:	6819      	ldreq	r1, [r3, #0]
 8004eb2:	685b      	ldreq	r3, [r3, #4]
 8004eb4:	6063      	str	r3, [r4, #4]
 8004eb6:	bf04      	itt	eq
 8004eb8:	1949      	addeq	r1, r1, r5
 8004eba:	6021      	streq	r1, [r4, #0]
 8004ebc:	6054      	str	r4, [r2, #4]
 8004ebe:	e7ca      	b.n	8004e56 <_free_r+0x26>
 8004ec0:	b003      	add	sp, #12
 8004ec2:	bd30      	pop	{r4, r5, pc}
 8004ec4:	2000037c 	.word	0x2000037c

08004ec8 <sbrk_aligned>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	4e0e      	ldr	r6, [pc, #56]	; (8004f04 <sbrk_aligned+0x3c>)
 8004ecc:	460c      	mov	r4, r1
 8004ece:	6831      	ldr	r1, [r6, #0]
 8004ed0:	4605      	mov	r5, r0
 8004ed2:	b911      	cbnz	r1, 8004eda <sbrk_aligned+0x12>
 8004ed4:	f000 fba6 	bl	8005624 <_sbrk_r>
 8004ed8:	6030      	str	r0, [r6, #0]
 8004eda:	4621      	mov	r1, r4
 8004edc:	4628      	mov	r0, r5
 8004ede:	f000 fba1 	bl	8005624 <_sbrk_r>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	d00a      	beq.n	8004efc <sbrk_aligned+0x34>
 8004ee6:	1cc4      	adds	r4, r0, #3
 8004ee8:	f024 0403 	bic.w	r4, r4, #3
 8004eec:	42a0      	cmp	r0, r4
 8004eee:	d007      	beq.n	8004f00 <sbrk_aligned+0x38>
 8004ef0:	1a21      	subs	r1, r4, r0
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	f000 fb96 	bl	8005624 <_sbrk_r>
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d101      	bne.n	8004f00 <sbrk_aligned+0x38>
 8004efc:	f04f 34ff 	mov.w	r4, #4294967295
 8004f00:	4620      	mov	r0, r4
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	20000380 	.word	0x20000380

08004f08 <_malloc_r>:
 8004f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f0c:	1ccd      	adds	r5, r1, #3
 8004f0e:	f025 0503 	bic.w	r5, r5, #3
 8004f12:	3508      	adds	r5, #8
 8004f14:	2d0c      	cmp	r5, #12
 8004f16:	bf38      	it	cc
 8004f18:	250c      	movcc	r5, #12
 8004f1a:	2d00      	cmp	r5, #0
 8004f1c:	4607      	mov	r7, r0
 8004f1e:	db01      	blt.n	8004f24 <_malloc_r+0x1c>
 8004f20:	42a9      	cmp	r1, r5
 8004f22:	d905      	bls.n	8004f30 <_malloc_r+0x28>
 8004f24:	230c      	movs	r3, #12
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	2600      	movs	r6, #0
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005004 <_malloc_r+0xfc>
 8004f34:	f000 f868 	bl	8005008 <__malloc_lock>
 8004f38:	f8d8 3000 	ldr.w	r3, [r8]
 8004f3c:	461c      	mov	r4, r3
 8004f3e:	bb5c      	cbnz	r4, 8004f98 <_malloc_r+0x90>
 8004f40:	4629      	mov	r1, r5
 8004f42:	4638      	mov	r0, r7
 8004f44:	f7ff ffc0 	bl	8004ec8 <sbrk_aligned>
 8004f48:	1c43      	adds	r3, r0, #1
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	d155      	bne.n	8004ffa <_malloc_r+0xf2>
 8004f4e:	f8d8 4000 	ldr.w	r4, [r8]
 8004f52:	4626      	mov	r6, r4
 8004f54:	2e00      	cmp	r6, #0
 8004f56:	d145      	bne.n	8004fe4 <_malloc_r+0xdc>
 8004f58:	2c00      	cmp	r4, #0
 8004f5a:	d048      	beq.n	8004fee <_malloc_r+0xe6>
 8004f5c:	6823      	ldr	r3, [r4, #0]
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4638      	mov	r0, r7
 8004f62:	eb04 0903 	add.w	r9, r4, r3
 8004f66:	f000 fb5d 	bl	8005624 <_sbrk_r>
 8004f6a:	4581      	cmp	r9, r0
 8004f6c:	d13f      	bne.n	8004fee <_malloc_r+0xe6>
 8004f6e:	6821      	ldr	r1, [r4, #0]
 8004f70:	1a6d      	subs	r5, r5, r1
 8004f72:	4629      	mov	r1, r5
 8004f74:	4638      	mov	r0, r7
 8004f76:	f7ff ffa7 	bl	8004ec8 <sbrk_aligned>
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	d037      	beq.n	8004fee <_malloc_r+0xe6>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	442b      	add	r3, r5
 8004f82:	6023      	str	r3, [r4, #0]
 8004f84:	f8d8 3000 	ldr.w	r3, [r8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d038      	beq.n	8004ffe <_malloc_r+0xf6>
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	42a2      	cmp	r2, r4
 8004f90:	d12b      	bne.n	8004fea <_malloc_r+0xe2>
 8004f92:	2200      	movs	r2, #0
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	e00f      	b.n	8004fb8 <_malloc_r+0xb0>
 8004f98:	6822      	ldr	r2, [r4, #0]
 8004f9a:	1b52      	subs	r2, r2, r5
 8004f9c:	d41f      	bmi.n	8004fde <_malloc_r+0xd6>
 8004f9e:	2a0b      	cmp	r2, #11
 8004fa0:	d917      	bls.n	8004fd2 <_malloc_r+0xca>
 8004fa2:	1961      	adds	r1, r4, r5
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	6025      	str	r5, [r4, #0]
 8004fa8:	bf18      	it	ne
 8004faa:	6059      	strne	r1, [r3, #4]
 8004fac:	6863      	ldr	r3, [r4, #4]
 8004fae:	bf08      	it	eq
 8004fb0:	f8c8 1000 	streq.w	r1, [r8]
 8004fb4:	5162      	str	r2, [r4, r5]
 8004fb6:	604b      	str	r3, [r1, #4]
 8004fb8:	4638      	mov	r0, r7
 8004fba:	f104 060b 	add.w	r6, r4, #11
 8004fbe:	f000 f829 	bl	8005014 <__malloc_unlock>
 8004fc2:	f026 0607 	bic.w	r6, r6, #7
 8004fc6:	1d23      	adds	r3, r4, #4
 8004fc8:	1af2      	subs	r2, r6, r3
 8004fca:	d0ae      	beq.n	8004f2a <_malloc_r+0x22>
 8004fcc:	1b9b      	subs	r3, r3, r6
 8004fce:	50a3      	str	r3, [r4, r2]
 8004fd0:	e7ab      	b.n	8004f2a <_malloc_r+0x22>
 8004fd2:	42a3      	cmp	r3, r4
 8004fd4:	6862      	ldr	r2, [r4, #4]
 8004fd6:	d1dd      	bne.n	8004f94 <_malloc_r+0x8c>
 8004fd8:	f8c8 2000 	str.w	r2, [r8]
 8004fdc:	e7ec      	b.n	8004fb8 <_malloc_r+0xb0>
 8004fde:	4623      	mov	r3, r4
 8004fe0:	6864      	ldr	r4, [r4, #4]
 8004fe2:	e7ac      	b.n	8004f3e <_malloc_r+0x36>
 8004fe4:	4634      	mov	r4, r6
 8004fe6:	6876      	ldr	r6, [r6, #4]
 8004fe8:	e7b4      	b.n	8004f54 <_malloc_r+0x4c>
 8004fea:	4613      	mov	r3, r2
 8004fec:	e7cc      	b.n	8004f88 <_malloc_r+0x80>
 8004fee:	230c      	movs	r3, #12
 8004ff0:	603b      	str	r3, [r7, #0]
 8004ff2:	4638      	mov	r0, r7
 8004ff4:	f000 f80e 	bl	8005014 <__malloc_unlock>
 8004ff8:	e797      	b.n	8004f2a <_malloc_r+0x22>
 8004ffa:	6025      	str	r5, [r4, #0]
 8004ffc:	e7dc      	b.n	8004fb8 <_malloc_r+0xb0>
 8004ffe:	605b      	str	r3, [r3, #4]
 8005000:	deff      	udf	#255	; 0xff
 8005002:	bf00      	nop
 8005004:	2000037c 	.word	0x2000037c

08005008 <__malloc_lock>:
 8005008:	4801      	ldr	r0, [pc, #4]	; (8005010 <__malloc_lock+0x8>)
 800500a:	f7ff bf0f 	b.w	8004e2c <__retarget_lock_acquire_recursive>
 800500e:	bf00      	nop
 8005010:	20000378 	.word	0x20000378

08005014 <__malloc_unlock>:
 8005014:	4801      	ldr	r0, [pc, #4]	; (800501c <__malloc_unlock+0x8>)
 8005016:	f7ff bf0a 	b.w	8004e2e <__retarget_lock_release_recursive>
 800501a:	bf00      	nop
 800501c:	20000378 	.word	0x20000378

08005020 <__ssputs_r>:
 8005020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005024:	688e      	ldr	r6, [r1, #8]
 8005026:	461f      	mov	r7, r3
 8005028:	42be      	cmp	r6, r7
 800502a:	680b      	ldr	r3, [r1, #0]
 800502c:	4682      	mov	sl, r0
 800502e:	460c      	mov	r4, r1
 8005030:	4690      	mov	r8, r2
 8005032:	d82c      	bhi.n	800508e <__ssputs_r+0x6e>
 8005034:	898a      	ldrh	r2, [r1, #12]
 8005036:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800503a:	d026      	beq.n	800508a <__ssputs_r+0x6a>
 800503c:	6965      	ldr	r5, [r4, #20]
 800503e:	6909      	ldr	r1, [r1, #16]
 8005040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005044:	eba3 0901 	sub.w	r9, r3, r1
 8005048:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800504c:	1c7b      	adds	r3, r7, #1
 800504e:	444b      	add	r3, r9
 8005050:	106d      	asrs	r5, r5, #1
 8005052:	429d      	cmp	r5, r3
 8005054:	bf38      	it	cc
 8005056:	461d      	movcc	r5, r3
 8005058:	0553      	lsls	r3, r2, #21
 800505a:	d527      	bpl.n	80050ac <__ssputs_r+0x8c>
 800505c:	4629      	mov	r1, r5
 800505e:	f7ff ff53 	bl	8004f08 <_malloc_r>
 8005062:	4606      	mov	r6, r0
 8005064:	b360      	cbz	r0, 80050c0 <__ssputs_r+0xa0>
 8005066:	6921      	ldr	r1, [r4, #16]
 8005068:	464a      	mov	r2, r9
 800506a:	f000 faeb 	bl	8005644 <memcpy>
 800506e:	89a3      	ldrh	r3, [r4, #12]
 8005070:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005078:	81a3      	strh	r3, [r4, #12]
 800507a:	6126      	str	r6, [r4, #16]
 800507c:	6165      	str	r5, [r4, #20]
 800507e:	444e      	add	r6, r9
 8005080:	eba5 0509 	sub.w	r5, r5, r9
 8005084:	6026      	str	r6, [r4, #0]
 8005086:	60a5      	str	r5, [r4, #8]
 8005088:	463e      	mov	r6, r7
 800508a:	42be      	cmp	r6, r7
 800508c:	d900      	bls.n	8005090 <__ssputs_r+0x70>
 800508e:	463e      	mov	r6, r7
 8005090:	6820      	ldr	r0, [r4, #0]
 8005092:	4632      	mov	r2, r6
 8005094:	4641      	mov	r1, r8
 8005096:	f000 faab 	bl	80055f0 <memmove>
 800509a:	68a3      	ldr	r3, [r4, #8]
 800509c:	1b9b      	subs	r3, r3, r6
 800509e:	60a3      	str	r3, [r4, #8]
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	4433      	add	r3, r6
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	2000      	movs	r0, #0
 80050a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ac:	462a      	mov	r2, r5
 80050ae:	f000 fad7 	bl	8005660 <_realloc_r>
 80050b2:	4606      	mov	r6, r0
 80050b4:	2800      	cmp	r0, #0
 80050b6:	d1e0      	bne.n	800507a <__ssputs_r+0x5a>
 80050b8:	6921      	ldr	r1, [r4, #16]
 80050ba:	4650      	mov	r0, sl
 80050bc:	f7ff feb8 	bl	8004e30 <_free_r>
 80050c0:	230c      	movs	r3, #12
 80050c2:	f8ca 3000 	str.w	r3, [sl]
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050cc:	81a3      	strh	r3, [r4, #12]
 80050ce:	f04f 30ff 	mov.w	r0, #4294967295
 80050d2:	e7e9      	b.n	80050a8 <__ssputs_r+0x88>

080050d4 <_svfiprintf_r>:
 80050d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d8:	4698      	mov	r8, r3
 80050da:	898b      	ldrh	r3, [r1, #12]
 80050dc:	061b      	lsls	r3, r3, #24
 80050de:	b09d      	sub	sp, #116	; 0x74
 80050e0:	4607      	mov	r7, r0
 80050e2:	460d      	mov	r5, r1
 80050e4:	4614      	mov	r4, r2
 80050e6:	d50e      	bpl.n	8005106 <_svfiprintf_r+0x32>
 80050e8:	690b      	ldr	r3, [r1, #16]
 80050ea:	b963      	cbnz	r3, 8005106 <_svfiprintf_r+0x32>
 80050ec:	2140      	movs	r1, #64	; 0x40
 80050ee:	f7ff ff0b 	bl	8004f08 <_malloc_r>
 80050f2:	6028      	str	r0, [r5, #0]
 80050f4:	6128      	str	r0, [r5, #16]
 80050f6:	b920      	cbnz	r0, 8005102 <_svfiprintf_r+0x2e>
 80050f8:	230c      	movs	r3, #12
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	e0d0      	b.n	80052a4 <_svfiprintf_r+0x1d0>
 8005102:	2340      	movs	r3, #64	; 0x40
 8005104:	616b      	str	r3, [r5, #20]
 8005106:	2300      	movs	r3, #0
 8005108:	9309      	str	r3, [sp, #36]	; 0x24
 800510a:	2320      	movs	r3, #32
 800510c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005110:	f8cd 800c 	str.w	r8, [sp, #12]
 8005114:	2330      	movs	r3, #48	; 0x30
 8005116:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052bc <_svfiprintf_r+0x1e8>
 800511a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800511e:	f04f 0901 	mov.w	r9, #1
 8005122:	4623      	mov	r3, r4
 8005124:	469a      	mov	sl, r3
 8005126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800512a:	b10a      	cbz	r2, 8005130 <_svfiprintf_r+0x5c>
 800512c:	2a25      	cmp	r2, #37	; 0x25
 800512e:	d1f9      	bne.n	8005124 <_svfiprintf_r+0x50>
 8005130:	ebba 0b04 	subs.w	fp, sl, r4
 8005134:	d00b      	beq.n	800514e <_svfiprintf_r+0x7a>
 8005136:	465b      	mov	r3, fp
 8005138:	4622      	mov	r2, r4
 800513a:	4629      	mov	r1, r5
 800513c:	4638      	mov	r0, r7
 800513e:	f7ff ff6f 	bl	8005020 <__ssputs_r>
 8005142:	3001      	adds	r0, #1
 8005144:	f000 80a9 	beq.w	800529a <_svfiprintf_r+0x1c6>
 8005148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800514a:	445a      	add	r2, fp
 800514c:	9209      	str	r2, [sp, #36]	; 0x24
 800514e:	f89a 3000 	ldrb.w	r3, [sl]
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 80a1 	beq.w	800529a <_svfiprintf_r+0x1c6>
 8005158:	2300      	movs	r3, #0
 800515a:	f04f 32ff 	mov.w	r2, #4294967295
 800515e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005162:	f10a 0a01 	add.w	sl, sl, #1
 8005166:	9304      	str	r3, [sp, #16]
 8005168:	9307      	str	r3, [sp, #28]
 800516a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800516e:	931a      	str	r3, [sp, #104]	; 0x68
 8005170:	4654      	mov	r4, sl
 8005172:	2205      	movs	r2, #5
 8005174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005178:	4850      	ldr	r0, [pc, #320]	; (80052bc <_svfiprintf_r+0x1e8>)
 800517a:	f7fb f831 	bl	80001e0 <memchr>
 800517e:	9a04      	ldr	r2, [sp, #16]
 8005180:	b9d8      	cbnz	r0, 80051ba <_svfiprintf_r+0xe6>
 8005182:	06d0      	lsls	r0, r2, #27
 8005184:	bf44      	itt	mi
 8005186:	2320      	movmi	r3, #32
 8005188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800518c:	0711      	lsls	r1, r2, #28
 800518e:	bf44      	itt	mi
 8005190:	232b      	movmi	r3, #43	; 0x2b
 8005192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005196:	f89a 3000 	ldrb.w	r3, [sl]
 800519a:	2b2a      	cmp	r3, #42	; 0x2a
 800519c:	d015      	beq.n	80051ca <_svfiprintf_r+0xf6>
 800519e:	9a07      	ldr	r2, [sp, #28]
 80051a0:	4654      	mov	r4, sl
 80051a2:	2000      	movs	r0, #0
 80051a4:	f04f 0c0a 	mov.w	ip, #10
 80051a8:	4621      	mov	r1, r4
 80051aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ae:	3b30      	subs	r3, #48	; 0x30
 80051b0:	2b09      	cmp	r3, #9
 80051b2:	d94d      	bls.n	8005250 <_svfiprintf_r+0x17c>
 80051b4:	b1b0      	cbz	r0, 80051e4 <_svfiprintf_r+0x110>
 80051b6:	9207      	str	r2, [sp, #28]
 80051b8:	e014      	b.n	80051e4 <_svfiprintf_r+0x110>
 80051ba:	eba0 0308 	sub.w	r3, r0, r8
 80051be:	fa09 f303 	lsl.w	r3, r9, r3
 80051c2:	4313      	orrs	r3, r2
 80051c4:	9304      	str	r3, [sp, #16]
 80051c6:	46a2      	mov	sl, r4
 80051c8:	e7d2      	b.n	8005170 <_svfiprintf_r+0x9c>
 80051ca:	9b03      	ldr	r3, [sp, #12]
 80051cc:	1d19      	adds	r1, r3, #4
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	9103      	str	r1, [sp, #12]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bfbb      	ittet	lt
 80051d6:	425b      	neglt	r3, r3
 80051d8:	f042 0202 	orrlt.w	r2, r2, #2
 80051dc:	9307      	strge	r3, [sp, #28]
 80051de:	9307      	strlt	r3, [sp, #28]
 80051e0:	bfb8      	it	lt
 80051e2:	9204      	strlt	r2, [sp, #16]
 80051e4:	7823      	ldrb	r3, [r4, #0]
 80051e6:	2b2e      	cmp	r3, #46	; 0x2e
 80051e8:	d10c      	bne.n	8005204 <_svfiprintf_r+0x130>
 80051ea:	7863      	ldrb	r3, [r4, #1]
 80051ec:	2b2a      	cmp	r3, #42	; 0x2a
 80051ee:	d134      	bne.n	800525a <_svfiprintf_r+0x186>
 80051f0:	9b03      	ldr	r3, [sp, #12]
 80051f2:	1d1a      	adds	r2, r3, #4
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	9203      	str	r2, [sp, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	bfb8      	it	lt
 80051fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005200:	3402      	adds	r4, #2
 8005202:	9305      	str	r3, [sp, #20]
 8005204:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80052cc <_svfiprintf_r+0x1f8>
 8005208:	7821      	ldrb	r1, [r4, #0]
 800520a:	2203      	movs	r2, #3
 800520c:	4650      	mov	r0, sl
 800520e:	f7fa ffe7 	bl	80001e0 <memchr>
 8005212:	b138      	cbz	r0, 8005224 <_svfiprintf_r+0x150>
 8005214:	9b04      	ldr	r3, [sp, #16]
 8005216:	eba0 000a 	sub.w	r0, r0, sl
 800521a:	2240      	movs	r2, #64	; 0x40
 800521c:	4082      	lsls	r2, r0
 800521e:	4313      	orrs	r3, r2
 8005220:	3401      	adds	r4, #1
 8005222:	9304      	str	r3, [sp, #16]
 8005224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005228:	4825      	ldr	r0, [pc, #148]	; (80052c0 <_svfiprintf_r+0x1ec>)
 800522a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800522e:	2206      	movs	r2, #6
 8005230:	f7fa ffd6 	bl	80001e0 <memchr>
 8005234:	2800      	cmp	r0, #0
 8005236:	d038      	beq.n	80052aa <_svfiprintf_r+0x1d6>
 8005238:	4b22      	ldr	r3, [pc, #136]	; (80052c4 <_svfiprintf_r+0x1f0>)
 800523a:	bb1b      	cbnz	r3, 8005284 <_svfiprintf_r+0x1b0>
 800523c:	9b03      	ldr	r3, [sp, #12]
 800523e:	3307      	adds	r3, #7
 8005240:	f023 0307 	bic.w	r3, r3, #7
 8005244:	3308      	adds	r3, #8
 8005246:	9303      	str	r3, [sp, #12]
 8005248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524a:	4433      	add	r3, r6
 800524c:	9309      	str	r3, [sp, #36]	; 0x24
 800524e:	e768      	b.n	8005122 <_svfiprintf_r+0x4e>
 8005250:	fb0c 3202 	mla	r2, ip, r2, r3
 8005254:	460c      	mov	r4, r1
 8005256:	2001      	movs	r0, #1
 8005258:	e7a6      	b.n	80051a8 <_svfiprintf_r+0xd4>
 800525a:	2300      	movs	r3, #0
 800525c:	3401      	adds	r4, #1
 800525e:	9305      	str	r3, [sp, #20]
 8005260:	4619      	mov	r1, r3
 8005262:	f04f 0c0a 	mov.w	ip, #10
 8005266:	4620      	mov	r0, r4
 8005268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800526c:	3a30      	subs	r2, #48	; 0x30
 800526e:	2a09      	cmp	r2, #9
 8005270:	d903      	bls.n	800527a <_svfiprintf_r+0x1a6>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0c6      	beq.n	8005204 <_svfiprintf_r+0x130>
 8005276:	9105      	str	r1, [sp, #20]
 8005278:	e7c4      	b.n	8005204 <_svfiprintf_r+0x130>
 800527a:	fb0c 2101 	mla	r1, ip, r1, r2
 800527e:	4604      	mov	r4, r0
 8005280:	2301      	movs	r3, #1
 8005282:	e7f0      	b.n	8005266 <_svfiprintf_r+0x192>
 8005284:	ab03      	add	r3, sp, #12
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	462a      	mov	r2, r5
 800528a:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <_svfiprintf_r+0x1f4>)
 800528c:	a904      	add	r1, sp, #16
 800528e:	4638      	mov	r0, r7
 8005290:	f3af 8000 	nop.w
 8005294:	1c42      	adds	r2, r0, #1
 8005296:	4606      	mov	r6, r0
 8005298:	d1d6      	bne.n	8005248 <_svfiprintf_r+0x174>
 800529a:	89ab      	ldrh	r3, [r5, #12]
 800529c:	065b      	lsls	r3, r3, #25
 800529e:	f53f af2d 	bmi.w	80050fc <_svfiprintf_r+0x28>
 80052a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052a4:	b01d      	add	sp, #116	; 0x74
 80052a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052aa:	ab03      	add	r3, sp, #12
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	462a      	mov	r2, r5
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <_svfiprintf_r+0x1f4>)
 80052b2:	a904      	add	r1, sp, #16
 80052b4:	4638      	mov	r0, r7
 80052b6:	f000 f879 	bl	80053ac <_printf_i>
 80052ba:	e7eb      	b.n	8005294 <_svfiprintf_r+0x1c0>
 80052bc:	08005768 	.word	0x08005768
 80052c0:	08005772 	.word	0x08005772
 80052c4:	00000000 	.word	0x00000000
 80052c8:	08005021 	.word	0x08005021
 80052cc:	0800576e 	.word	0x0800576e

080052d0 <_printf_common>:
 80052d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052d4:	4616      	mov	r6, r2
 80052d6:	4699      	mov	r9, r3
 80052d8:	688a      	ldr	r2, [r1, #8]
 80052da:	690b      	ldr	r3, [r1, #16]
 80052dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052e0:	4293      	cmp	r3, r2
 80052e2:	bfb8      	it	lt
 80052e4:	4613      	movlt	r3, r2
 80052e6:	6033      	str	r3, [r6, #0]
 80052e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052ec:	4607      	mov	r7, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	b10a      	cbz	r2, 80052f6 <_printf_common+0x26>
 80052f2:	3301      	adds	r3, #1
 80052f4:	6033      	str	r3, [r6, #0]
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	0699      	lsls	r1, r3, #26
 80052fa:	bf42      	ittt	mi
 80052fc:	6833      	ldrmi	r3, [r6, #0]
 80052fe:	3302      	addmi	r3, #2
 8005300:	6033      	strmi	r3, [r6, #0]
 8005302:	6825      	ldr	r5, [r4, #0]
 8005304:	f015 0506 	ands.w	r5, r5, #6
 8005308:	d106      	bne.n	8005318 <_printf_common+0x48>
 800530a:	f104 0a19 	add.w	sl, r4, #25
 800530e:	68e3      	ldr	r3, [r4, #12]
 8005310:	6832      	ldr	r2, [r6, #0]
 8005312:	1a9b      	subs	r3, r3, r2
 8005314:	42ab      	cmp	r3, r5
 8005316:	dc26      	bgt.n	8005366 <_printf_common+0x96>
 8005318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800531c:	1e13      	subs	r3, r2, #0
 800531e:	6822      	ldr	r2, [r4, #0]
 8005320:	bf18      	it	ne
 8005322:	2301      	movne	r3, #1
 8005324:	0692      	lsls	r2, r2, #26
 8005326:	d42b      	bmi.n	8005380 <_printf_common+0xb0>
 8005328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800532c:	4649      	mov	r1, r9
 800532e:	4638      	mov	r0, r7
 8005330:	47c0      	blx	r8
 8005332:	3001      	adds	r0, #1
 8005334:	d01e      	beq.n	8005374 <_printf_common+0xa4>
 8005336:	6823      	ldr	r3, [r4, #0]
 8005338:	6922      	ldr	r2, [r4, #16]
 800533a:	f003 0306 	and.w	r3, r3, #6
 800533e:	2b04      	cmp	r3, #4
 8005340:	bf02      	ittt	eq
 8005342:	68e5      	ldreq	r5, [r4, #12]
 8005344:	6833      	ldreq	r3, [r6, #0]
 8005346:	1aed      	subeq	r5, r5, r3
 8005348:	68a3      	ldr	r3, [r4, #8]
 800534a:	bf0c      	ite	eq
 800534c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005350:	2500      	movne	r5, #0
 8005352:	4293      	cmp	r3, r2
 8005354:	bfc4      	itt	gt
 8005356:	1a9b      	subgt	r3, r3, r2
 8005358:	18ed      	addgt	r5, r5, r3
 800535a:	2600      	movs	r6, #0
 800535c:	341a      	adds	r4, #26
 800535e:	42b5      	cmp	r5, r6
 8005360:	d11a      	bne.n	8005398 <_printf_common+0xc8>
 8005362:	2000      	movs	r0, #0
 8005364:	e008      	b.n	8005378 <_printf_common+0xa8>
 8005366:	2301      	movs	r3, #1
 8005368:	4652      	mov	r2, sl
 800536a:	4649      	mov	r1, r9
 800536c:	4638      	mov	r0, r7
 800536e:	47c0      	blx	r8
 8005370:	3001      	adds	r0, #1
 8005372:	d103      	bne.n	800537c <_printf_common+0xac>
 8005374:	f04f 30ff 	mov.w	r0, #4294967295
 8005378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800537c:	3501      	adds	r5, #1
 800537e:	e7c6      	b.n	800530e <_printf_common+0x3e>
 8005380:	18e1      	adds	r1, r4, r3
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	2030      	movs	r0, #48	; 0x30
 8005386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800538a:	4422      	add	r2, r4
 800538c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005394:	3302      	adds	r3, #2
 8005396:	e7c7      	b.n	8005328 <_printf_common+0x58>
 8005398:	2301      	movs	r3, #1
 800539a:	4622      	mov	r2, r4
 800539c:	4649      	mov	r1, r9
 800539e:	4638      	mov	r0, r7
 80053a0:	47c0      	blx	r8
 80053a2:	3001      	adds	r0, #1
 80053a4:	d0e6      	beq.n	8005374 <_printf_common+0xa4>
 80053a6:	3601      	adds	r6, #1
 80053a8:	e7d9      	b.n	800535e <_printf_common+0x8e>
	...

080053ac <_printf_i>:
 80053ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	7e0f      	ldrb	r7, [r1, #24]
 80053b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053b4:	2f78      	cmp	r7, #120	; 0x78
 80053b6:	4691      	mov	r9, r2
 80053b8:	4680      	mov	r8, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	469a      	mov	sl, r3
 80053be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053c2:	d807      	bhi.n	80053d4 <_printf_i+0x28>
 80053c4:	2f62      	cmp	r7, #98	; 0x62
 80053c6:	d80a      	bhi.n	80053de <_printf_i+0x32>
 80053c8:	2f00      	cmp	r7, #0
 80053ca:	f000 80d4 	beq.w	8005576 <_printf_i+0x1ca>
 80053ce:	2f58      	cmp	r7, #88	; 0x58
 80053d0:	f000 80c0 	beq.w	8005554 <_printf_i+0x1a8>
 80053d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053dc:	e03a      	b.n	8005454 <_printf_i+0xa8>
 80053de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053e2:	2b15      	cmp	r3, #21
 80053e4:	d8f6      	bhi.n	80053d4 <_printf_i+0x28>
 80053e6:	a101      	add	r1, pc, #4	; (adr r1, 80053ec <_printf_i+0x40>)
 80053e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053ec:	08005445 	.word	0x08005445
 80053f0:	08005459 	.word	0x08005459
 80053f4:	080053d5 	.word	0x080053d5
 80053f8:	080053d5 	.word	0x080053d5
 80053fc:	080053d5 	.word	0x080053d5
 8005400:	080053d5 	.word	0x080053d5
 8005404:	08005459 	.word	0x08005459
 8005408:	080053d5 	.word	0x080053d5
 800540c:	080053d5 	.word	0x080053d5
 8005410:	080053d5 	.word	0x080053d5
 8005414:	080053d5 	.word	0x080053d5
 8005418:	0800555d 	.word	0x0800555d
 800541c:	08005485 	.word	0x08005485
 8005420:	08005517 	.word	0x08005517
 8005424:	080053d5 	.word	0x080053d5
 8005428:	080053d5 	.word	0x080053d5
 800542c:	0800557f 	.word	0x0800557f
 8005430:	080053d5 	.word	0x080053d5
 8005434:	08005485 	.word	0x08005485
 8005438:	080053d5 	.word	0x080053d5
 800543c:	080053d5 	.word	0x080053d5
 8005440:	0800551f 	.word	0x0800551f
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	1d1a      	adds	r2, r3, #4
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	602a      	str	r2, [r5, #0]
 800544c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005454:	2301      	movs	r3, #1
 8005456:	e09f      	b.n	8005598 <_printf_i+0x1ec>
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	682b      	ldr	r3, [r5, #0]
 800545c:	0607      	lsls	r7, r0, #24
 800545e:	f103 0104 	add.w	r1, r3, #4
 8005462:	6029      	str	r1, [r5, #0]
 8005464:	d501      	bpl.n	800546a <_printf_i+0xbe>
 8005466:	681e      	ldr	r6, [r3, #0]
 8005468:	e003      	b.n	8005472 <_printf_i+0xc6>
 800546a:	0646      	lsls	r6, r0, #25
 800546c:	d5fb      	bpl.n	8005466 <_printf_i+0xba>
 800546e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005472:	2e00      	cmp	r6, #0
 8005474:	da03      	bge.n	800547e <_printf_i+0xd2>
 8005476:	232d      	movs	r3, #45	; 0x2d
 8005478:	4276      	negs	r6, r6
 800547a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800547e:	485a      	ldr	r0, [pc, #360]	; (80055e8 <_printf_i+0x23c>)
 8005480:	230a      	movs	r3, #10
 8005482:	e012      	b.n	80054aa <_printf_i+0xfe>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	1d19      	adds	r1, r3, #4
 800548a:	6029      	str	r1, [r5, #0]
 800548c:	0605      	lsls	r5, r0, #24
 800548e:	d501      	bpl.n	8005494 <_printf_i+0xe8>
 8005490:	681e      	ldr	r6, [r3, #0]
 8005492:	e002      	b.n	800549a <_printf_i+0xee>
 8005494:	0641      	lsls	r1, r0, #25
 8005496:	d5fb      	bpl.n	8005490 <_printf_i+0xe4>
 8005498:	881e      	ldrh	r6, [r3, #0]
 800549a:	4853      	ldr	r0, [pc, #332]	; (80055e8 <_printf_i+0x23c>)
 800549c:	2f6f      	cmp	r7, #111	; 0x6f
 800549e:	bf0c      	ite	eq
 80054a0:	2308      	moveq	r3, #8
 80054a2:	230a      	movne	r3, #10
 80054a4:	2100      	movs	r1, #0
 80054a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054aa:	6865      	ldr	r5, [r4, #4]
 80054ac:	60a5      	str	r5, [r4, #8]
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	bfa2      	ittt	ge
 80054b2:	6821      	ldrge	r1, [r4, #0]
 80054b4:	f021 0104 	bicge.w	r1, r1, #4
 80054b8:	6021      	strge	r1, [r4, #0]
 80054ba:	b90e      	cbnz	r6, 80054c0 <_printf_i+0x114>
 80054bc:	2d00      	cmp	r5, #0
 80054be:	d04b      	beq.n	8005558 <_printf_i+0x1ac>
 80054c0:	4615      	mov	r5, r2
 80054c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80054c6:	fb03 6711 	mls	r7, r3, r1, r6
 80054ca:	5dc7      	ldrb	r7, [r0, r7]
 80054cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054d0:	4637      	mov	r7, r6
 80054d2:	42bb      	cmp	r3, r7
 80054d4:	460e      	mov	r6, r1
 80054d6:	d9f4      	bls.n	80054c2 <_printf_i+0x116>
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d10b      	bne.n	80054f4 <_printf_i+0x148>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	07de      	lsls	r6, r3, #31
 80054e0:	d508      	bpl.n	80054f4 <_printf_i+0x148>
 80054e2:	6923      	ldr	r3, [r4, #16]
 80054e4:	6861      	ldr	r1, [r4, #4]
 80054e6:	4299      	cmp	r1, r3
 80054e8:	bfde      	ittt	le
 80054ea:	2330      	movle	r3, #48	; 0x30
 80054ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054f4:	1b52      	subs	r2, r2, r5
 80054f6:	6122      	str	r2, [r4, #16]
 80054f8:	f8cd a000 	str.w	sl, [sp]
 80054fc:	464b      	mov	r3, r9
 80054fe:	aa03      	add	r2, sp, #12
 8005500:	4621      	mov	r1, r4
 8005502:	4640      	mov	r0, r8
 8005504:	f7ff fee4 	bl	80052d0 <_printf_common>
 8005508:	3001      	adds	r0, #1
 800550a:	d14a      	bne.n	80055a2 <_printf_i+0x1f6>
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	b004      	add	sp, #16
 8005512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	f043 0320 	orr.w	r3, r3, #32
 800551c:	6023      	str	r3, [r4, #0]
 800551e:	4833      	ldr	r0, [pc, #204]	; (80055ec <_printf_i+0x240>)
 8005520:	2778      	movs	r7, #120	; 0x78
 8005522:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	6829      	ldr	r1, [r5, #0]
 800552a:	061f      	lsls	r7, r3, #24
 800552c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005530:	d402      	bmi.n	8005538 <_printf_i+0x18c>
 8005532:	065f      	lsls	r7, r3, #25
 8005534:	bf48      	it	mi
 8005536:	b2b6      	uxthmi	r6, r6
 8005538:	07df      	lsls	r7, r3, #31
 800553a:	bf48      	it	mi
 800553c:	f043 0320 	orrmi.w	r3, r3, #32
 8005540:	6029      	str	r1, [r5, #0]
 8005542:	bf48      	it	mi
 8005544:	6023      	strmi	r3, [r4, #0]
 8005546:	b91e      	cbnz	r6, 8005550 <_printf_i+0x1a4>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	f023 0320 	bic.w	r3, r3, #32
 800554e:	6023      	str	r3, [r4, #0]
 8005550:	2310      	movs	r3, #16
 8005552:	e7a7      	b.n	80054a4 <_printf_i+0xf8>
 8005554:	4824      	ldr	r0, [pc, #144]	; (80055e8 <_printf_i+0x23c>)
 8005556:	e7e4      	b.n	8005522 <_printf_i+0x176>
 8005558:	4615      	mov	r5, r2
 800555a:	e7bd      	b.n	80054d8 <_printf_i+0x12c>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	6826      	ldr	r6, [r4, #0]
 8005560:	6961      	ldr	r1, [r4, #20]
 8005562:	1d18      	adds	r0, r3, #4
 8005564:	6028      	str	r0, [r5, #0]
 8005566:	0635      	lsls	r5, r6, #24
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	d501      	bpl.n	8005570 <_printf_i+0x1c4>
 800556c:	6019      	str	r1, [r3, #0]
 800556e:	e002      	b.n	8005576 <_printf_i+0x1ca>
 8005570:	0670      	lsls	r0, r6, #25
 8005572:	d5fb      	bpl.n	800556c <_printf_i+0x1c0>
 8005574:	8019      	strh	r1, [r3, #0]
 8005576:	2300      	movs	r3, #0
 8005578:	6123      	str	r3, [r4, #16]
 800557a:	4615      	mov	r5, r2
 800557c:	e7bc      	b.n	80054f8 <_printf_i+0x14c>
 800557e:	682b      	ldr	r3, [r5, #0]
 8005580:	1d1a      	adds	r2, r3, #4
 8005582:	602a      	str	r2, [r5, #0]
 8005584:	681d      	ldr	r5, [r3, #0]
 8005586:	6862      	ldr	r2, [r4, #4]
 8005588:	2100      	movs	r1, #0
 800558a:	4628      	mov	r0, r5
 800558c:	f7fa fe28 	bl	80001e0 <memchr>
 8005590:	b108      	cbz	r0, 8005596 <_printf_i+0x1ea>
 8005592:	1b40      	subs	r0, r0, r5
 8005594:	6060      	str	r0, [r4, #4]
 8005596:	6863      	ldr	r3, [r4, #4]
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	2300      	movs	r3, #0
 800559c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a0:	e7aa      	b.n	80054f8 <_printf_i+0x14c>
 80055a2:	6923      	ldr	r3, [r4, #16]
 80055a4:	462a      	mov	r2, r5
 80055a6:	4649      	mov	r1, r9
 80055a8:	4640      	mov	r0, r8
 80055aa:	47d0      	blx	sl
 80055ac:	3001      	adds	r0, #1
 80055ae:	d0ad      	beq.n	800550c <_printf_i+0x160>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	079b      	lsls	r3, r3, #30
 80055b4:	d413      	bmi.n	80055de <_printf_i+0x232>
 80055b6:	68e0      	ldr	r0, [r4, #12]
 80055b8:	9b03      	ldr	r3, [sp, #12]
 80055ba:	4298      	cmp	r0, r3
 80055bc:	bfb8      	it	lt
 80055be:	4618      	movlt	r0, r3
 80055c0:	e7a6      	b.n	8005510 <_printf_i+0x164>
 80055c2:	2301      	movs	r3, #1
 80055c4:	4632      	mov	r2, r6
 80055c6:	4649      	mov	r1, r9
 80055c8:	4640      	mov	r0, r8
 80055ca:	47d0      	blx	sl
 80055cc:	3001      	adds	r0, #1
 80055ce:	d09d      	beq.n	800550c <_printf_i+0x160>
 80055d0:	3501      	adds	r5, #1
 80055d2:	68e3      	ldr	r3, [r4, #12]
 80055d4:	9903      	ldr	r1, [sp, #12]
 80055d6:	1a5b      	subs	r3, r3, r1
 80055d8:	42ab      	cmp	r3, r5
 80055da:	dcf2      	bgt.n	80055c2 <_printf_i+0x216>
 80055dc:	e7eb      	b.n	80055b6 <_printf_i+0x20a>
 80055de:	2500      	movs	r5, #0
 80055e0:	f104 0619 	add.w	r6, r4, #25
 80055e4:	e7f5      	b.n	80055d2 <_printf_i+0x226>
 80055e6:	bf00      	nop
 80055e8:	08005779 	.word	0x08005779
 80055ec:	0800578a 	.word	0x0800578a

080055f0 <memmove>:
 80055f0:	4288      	cmp	r0, r1
 80055f2:	b510      	push	{r4, lr}
 80055f4:	eb01 0402 	add.w	r4, r1, r2
 80055f8:	d902      	bls.n	8005600 <memmove+0x10>
 80055fa:	4284      	cmp	r4, r0
 80055fc:	4623      	mov	r3, r4
 80055fe:	d807      	bhi.n	8005610 <memmove+0x20>
 8005600:	1e43      	subs	r3, r0, #1
 8005602:	42a1      	cmp	r1, r4
 8005604:	d008      	beq.n	8005618 <memmove+0x28>
 8005606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800560a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800560e:	e7f8      	b.n	8005602 <memmove+0x12>
 8005610:	4402      	add	r2, r0
 8005612:	4601      	mov	r1, r0
 8005614:	428a      	cmp	r2, r1
 8005616:	d100      	bne.n	800561a <memmove+0x2a>
 8005618:	bd10      	pop	{r4, pc}
 800561a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800561e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005622:	e7f7      	b.n	8005614 <memmove+0x24>

08005624 <_sbrk_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	4d06      	ldr	r5, [pc, #24]	; (8005640 <_sbrk_r+0x1c>)
 8005628:	2300      	movs	r3, #0
 800562a:	4604      	mov	r4, r0
 800562c:	4608      	mov	r0, r1
 800562e:	602b      	str	r3, [r5, #0]
 8005630:	f7fb fbfc 	bl	8000e2c <_sbrk>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_sbrk_r+0x1a>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	b103      	cbz	r3, 800563e <_sbrk_r+0x1a>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	20000374 	.word	0x20000374

08005644 <memcpy>:
 8005644:	440a      	add	r2, r1
 8005646:	4291      	cmp	r1, r2
 8005648:	f100 33ff 	add.w	r3, r0, #4294967295
 800564c:	d100      	bne.n	8005650 <memcpy+0xc>
 800564e:	4770      	bx	lr
 8005650:	b510      	push	{r4, lr}
 8005652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800565a:	4291      	cmp	r1, r2
 800565c:	d1f9      	bne.n	8005652 <memcpy+0xe>
 800565e:	bd10      	pop	{r4, pc}

08005660 <_realloc_r>:
 8005660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005664:	4680      	mov	r8, r0
 8005666:	4614      	mov	r4, r2
 8005668:	460e      	mov	r6, r1
 800566a:	b921      	cbnz	r1, 8005676 <_realloc_r+0x16>
 800566c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005670:	4611      	mov	r1, r2
 8005672:	f7ff bc49 	b.w	8004f08 <_malloc_r>
 8005676:	b92a      	cbnz	r2, 8005684 <_realloc_r+0x24>
 8005678:	f7ff fbda 	bl	8004e30 <_free_r>
 800567c:	4625      	mov	r5, r4
 800567e:	4628      	mov	r0, r5
 8005680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005684:	f000 f81b 	bl	80056be <_malloc_usable_size_r>
 8005688:	4284      	cmp	r4, r0
 800568a:	4607      	mov	r7, r0
 800568c:	d802      	bhi.n	8005694 <_realloc_r+0x34>
 800568e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005692:	d812      	bhi.n	80056ba <_realloc_r+0x5a>
 8005694:	4621      	mov	r1, r4
 8005696:	4640      	mov	r0, r8
 8005698:	f7ff fc36 	bl	8004f08 <_malloc_r>
 800569c:	4605      	mov	r5, r0
 800569e:	2800      	cmp	r0, #0
 80056a0:	d0ed      	beq.n	800567e <_realloc_r+0x1e>
 80056a2:	42bc      	cmp	r4, r7
 80056a4:	4622      	mov	r2, r4
 80056a6:	4631      	mov	r1, r6
 80056a8:	bf28      	it	cs
 80056aa:	463a      	movcs	r2, r7
 80056ac:	f7ff ffca 	bl	8005644 <memcpy>
 80056b0:	4631      	mov	r1, r6
 80056b2:	4640      	mov	r0, r8
 80056b4:	f7ff fbbc 	bl	8004e30 <_free_r>
 80056b8:	e7e1      	b.n	800567e <_realloc_r+0x1e>
 80056ba:	4635      	mov	r5, r6
 80056bc:	e7df      	b.n	800567e <_realloc_r+0x1e>

080056be <_malloc_usable_size_r>:
 80056be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056c2:	1f18      	subs	r0, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bfbc      	itt	lt
 80056c8:	580b      	ldrlt	r3, [r1, r0]
 80056ca:	18c0      	addlt	r0, r0, r3
 80056cc:	4770      	bx	lr
	...

080056d0 <_init>:
 80056d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056d2:	bf00      	nop
 80056d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d6:	bc08      	pop	{r3}
 80056d8:	469e      	mov	lr, r3
 80056da:	4770      	bx	lr

080056dc <_fini>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr
