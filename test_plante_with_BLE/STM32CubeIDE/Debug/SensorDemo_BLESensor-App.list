
SensorDemo_BLESensor-App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08004000  08004000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e354  08004190  08004190  00004190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  080124e4  080124e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ce4  08012ce4  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08012ce4  08012ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012cec  08012cec  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012cec  08012cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012cf0  08012cf0  00012cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08012cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba8  200000a8  08012d9c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c50  08012d9c  00020c50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 13 .debug_line   000275f5  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000075  00000000  00000000  00047710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00025d90  00000000  00000000  00047785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004fe2  00000000  00000000  0006d515  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ed8  00000000  00000000  000724f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010e211  00000000  00000000  000743d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000017e2  00000000  00000000  001825e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002e6de  00000000  00000000  00183dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009030  00000000  00000000  001b24a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004190 <__do_global_dtors_aux>:
 8004190:	b510      	push	{r4, lr}
 8004192:	4c05      	ldr	r4, [pc, #20]	; (80041a8 <__do_global_dtors_aux+0x18>)
 8004194:	7823      	ldrb	r3, [r4, #0]
 8004196:	b933      	cbnz	r3, 80041a6 <__do_global_dtors_aux+0x16>
 8004198:	4b04      	ldr	r3, [pc, #16]	; (80041ac <__do_global_dtors_aux+0x1c>)
 800419a:	b113      	cbz	r3, 80041a2 <__do_global_dtors_aux+0x12>
 800419c:	4804      	ldr	r0, [pc, #16]	; (80041b0 <__do_global_dtors_aux+0x20>)
 800419e:	f3af 8000 	nop.w
 80041a2:	2301      	movs	r3, #1
 80041a4:	7023      	strb	r3, [r4, #0]
 80041a6:	bd10      	pop	{r4, pc}
 80041a8:	200000a8 	.word	0x200000a8
 80041ac:	00000000 	.word	0x00000000
 80041b0:	080124cc 	.word	0x080124cc

080041b4 <frame_dummy>:
 80041b4:	b508      	push	{r3, lr}
 80041b6:	4b03      	ldr	r3, [pc, #12]	; (80041c4 <frame_dummy+0x10>)
 80041b8:	b11b      	cbz	r3, 80041c2 <frame_dummy+0xe>
 80041ba:	4903      	ldr	r1, [pc, #12]	; (80041c8 <frame_dummy+0x14>)
 80041bc:	4803      	ldr	r0, [pc, #12]	; (80041cc <frame_dummy+0x18>)
 80041be:	f3af 8000 	nop.w
 80041c2:	bd08      	pop	{r3, pc}
 80041c4:	00000000 	.word	0x00000000
 80041c8:	200000ac 	.word	0x200000ac
 80041cc:	080124cc 	.word	0x080124cc

080041d0 <memchr>:
 80041d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80041d4:	2a10      	cmp	r2, #16
 80041d6:	db2b      	blt.n	8004230 <memchr+0x60>
 80041d8:	f010 0f07 	tst.w	r0, #7
 80041dc:	d008      	beq.n	80041f0 <memchr+0x20>
 80041de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d02d      	beq.n	8004244 <memchr+0x74>
 80041e8:	f010 0f07 	tst.w	r0, #7
 80041ec:	b342      	cbz	r2, 8004240 <memchr+0x70>
 80041ee:	d1f6      	bne.n	80041de <memchr+0xe>
 80041f0:	b4f0      	push	{r4, r5, r6, r7}
 80041f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80041f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80041fa:	f022 0407 	bic.w	r4, r2, #7
 80041fe:	f07f 0700 	mvns.w	r7, #0
 8004202:	2300      	movs	r3, #0
 8004204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8004208:	3c08      	subs	r4, #8
 800420a:	ea85 0501 	eor.w	r5, r5, r1
 800420e:	ea86 0601 	eor.w	r6, r6, r1
 8004212:	fa85 f547 	uadd8	r5, r5, r7
 8004216:	faa3 f587 	sel	r5, r3, r7
 800421a:	fa86 f647 	uadd8	r6, r6, r7
 800421e:	faa5 f687 	sel	r6, r5, r7
 8004222:	b98e      	cbnz	r6, 8004248 <memchr+0x78>
 8004224:	d1ee      	bne.n	8004204 <memchr+0x34>
 8004226:	bcf0      	pop	{r4, r5, r6, r7}
 8004228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800422c:	f002 0207 	and.w	r2, r2, #7
 8004230:	b132      	cbz	r2, 8004240 <memchr+0x70>
 8004232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004236:	3a01      	subs	r2, #1
 8004238:	ea83 0301 	eor.w	r3, r3, r1
 800423c:	b113      	cbz	r3, 8004244 <memchr+0x74>
 800423e:	d1f8      	bne.n	8004232 <memchr+0x62>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	3801      	subs	r0, #1
 8004246:	4770      	bx	lr
 8004248:	2d00      	cmp	r5, #0
 800424a:	bf06      	itte	eq
 800424c:	4635      	moveq	r5, r6
 800424e:	3803      	subeq	r0, #3
 8004250:	3807      	subne	r0, #7
 8004252:	f015 0f01 	tst.w	r5, #1
 8004256:	d107      	bne.n	8004268 <memchr+0x98>
 8004258:	3001      	adds	r0, #1
 800425a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800425e:	bf02      	ittt	eq
 8004260:	3001      	addeq	r0, #1
 8004262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8004266:	3001      	addeq	r0, #1
 8004268:	bcf0      	pop	{r4, r5, r6, r7}
 800426a:	3801      	subs	r0, #1
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <__aeabi_drsub>:
 8004270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8004274:	e002      	b.n	800427c <__adddf3>
 8004276:	bf00      	nop

08004278 <__aeabi_dsub>:
 8004278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800427c <__adddf3>:
 800427c:	b530      	push	{r4, r5, lr}
 800427e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004286:	ea94 0f05 	teq	r4, r5
 800428a:	bf08      	it	eq
 800428c:	ea90 0f02 	teqeq	r0, r2
 8004290:	bf1f      	itttt	ne
 8004292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800429a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800429e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80042a2:	f000 80e2 	beq.w	800446a <__adddf3+0x1ee>
 80042a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80042aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80042ae:	bfb8      	it	lt
 80042b0:	426d      	neglt	r5, r5
 80042b2:	dd0c      	ble.n	80042ce <__adddf3+0x52>
 80042b4:	442c      	add	r4, r5
 80042b6:	ea80 0202 	eor.w	r2, r0, r2
 80042ba:	ea81 0303 	eor.w	r3, r1, r3
 80042be:	ea82 0000 	eor.w	r0, r2, r0
 80042c2:	ea83 0101 	eor.w	r1, r3, r1
 80042c6:	ea80 0202 	eor.w	r2, r0, r2
 80042ca:	ea81 0303 	eor.w	r3, r1, r3
 80042ce:	2d36      	cmp	r5, #54	; 0x36
 80042d0:	bf88      	it	hi
 80042d2:	bd30      	pophi	{r4, r5, pc}
 80042d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80042d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80042dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80042e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80042e4:	d002      	beq.n	80042ec <__adddf3+0x70>
 80042e6:	4240      	negs	r0, r0
 80042e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80042ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80042f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80042f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80042f8:	d002      	beq.n	8004300 <__adddf3+0x84>
 80042fa:	4252      	negs	r2, r2
 80042fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8004300:	ea94 0f05 	teq	r4, r5
 8004304:	f000 80a7 	beq.w	8004456 <__adddf3+0x1da>
 8004308:	f1a4 0401 	sub.w	r4, r4, #1
 800430c:	f1d5 0e20 	rsbs	lr, r5, #32
 8004310:	db0d      	blt.n	800432e <__adddf3+0xb2>
 8004312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004316:	fa22 f205 	lsr.w	r2, r2, r5
 800431a:	1880      	adds	r0, r0, r2
 800431c:	f141 0100 	adc.w	r1, r1, #0
 8004320:	fa03 f20e 	lsl.w	r2, r3, lr
 8004324:	1880      	adds	r0, r0, r2
 8004326:	fa43 f305 	asr.w	r3, r3, r5
 800432a:	4159      	adcs	r1, r3
 800432c:	e00e      	b.n	800434c <__adddf3+0xd0>
 800432e:	f1a5 0520 	sub.w	r5, r5, #32
 8004332:	f10e 0e20 	add.w	lr, lr, #32
 8004336:	2a01      	cmp	r2, #1
 8004338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800433c:	bf28      	it	cs
 800433e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004342:	fa43 f305 	asr.w	r3, r3, r5
 8004346:	18c0      	adds	r0, r0, r3
 8004348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800434c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004350:	d507      	bpl.n	8004362 <__adddf3+0xe6>
 8004352:	f04f 0e00 	mov.w	lr, #0
 8004356:	f1dc 0c00 	rsbs	ip, ip, #0
 800435a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800435e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004366:	d31b      	bcc.n	80043a0 <__adddf3+0x124>
 8004368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800436c:	d30c      	bcc.n	8004388 <__adddf3+0x10c>
 800436e:	0849      	lsrs	r1, r1, #1
 8004370:	ea5f 0030 	movs.w	r0, r0, rrx
 8004374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004378:	f104 0401 	add.w	r4, r4, #1
 800437c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8004384:	f080 809a 	bcs.w	80044bc <__adddf3+0x240>
 8004388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800438c:	bf08      	it	eq
 800438e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004392:	f150 0000 	adcs.w	r0, r0, #0
 8004396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800439a:	ea41 0105 	orr.w	r1, r1, r5
 800439e:	bd30      	pop	{r4, r5, pc}
 80043a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80043a4:	4140      	adcs	r0, r0
 80043a6:	eb41 0101 	adc.w	r1, r1, r1
 80043aa:	3c01      	subs	r4, #1
 80043ac:	bf28      	it	cs
 80043ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80043b2:	d2e9      	bcs.n	8004388 <__adddf3+0x10c>
 80043b4:	f091 0f00 	teq	r1, #0
 80043b8:	bf04      	itt	eq
 80043ba:	4601      	moveq	r1, r0
 80043bc:	2000      	moveq	r0, #0
 80043be:	fab1 f381 	clz	r3, r1
 80043c2:	bf08      	it	eq
 80043c4:	3320      	addeq	r3, #32
 80043c6:	f1a3 030b 	sub.w	r3, r3, #11
 80043ca:	f1b3 0220 	subs.w	r2, r3, #32
 80043ce:	da0c      	bge.n	80043ea <__adddf3+0x16e>
 80043d0:	320c      	adds	r2, #12
 80043d2:	dd08      	ble.n	80043e6 <__adddf3+0x16a>
 80043d4:	f102 0c14 	add.w	ip, r2, #20
 80043d8:	f1c2 020c 	rsb	r2, r2, #12
 80043dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80043e0:	fa21 f102 	lsr.w	r1, r1, r2
 80043e4:	e00c      	b.n	8004400 <__adddf3+0x184>
 80043e6:	f102 0214 	add.w	r2, r2, #20
 80043ea:	bfd8      	it	le
 80043ec:	f1c2 0c20 	rsble	ip, r2, #32
 80043f0:	fa01 f102 	lsl.w	r1, r1, r2
 80043f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80043f8:	bfdc      	itt	le
 80043fa:	ea41 010c 	orrle.w	r1, r1, ip
 80043fe:	4090      	lslle	r0, r2
 8004400:	1ae4      	subs	r4, r4, r3
 8004402:	bfa2      	ittt	ge
 8004404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8004408:	4329      	orrge	r1, r5
 800440a:	bd30      	popge	{r4, r5, pc}
 800440c:	ea6f 0404 	mvn.w	r4, r4
 8004410:	3c1f      	subs	r4, #31
 8004412:	da1c      	bge.n	800444e <__adddf3+0x1d2>
 8004414:	340c      	adds	r4, #12
 8004416:	dc0e      	bgt.n	8004436 <__adddf3+0x1ba>
 8004418:	f104 0414 	add.w	r4, r4, #20
 800441c:	f1c4 0220 	rsb	r2, r4, #32
 8004420:	fa20 f004 	lsr.w	r0, r0, r4
 8004424:	fa01 f302 	lsl.w	r3, r1, r2
 8004428:	ea40 0003 	orr.w	r0, r0, r3
 800442c:	fa21 f304 	lsr.w	r3, r1, r4
 8004430:	ea45 0103 	orr.w	r1, r5, r3
 8004434:	bd30      	pop	{r4, r5, pc}
 8004436:	f1c4 040c 	rsb	r4, r4, #12
 800443a:	f1c4 0220 	rsb	r2, r4, #32
 800443e:	fa20 f002 	lsr.w	r0, r0, r2
 8004442:	fa01 f304 	lsl.w	r3, r1, r4
 8004446:	ea40 0003 	orr.w	r0, r0, r3
 800444a:	4629      	mov	r1, r5
 800444c:	bd30      	pop	{r4, r5, pc}
 800444e:	fa21 f004 	lsr.w	r0, r1, r4
 8004452:	4629      	mov	r1, r5
 8004454:	bd30      	pop	{r4, r5, pc}
 8004456:	f094 0f00 	teq	r4, #0
 800445a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800445e:	bf06      	itte	eq
 8004460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8004464:	3401      	addeq	r4, #1
 8004466:	3d01      	subne	r5, #1
 8004468:	e74e      	b.n	8004308 <__adddf3+0x8c>
 800446a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800446e:	bf18      	it	ne
 8004470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004474:	d029      	beq.n	80044ca <__adddf3+0x24e>
 8004476:	ea94 0f05 	teq	r4, r5
 800447a:	bf08      	it	eq
 800447c:	ea90 0f02 	teqeq	r0, r2
 8004480:	d005      	beq.n	800448e <__adddf3+0x212>
 8004482:	ea54 0c00 	orrs.w	ip, r4, r0
 8004486:	bf04      	itt	eq
 8004488:	4619      	moveq	r1, r3
 800448a:	4610      	moveq	r0, r2
 800448c:	bd30      	pop	{r4, r5, pc}
 800448e:	ea91 0f03 	teq	r1, r3
 8004492:	bf1e      	ittt	ne
 8004494:	2100      	movne	r1, #0
 8004496:	2000      	movne	r0, #0
 8004498:	bd30      	popne	{r4, r5, pc}
 800449a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800449e:	d105      	bne.n	80044ac <__adddf3+0x230>
 80044a0:	0040      	lsls	r0, r0, #1
 80044a2:	4149      	adcs	r1, r1
 80044a4:	bf28      	it	cs
 80044a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80044aa:	bd30      	pop	{r4, r5, pc}
 80044ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80044b0:	bf3c      	itt	cc
 80044b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80044b6:	bd30      	popcc	{r4, r5, pc}
 80044b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80044bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80044c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80044c4:	f04f 0000 	mov.w	r0, #0
 80044c8:	bd30      	pop	{r4, r5, pc}
 80044ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80044ce:	bf1a      	itte	ne
 80044d0:	4619      	movne	r1, r3
 80044d2:	4610      	movne	r0, r2
 80044d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80044d8:	bf1c      	itt	ne
 80044da:	460b      	movne	r3, r1
 80044dc:	4602      	movne	r2, r0
 80044de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80044e2:	bf06      	itte	eq
 80044e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80044e8:	ea91 0f03 	teqeq	r1, r3
 80044ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80044f0:	bd30      	pop	{r4, r5, pc}
 80044f2:	bf00      	nop

080044f4 <__aeabi_ui2d>:
 80044f4:	f090 0f00 	teq	r0, #0
 80044f8:	bf04      	itt	eq
 80044fa:	2100      	moveq	r1, #0
 80044fc:	4770      	bxeq	lr
 80044fe:	b530      	push	{r4, r5, lr}
 8004500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004508:	f04f 0500 	mov.w	r5, #0
 800450c:	f04f 0100 	mov.w	r1, #0
 8004510:	e750      	b.n	80043b4 <__adddf3+0x138>
 8004512:	bf00      	nop

08004514 <__aeabi_i2d>:
 8004514:	f090 0f00 	teq	r0, #0
 8004518:	bf04      	itt	eq
 800451a:	2100      	moveq	r1, #0
 800451c:	4770      	bxeq	lr
 800451e:	b530      	push	{r4, r5, lr}
 8004520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8004524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8004528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800452c:	bf48      	it	mi
 800452e:	4240      	negmi	r0, r0
 8004530:	f04f 0100 	mov.w	r1, #0
 8004534:	e73e      	b.n	80043b4 <__adddf3+0x138>
 8004536:	bf00      	nop

08004538 <__aeabi_f2d>:
 8004538:	0042      	lsls	r2, r0, #1
 800453a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800453e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004546:	bf1f      	itttt	ne
 8004548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800454c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8004550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8004554:	4770      	bxne	lr
 8004556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800455a:	bf08      	it	eq
 800455c:	4770      	bxeq	lr
 800455e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8004562:	bf04      	itt	eq
 8004564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8004568:	4770      	bxeq	lr
 800456a:	b530      	push	{r4, r5, lr}
 800456c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8004570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8004574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004578:	e71c      	b.n	80043b4 <__adddf3+0x138>
 800457a:	bf00      	nop

0800457c <__aeabi_ul2d>:
 800457c:	ea50 0201 	orrs.w	r2, r0, r1
 8004580:	bf08      	it	eq
 8004582:	4770      	bxeq	lr
 8004584:	b530      	push	{r4, r5, lr}
 8004586:	f04f 0500 	mov.w	r5, #0
 800458a:	e00a      	b.n	80045a2 <__aeabi_l2d+0x16>

0800458c <__aeabi_l2d>:
 800458c:	ea50 0201 	orrs.w	r2, r0, r1
 8004590:	bf08      	it	eq
 8004592:	4770      	bxeq	lr
 8004594:	b530      	push	{r4, r5, lr}
 8004596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800459a:	d502      	bpl.n	80045a2 <__aeabi_l2d+0x16>
 800459c:	4240      	negs	r0, r0
 800459e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80045a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80045a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80045aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80045ae:	f43f aed8 	beq.w	8004362 <__adddf3+0xe6>
 80045b2:	f04f 0203 	mov.w	r2, #3
 80045b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045ba:	bf18      	it	ne
 80045bc:	3203      	addne	r2, #3
 80045be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80045c2:	bf18      	it	ne
 80045c4:	3203      	addne	r2, #3
 80045c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80045ca:	f1c2 0320 	rsb	r3, r2, #32
 80045ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80045d2:	fa20 f002 	lsr.w	r0, r0, r2
 80045d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80045da:	ea40 000e 	orr.w	r0, r0, lr
 80045de:	fa21 f102 	lsr.w	r1, r1, r2
 80045e2:	4414      	add	r4, r2
 80045e4:	e6bd      	b.n	8004362 <__adddf3+0xe6>
 80045e6:	bf00      	nop

080045e8 <__aeabi_d2f>:
 80045e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80045ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80045f0:	bf24      	itt	cs
 80045f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80045f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80045fa:	d90d      	bls.n	8004618 <__aeabi_d2f+0x30>
 80045fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004600:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004604:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004608:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800460c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004610:	bf08      	it	eq
 8004612:	f020 0001 	biceq.w	r0, r0, #1
 8004616:	4770      	bx	lr
 8004618:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800461c:	d121      	bne.n	8004662 <__aeabi_d2f+0x7a>
 800461e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004622:	bfbc      	itt	lt
 8004624:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004628:	4770      	bxlt	lr
 800462a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800462e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004632:	f1c2 0218 	rsb	r2, r2, #24
 8004636:	f1c2 0c20 	rsb	ip, r2, #32
 800463a:	fa10 f30c 	lsls.w	r3, r0, ip
 800463e:	fa20 f002 	lsr.w	r0, r0, r2
 8004642:	bf18      	it	ne
 8004644:	f040 0001 	orrne.w	r0, r0, #1
 8004648:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800464c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004650:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004654:	ea40 000c 	orr.w	r0, r0, ip
 8004658:	fa23 f302 	lsr.w	r3, r3, r2
 800465c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004660:	e7cc      	b.n	80045fc <__aeabi_d2f+0x14>
 8004662:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004666:	d107      	bne.n	8004678 <__aeabi_d2f+0x90>
 8004668:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800466c:	bf1e      	ittt	ne
 800466e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004672:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004676:	4770      	bxne	lr
 8004678:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800467c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8004680:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop

08004688 <__aeabi_uldivmod>:
 8004688:	b953      	cbnz	r3, 80046a0 <__aeabi_uldivmod+0x18>
 800468a:	b94a      	cbnz	r2, 80046a0 <__aeabi_uldivmod+0x18>
 800468c:	2900      	cmp	r1, #0
 800468e:	bf08      	it	eq
 8004690:	2800      	cmpeq	r0, #0
 8004692:	bf1c      	itt	ne
 8004694:	f04f 31ff 	movne.w	r1, #4294967295
 8004698:	f04f 30ff 	movne.w	r0, #4294967295
 800469c:	f000 b970 	b.w	8004980 <__aeabi_idiv0>
 80046a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80046a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80046a8:	f000 f806 	bl	80046b8 <__udivmoddi4>
 80046ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80046b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046b4:	b004      	add	sp, #16
 80046b6:	4770      	bx	lr

080046b8 <__udivmoddi4>:
 80046b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046bc:	9e08      	ldr	r6, [sp, #32]
 80046be:	460d      	mov	r5, r1
 80046c0:	4604      	mov	r4, r0
 80046c2:	460f      	mov	r7, r1
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d14a      	bne.n	800475e <__udivmoddi4+0xa6>
 80046c8:	428a      	cmp	r2, r1
 80046ca:	4694      	mov	ip, r2
 80046cc:	d965      	bls.n	800479a <__udivmoddi4+0xe2>
 80046ce:	fab2 f382 	clz	r3, r2
 80046d2:	b143      	cbz	r3, 80046e6 <__udivmoddi4+0x2e>
 80046d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80046d8:	f1c3 0220 	rsb	r2, r3, #32
 80046dc:	409f      	lsls	r7, r3
 80046de:	fa20 f202 	lsr.w	r2, r0, r2
 80046e2:	4317      	orrs	r7, r2
 80046e4:	409c      	lsls	r4, r3
 80046e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80046ea:	fa1f f58c 	uxth.w	r5, ip
 80046ee:	fbb7 f1fe 	udiv	r1, r7, lr
 80046f2:	0c22      	lsrs	r2, r4, #16
 80046f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80046f8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80046fc:	fb01 f005 	mul.w	r0, r1, r5
 8004700:	4290      	cmp	r0, r2
 8004702:	d90a      	bls.n	800471a <__udivmoddi4+0x62>
 8004704:	eb1c 0202 	adds.w	r2, ip, r2
 8004708:	f101 37ff 	add.w	r7, r1, #4294967295
 800470c:	f080 811c 	bcs.w	8004948 <__udivmoddi4+0x290>
 8004710:	4290      	cmp	r0, r2
 8004712:	f240 8119 	bls.w	8004948 <__udivmoddi4+0x290>
 8004716:	3902      	subs	r1, #2
 8004718:	4462      	add	r2, ip
 800471a:	1a12      	subs	r2, r2, r0
 800471c:	b2a4      	uxth	r4, r4
 800471e:	fbb2 f0fe 	udiv	r0, r2, lr
 8004722:	fb0e 2210 	mls	r2, lr, r0, r2
 8004726:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800472a:	fb00 f505 	mul.w	r5, r0, r5
 800472e:	42a5      	cmp	r5, r4
 8004730:	d90a      	bls.n	8004748 <__udivmoddi4+0x90>
 8004732:	eb1c 0404 	adds.w	r4, ip, r4
 8004736:	f100 32ff 	add.w	r2, r0, #4294967295
 800473a:	f080 8107 	bcs.w	800494c <__udivmoddi4+0x294>
 800473e:	42a5      	cmp	r5, r4
 8004740:	f240 8104 	bls.w	800494c <__udivmoddi4+0x294>
 8004744:	4464      	add	r4, ip
 8004746:	3802      	subs	r0, #2
 8004748:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800474c:	1b64      	subs	r4, r4, r5
 800474e:	2100      	movs	r1, #0
 8004750:	b11e      	cbz	r6, 800475a <__udivmoddi4+0xa2>
 8004752:	40dc      	lsrs	r4, r3
 8004754:	2300      	movs	r3, #0
 8004756:	e9c6 4300 	strd	r4, r3, [r6]
 800475a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800475e:	428b      	cmp	r3, r1
 8004760:	d908      	bls.n	8004774 <__udivmoddi4+0xbc>
 8004762:	2e00      	cmp	r6, #0
 8004764:	f000 80ed 	beq.w	8004942 <__udivmoddi4+0x28a>
 8004768:	2100      	movs	r1, #0
 800476a:	e9c6 0500 	strd	r0, r5, [r6]
 800476e:	4608      	mov	r0, r1
 8004770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004774:	fab3 f183 	clz	r1, r3
 8004778:	2900      	cmp	r1, #0
 800477a:	d149      	bne.n	8004810 <__udivmoddi4+0x158>
 800477c:	42ab      	cmp	r3, r5
 800477e:	d302      	bcc.n	8004786 <__udivmoddi4+0xce>
 8004780:	4282      	cmp	r2, r0
 8004782:	f200 80f8 	bhi.w	8004976 <__udivmoddi4+0x2be>
 8004786:	1a84      	subs	r4, r0, r2
 8004788:	eb65 0203 	sbc.w	r2, r5, r3
 800478c:	2001      	movs	r0, #1
 800478e:	4617      	mov	r7, r2
 8004790:	2e00      	cmp	r6, #0
 8004792:	d0e2      	beq.n	800475a <__udivmoddi4+0xa2>
 8004794:	e9c6 4700 	strd	r4, r7, [r6]
 8004798:	e7df      	b.n	800475a <__udivmoddi4+0xa2>
 800479a:	b902      	cbnz	r2, 800479e <__udivmoddi4+0xe6>
 800479c:	deff      	udf	#255	; 0xff
 800479e:	fab2 f382 	clz	r3, r2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f040 8090 	bne.w	80048c8 <__udivmoddi4+0x210>
 80047a8:	1a8a      	subs	r2, r1, r2
 80047aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80047ae:	fa1f fe8c 	uxth.w	lr, ip
 80047b2:	2101      	movs	r1, #1
 80047b4:	fbb2 f5f7 	udiv	r5, r2, r7
 80047b8:	fb07 2015 	mls	r0, r7, r5, r2
 80047bc:	0c22      	lsrs	r2, r4, #16
 80047be:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80047c2:	fb0e f005 	mul.w	r0, lr, r5
 80047c6:	4290      	cmp	r0, r2
 80047c8:	d908      	bls.n	80047dc <__udivmoddi4+0x124>
 80047ca:	eb1c 0202 	adds.w	r2, ip, r2
 80047ce:	f105 38ff 	add.w	r8, r5, #4294967295
 80047d2:	d202      	bcs.n	80047da <__udivmoddi4+0x122>
 80047d4:	4290      	cmp	r0, r2
 80047d6:	f200 80cb 	bhi.w	8004970 <__udivmoddi4+0x2b8>
 80047da:	4645      	mov	r5, r8
 80047dc:	1a12      	subs	r2, r2, r0
 80047de:	b2a4      	uxth	r4, r4
 80047e0:	fbb2 f0f7 	udiv	r0, r2, r7
 80047e4:	fb07 2210 	mls	r2, r7, r0, r2
 80047e8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80047ec:	fb0e fe00 	mul.w	lr, lr, r0
 80047f0:	45a6      	cmp	lr, r4
 80047f2:	d908      	bls.n	8004806 <__udivmoddi4+0x14e>
 80047f4:	eb1c 0404 	adds.w	r4, ip, r4
 80047f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80047fc:	d202      	bcs.n	8004804 <__udivmoddi4+0x14c>
 80047fe:	45a6      	cmp	lr, r4
 8004800:	f200 80bb 	bhi.w	800497a <__udivmoddi4+0x2c2>
 8004804:	4610      	mov	r0, r2
 8004806:	eba4 040e 	sub.w	r4, r4, lr
 800480a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800480e:	e79f      	b.n	8004750 <__udivmoddi4+0x98>
 8004810:	f1c1 0720 	rsb	r7, r1, #32
 8004814:	408b      	lsls	r3, r1
 8004816:	fa22 fc07 	lsr.w	ip, r2, r7
 800481a:	ea4c 0c03 	orr.w	ip, ip, r3
 800481e:	fa05 f401 	lsl.w	r4, r5, r1
 8004822:	fa20 f307 	lsr.w	r3, r0, r7
 8004826:	40fd      	lsrs	r5, r7
 8004828:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800482c:	4323      	orrs	r3, r4
 800482e:	fbb5 f8f9 	udiv	r8, r5, r9
 8004832:	fa1f fe8c 	uxth.w	lr, ip
 8004836:	fb09 5518 	mls	r5, r9, r8, r5
 800483a:	0c1c      	lsrs	r4, r3, #16
 800483c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8004840:	fb08 f50e 	mul.w	r5, r8, lr
 8004844:	42a5      	cmp	r5, r4
 8004846:	fa02 f201 	lsl.w	r2, r2, r1
 800484a:	fa00 f001 	lsl.w	r0, r0, r1
 800484e:	d90b      	bls.n	8004868 <__udivmoddi4+0x1b0>
 8004850:	eb1c 0404 	adds.w	r4, ip, r4
 8004854:	f108 3aff 	add.w	sl, r8, #4294967295
 8004858:	f080 8088 	bcs.w	800496c <__udivmoddi4+0x2b4>
 800485c:	42a5      	cmp	r5, r4
 800485e:	f240 8085 	bls.w	800496c <__udivmoddi4+0x2b4>
 8004862:	f1a8 0802 	sub.w	r8, r8, #2
 8004866:	4464      	add	r4, ip
 8004868:	1b64      	subs	r4, r4, r5
 800486a:	b29d      	uxth	r5, r3
 800486c:	fbb4 f3f9 	udiv	r3, r4, r9
 8004870:	fb09 4413 	mls	r4, r9, r3, r4
 8004874:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8004878:	fb03 fe0e 	mul.w	lr, r3, lr
 800487c:	45a6      	cmp	lr, r4
 800487e:	d908      	bls.n	8004892 <__udivmoddi4+0x1da>
 8004880:	eb1c 0404 	adds.w	r4, ip, r4
 8004884:	f103 35ff 	add.w	r5, r3, #4294967295
 8004888:	d26c      	bcs.n	8004964 <__udivmoddi4+0x2ac>
 800488a:	45a6      	cmp	lr, r4
 800488c:	d96a      	bls.n	8004964 <__udivmoddi4+0x2ac>
 800488e:	3b02      	subs	r3, #2
 8004890:	4464      	add	r4, ip
 8004892:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004896:	fba3 9502 	umull	r9, r5, r3, r2
 800489a:	eba4 040e 	sub.w	r4, r4, lr
 800489e:	42ac      	cmp	r4, r5
 80048a0:	46c8      	mov	r8, r9
 80048a2:	46ae      	mov	lr, r5
 80048a4:	d356      	bcc.n	8004954 <__udivmoddi4+0x29c>
 80048a6:	d053      	beq.n	8004950 <__udivmoddi4+0x298>
 80048a8:	b156      	cbz	r6, 80048c0 <__udivmoddi4+0x208>
 80048aa:	ebb0 0208 	subs.w	r2, r0, r8
 80048ae:	eb64 040e 	sbc.w	r4, r4, lr
 80048b2:	fa04 f707 	lsl.w	r7, r4, r7
 80048b6:	40ca      	lsrs	r2, r1
 80048b8:	40cc      	lsrs	r4, r1
 80048ba:	4317      	orrs	r7, r2
 80048bc:	e9c6 7400 	strd	r7, r4, [r6]
 80048c0:	4618      	mov	r0, r3
 80048c2:	2100      	movs	r1, #0
 80048c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c8:	f1c3 0120 	rsb	r1, r3, #32
 80048cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80048d0:	fa20 f201 	lsr.w	r2, r0, r1
 80048d4:	fa25 f101 	lsr.w	r1, r5, r1
 80048d8:	409d      	lsls	r5, r3
 80048da:	432a      	orrs	r2, r5
 80048dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80048e0:	fa1f fe8c 	uxth.w	lr, ip
 80048e4:	fbb1 f0f7 	udiv	r0, r1, r7
 80048e8:	fb07 1510 	mls	r5, r7, r0, r1
 80048ec:	0c11      	lsrs	r1, r2, #16
 80048ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80048f2:	fb00 f50e 	mul.w	r5, r0, lr
 80048f6:	428d      	cmp	r5, r1
 80048f8:	fa04 f403 	lsl.w	r4, r4, r3
 80048fc:	d908      	bls.n	8004910 <__udivmoddi4+0x258>
 80048fe:	eb1c 0101 	adds.w	r1, ip, r1
 8004902:	f100 38ff 	add.w	r8, r0, #4294967295
 8004906:	d22f      	bcs.n	8004968 <__udivmoddi4+0x2b0>
 8004908:	428d      	cmp	r5, r1
 800490a:	d92d      	bls.n	8004968 <__udivmoddi4+0x2b0>
 800490c:	3802      	subs	r0, #2
 800490e:	4461      	add	r1, ip
 8004910:	1b49      	subs	r1, r1, r5
 8004912:	b292      	uxth	r2, r2
 8004914:	fbb1 f5f7 	udiv	r5, r1, r7
 8004918:	fb07 1115 	mls	r1, r7, r5, r1
 800491c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004920:	fb05 f10e 	mul.w	r1, r5, lr
 8004924:	4291      	cmp	r1, r2
 8004926:	d908      	bls.n	800493a <__udivmoddi4+0x282>
 8004928:	eb1c 0202 	adds.w	r2, ip, r2
 800492c:	f105 38ff 	add.w	r8, r5, #4294967295
 8004930:	d216      	bcs.n	8004960 <__udivmoddi4+0x2a8>
 8004932:	4291      	cmp	r1, r2
 8004934:	d914      	bls.n	8004960 <__udivmoddi4+0x2a8>
 8004936:	3d02      	subs	r5, #2
 8004938:	4462      	add	r2, ip
 800493a:	1a52      	subs	r2, r2, r1
 800493c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8004940:	e738      	b.n	80047b4 <__udivmoddi4+0xfc>
 8004942:	4631      	mov	r1, r6
 8004944:	4630      	mov	r0, r6
 8004946:	e708      	b.n	800475a <__udivmoddi4+0xa2>
 8004948:	4639      	mov	r1, r7
 800494a:	e6e6      	b.n	800471a <__udivmoddi4+0x62>
 800494c:	4610      	mov	r0, r2
 800494e:	e6fb      	b.n	8004748 <__udivmoddi4+0x90>
 8004950:	4548      	cmp	r0, r9
 8004952:	d2a9      	bcs.n	80048a8 <__udivmoddi4+0x1f0>
 8004954:	ebb9 0802 	subs.w	r8, r9, r2
 8004958:	eb65 0e0c 	sbc.w	lr, r5, ip
 800495c:	3b01      	subs	r3, #1
 800495e:	e7a3      	b.n	80048a8 <__udivmoddi4+0x1f0>
 8004960:	4645      	mov	r5, r8
 8004962:	e7ea      	b.n	800493a <__udivmoddi4+0x282>
 8004964:	462b      	mov	r3, r5
 8004966:	e794      	b.n	8004892 <__udivmoddi4+0x1da>
 8004968:	4640      	mov	r0, r8
 800496a:	e7d1      	b.n	8004910 <__udivmoddi4+0x258>
 800496c:	46d0      	mov	r8, sl
 800496e:	e77b      	b.n	8004868 <__udivmoddi4+0x1b0>
 8004970:	3d02      	subs	r5, #2
 8004972:	4462      	add	r2, ip
 8004974:	e732      	b.n	80047dc <__udivmoddi4+0x124>
 8004976:	4608      	mov	r0, r1
 8004978:	e70a      	b.n	8004790 <__udivmoddi4+0xd8>
 800497a:	4464      	add	r4, ip
 800497c:	3802      	subs	r0, #2
 800497e:	e742      	b.n	8004806 <__udivmoddi4+0x14e>

08004980 <__aeabi_idiv0>:
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop

08004984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004988:	f004 f868 	bl	8008a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800498c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800498e:	e003      	b.n	8004998 <LoopCopyDataInit>

08004990 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004990:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004992:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004994:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004996:	3104      	adds	r1, #4

08004998 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004998:	480a      	ldr	r0, [pc, #40]	; (80049c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800499a:	4b0b      	ldr	r3, [pc, #44]	; (80049c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800499c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800499e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80049a0:	d3f6      	bcc.n	8004990 <CopyDataInit>
	ldr	r2, =_sbss
 80049a2:	4a0a      	ldr	r2, [pc, #40]	; (80049cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80049a4:	e002      	b.n	80049ac <LoopFillZerobss>

080049a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80049a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80049a8:	f842 3b04 	str.w	r3, [r2], #4

080049ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80049ac:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <LoopForever+0x16>)
	cmp	r2, r3
 80049ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80049b0:	d3f9      	bcc.n	80049a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049b2:	f00c fe1d 	bl	80115f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80049b6:	f002 ff3f 	bl	8007838 <main>

080049ba <LoopForever>:

LoopForever:
    b LoopForever
 80049ba:	e7fe      	b.n	80049ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80049bc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80049c0:	08012cf4 	.word	0x08012cf4
	ldr	r0, =_sdata
 80049c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80049c8:	200000a8 	.word	0x200000a8
	ldr	r2, =_sbss
 80049cc:	200000a8 	.word	0x200000a8
	ldr	r3, = _ebss
 80049d0:	20000c50 	.word	0x20000c50

080049d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80049d4:	e7fe      	b.n	80049d4 <ADC1_2_IRQHandler>
	...

080049d8 <CheckBootLoaderCompliance>:
 * @brief Function for Testing the BootLoader Compliance
 * @param None
 * @retval int8_t Return value for checking purpouse (0/1 == Ok/Error)
 */
int8_t CheckBootLoaderCompliance(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  OTA_PRINTF("Testing BootLoaderCompliance:\r\n");
 80049dc:	483b      	ldr	r0, [pc, #236]	; (8004acc <CheckBootLoaderCompliance+0xf4>)
 80049de:	f00c fca1 	bl	8011324 <puts>
  OTA_PRINTF("\tVersion  %d.%d.%d\r\n",
              (uint16_t)(BootLoaderFeatures->Version>>16),
 80049e2:	4b3b      	ldr	r3, [pc, #236]	; (8004ad0 <CheckBootLoaderCompliance+0xf8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	0c1b      	lsrs	r3, r3, #16
 80049ea:	b29b      	uxth	r3, r3
  OTA_PRINTF("\tVersion  %d.%d.%d\r\n",
 80049ec:	4619      	mov	r1, r3
              (uint16_t)((BootLoaderFeatures->Version>>8)&0xFF),
 80049ee:	4b38      	ldr	r3, [pc, #224]	; (8004ad0 <CheckBootLoaderCompliance+0xf8>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	b29b      	uxth	r3, r3
  OTA_PRINTF("\tVersion  %d.%d.%d\r\n",
 80049f8:	b2da      	uxtb	r2, r3
              (uint16_t)(BootLoaderFeatures->Version    &0xFF));
 80049fa:	4b35      	ldr	r3, [pc, #212]	; (8004ad0 <CheckBootLoaderCompliance+0xf8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	b29b      	uxth	r3, r3
  OTA_PRINTF("\tVersion  %d.%d.%d\r\n",
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	4833      	ldr	r0, [pc, #204]	; (8004ad4 <CheckBootLoaderCompliance+0xfc>)
 8004a06:	f00c fc27 	bl	8011258 <iprintf>

  if((( BootLoaderFeatures->Version>>16      )!=BL_VERSION_MAJOR) |
 8004a0a:	4b31      	ldr	r3, [pc, #196]	; (8004ad0 <CheckBootLoaderCompliance+0xf8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	0c1b      	lsrs	r3, r3, #16
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	bf14      	ite	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	2300      	moveq	r3, #0
 8004a1a:	b2da      	uxtb	r2, r3
     (((BootLoaderFeatures->Version>>8 )&0xFF)!=BL_VERSION_MINOR) |
 8004a1c:	4b2c      	ldr	r3, [pc, #176]	; (8004ad0 <CheckBootLoaderCompliance+0xf8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	0a1b      	lsrs	r3, r3, #8
 8004a24:	b2db      	uxtb	r3, r3
  if((( BootLoaderFeatures->Version>>16      )!=BL_VERSION_MAJOR) |
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4313      	orrs	r3, r2
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	461a      	mov	r2, r3
      ((BootLoaderFeatures->Version     &0xFF)!=BL_VERSION_PATCH)) {
 8004a36:	4b26      	ldr	r3, [pc, #152]	; (8004ad0 <CheckBootLoaderCompliance+0xf8>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	bf14      	ite	ne
 8004a42:	2301      	movne	r3, #1
 8004a44:	2300      	moveq	r3, #0
 8004a46:	b2db      	uxtb	r3, r3
     (((BootLoaderFeatures->Version>>8 )&0xFF)!=BL_VERSION_MINOR) |
 8004a48:	4313      	orrs	r3, r2
  if((( BootLoaderFeatures->Version>>16      )!=BL_VERSION_MAJOR) |
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d004      	beq.n	8004a58 <CheckBootLoaderCompliance+0x80>
    OTA_PRINTF("\tBL Version  Ko\r\n");
 8004a4e:	4822      	ldr	r0, [pc, #136]	; (8004ad8 <CheckBootLoaderCompliance+0x100>)
 8004a50:	f00c fc68 	bl	8011324 <puts>
    return 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e036      	b.n	8004ac6 <CheckBootLoaderCompliance+0xee>
  } else {
    OTA_PRINTF("\tBL Version  Ok\r\n");
 8004a58:	4820      	ldr	r0, [pc, #128]	; (8004adc <CheckBootLoaderCompliance+0x104>)
 8004a5a:	f00c fc63 	bl	8011324 <puts>
  }

  if(BootLoaderFeatures->MagicNum==OTA_MAGIC_NUM) {
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <CheckBootLoaderCompliance+0xf8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a1e      	ldr	r2, [pc, #120]	; (8004ae0 <CheckBootLoaderCompliance+0x108>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d110      	bne.n	8004a8c <CheckBootLoaderCompliance+0xb4>
    OTA_PRINTF("\tMagicNum    OK\r\n");
 8004a6a:	481e      	ldr	r0, [pc, #120]	; (8004ae4 <CheckBootLoaderCompliance+0x10c>)
 8004a6c:	f00c fc5a 	bl	8011324 <puts>
  } else {
    OTA_PRINTF("\tMagicNum    KO\r\n");
    return 0;
  }

  OTA_PRINTF("\tMaxSize =%lx\r\n", (long)BootLoaderFeatures->OTAMaxSize);
 8004a70:	4b17      	ldr	r3, [pc, #92]	; (8004ad0 <CheckBootLoaderCompliance+0xf8>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	4619      	mov	r1, r3
 8004a78:	481b      	ldr	r0, [pc, #108]	; (8004ae8 <CheckBootLoaderCompliance+0x110>)
 8004a7a:	f00c fbed 	bl	8011258 <iprintf>

  if(BootLoaderFeatures->OTAStartAdd==(OTA_ADDRESS_START-16)) {
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <CheckBootLoaderCompliance+0xf8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	4a19      	ldr	r2, [pc, #100]	; (8004aec <CheckBootLoaderCompliance+0x114>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d10f      	bne.n	8004aaa <CheckBootLoaderCompliance+0xd2>
 8004a8a:	e004      	b.n	8004a96 <CheckBootLoaderCompliance+0xbe>
    OTA_PRINTF("\tMagicNum    KO\r\n");
 8004a8c:	4818      	ldr	r0, [pc, #96]	; (8004af0 <CheckBootLoaderCompliance+0x118>)
 8004a8e:	f00c fc49 	bl	8011324 <puts>
    return 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	e017      	b.n	8004ac6 <CheckBootLoaderCompliance+0xee>
    OTA_PRINTF("\tOTAStartAdd OK\r\n");
 8004a96:	4817      	ldr	r0, [pc, #92]	; (8004af4 <CheckBootLoaderCompliance+0x11c>)
 8004a98:	f00c fc44 	bl	8011324 <puts>
  } else {
    OTA_PRINTF("\tOTAStartAdd KO\r\n");
    return 0;
  }

  if(BootLoaderFeatures->OTADoneAdd==OTA_MAGIC_DONE_NUM_POS) {
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <CheckBootLoaderCompliance+0xf8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <CheckBootLoaderCompliance+0x120>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d10a      	bne.n	8004abe <CheckBootLoaderCompliance+0xe6>
 8004aa8:	e004      	b.n	8004ab4 <CheckBootLoaderCompliance+0xdc>
    OTA_PRINTF("\tOTAStartAdd KO\r\n");
 8004aaa:	4814      	ldr	r0, [pc, #80]	; (8004afc <CheckBootLoaderCompliance+0x124>)
 8004aac:	f00c fc3a 	bl	8011324 <puts>
    return 0;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	e008      	b.n	8004ac6 <CheckBootLoaderCompliance+0xee>
    OTA_PRINTF("\tOTADoneAdd  OK\r\n");
 8004ab4:	4812      	ldr	r0, [pc, #72]	; (8004b00 <CheckBootLoaderCompliance+0x128>)
 8004ab6:	f00c fc35 	bl	8011324 <puts>
  } else {
    OTA_PRINTF("\tOTADoneAdd  KO\r\n");
    return 0;
  }

  return 1;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e003      	b.n	8004ac6 <CheckBootLoaderCompliance+0xee>
    OTA_PRINTF("\tOTADoneAdd  KO\r\n");
 8004abe:	4811      	ldr	r0, [pc, #68]	; (8004b04 <CheckBootLoaderCompliance+0x12c>)
 8004ac0:	f00c fc30 	bl	8011324 <puts>
    return 0;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	080124e4 	.word	0x080124e4
 8004ad0:	20000004 	.word	0x20000004
 8004ad4:	08012504 	.word	0x08012504
 8004ad8:	0801251c 	.word	0x0801251c
 8004adc:	08012530 	.word	0x08012530
 8004ae0:	deadbeef 	.word	0xdeadbeef
 8004ae4:	08012544 	.word	0x08012544
 8004ae8:	0801256c 	.word	0x0801256c
 8004aec:	08080000 	.word	0x08080000
 8004af0:	08012558 	.word	0x08012558
 8004af4:	0801257c 	.word	0x0801257c
 8004af8:	08080008 	.word	0x08080008
 8004afc:	08012590 	.word	0x08012590
 8004b00:	080125a4 	.word	0x080125a4
 8004b04:	080125b8 	.word	0x080125b8

08004b08 <UpdateFWBlueNRG>:
 * @param int32_t data_length length of the data
 * @param uint8_t WriteMagicNum 1/0 for writing or not the magic number
 * @retval int8_t Return value for checking purpouse (1/-1 == Ok/Error)
 */
int8_t UpdateFWBlueNRG(uint32_t *SizeOfUpdate,uint8_t * att_data, int32_t data_length,uint8_t WriteMagicNum)
{
 8004b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b0c:	b094      	sub	sp, #80	; 0x50
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	60f8      	str	r0, [r7, #12]
 8004b12:	60b9      	str	r1, [r7, #8]
 8004b14:	607a      	str	r2, [r7, #4]
 8004b16:	70fb      	strb	r3, [r7, #3]
  int8_t ReturnValue=0;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  /* Save the Packed received */

  if(data_length>(*SizeOfUpdate)){
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d20d      	bcs.n	8004b44 <UpdateFWBlueNRG+0x3c>
    /* Too many bytes...Something wrong... necessity to send it again... */
    OTA_PRINTF("OTA something wrong data_length=%ld RemSizeOfUpdate=%ld....\r\nPlease Try again\r\n", (long)data_length, (long)(*SizeOfUpdate));
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4876      	ldr	r0, [pc, #472]	; (8004d0c <UpdateFWBlueNRG+0x204>)
 8004b32:	f00c fb91 	bl	8011258 <iprintf>
    ReturnValue = -1;
 8004b36:	23ff      	movs	r3, #255	; 0xff
 8004b38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    /* Reset for Restarting again */
    *SizeOfUpdate=0;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e0db      	b.n	8004cfc <UpdateFWBlueNRG+0x1f4>
  } else {
    uint64_t ValueToWrite;
    int32_t Counter;
    /* Save the received OTA packed ad save it to flash */
    /* Unlock the Flash to enable the flash control register access *************/
    HAL_FLASH_Unlock();
 8004b44:	f005 fed0 	bl	800a8e8 <HAL_FLASH_Unlock>

    for(Counter=0;Counter<data_length;Counter+=8) {
 8004b48:	2300      	movs	r3, #0
 8004b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b4c:	e020      	b.n	8004b90 <UpdateFWBlueNRG+0x88>
      memcpy((uint8_t*) &ValueToWrite,att_data+Counter,data_length-Counter+1);
 8004b4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	18d1      	adds	r1, r2, r3
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b62:	4618      	mov	r0, r3
 8004b64:	f00c fd6a 	bl	801163c <memcpy>

      if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WritingAddress,ValueToWrite)==HAL_OK) {
 8004b68:	4b69      	ldr	r3, [pc, #420]	; (8004d10 <UpdateFWBlueNRG+0x208>)
 8004b6a:	6819      	ldr	r1, [r3, #0]
 8004b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b70:	2000      	movs	r0, #0
 8004b72:	f005 fe4d 	bl	800a810 <HAL_FLASH_Program>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d105      	bne.n	8004b88 <UpdateFWBlueNRG+0x80>
       WritingAddress+=8;
 8004b7c:	4b64      	ldr	r3, [pc, #400]	; (8004d10 <UpdateFWBlueNRG+0x208>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3308      	adds	r3, #8
 8004b82:	4a63      	ldr	r2, [pc, #396]	; (8004d10 <UpdateFWBlueNRG+0x208>)
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e000      	b.n	8004b8a <UpdateFWBlueNRG+0x82>
      } else {
        /* Error occurred while writing data in Flash memory.
           User can add here some code to deal with this error
           FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
        OTA_ERROR_FUNCTION();
 8004b88:	e7fe      	b.n	8004b88 <UpdateFWBlueNRG+0x80>
    for(Counter=0;Counter<data_length;Counter+=8) {
 8004b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b8c:	3308      	adds	r3, #8
 8004b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	dbda      	blt.n	8004b4e <UpdateFWBlueNRG+0x46>
      }
    }
    /* Reduce the remaining bytes for OTA completion */
    *SizeOfUpdate -= data_length;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1ad2      	subs	r2, r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	601a      	str	r2, [r3, #0]

    if(*SizeOfUpdate==0) {
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f040 80a5 	bne.w	8004cf8 <UpdateFWBlueNRG+0x1f0>
      /* We had received the whole firmware and we have saved it in Flash */
      OTA_PRINTF("OTA Update saved\r\n");
 8004bae:	4859      	ldr	r0, [pc, #356]	; (8004d14 <UpdateFWBlueNRG+0x20c>)
 8004bb0:	f00c fbb8 	bl	8011324 <puts>

      if(WriteMagicNum) {
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 809e 	beq.w	8004cf8 <UpdateFWBlueNRG+0x1f0>
        uint32_t uwCRCValue = 0;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	647b      	str	r3, [r7, #68]	; 0x44

        if(AspecteduwCRCValue) {
 8004bc0:	4b55      	ldr	r3, [pc, #340]	; (8004d18 <UpdateFWBlueNRG+0x210>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d03e      	beq.n	8004c46 <UpdateFWBlueNRG+0x13e>
          /* Make the CRC integrity check */
          /* CRC handler declaration */
          CRC_HandleTypeDef   CrcHandle;

          /* Init CRC for OTA-integrity check */
          CrcHandle.Instance = CRC;
 8004bc8:	4b54      	ldr	r3, [pc, #336]	; (8004d1c <UpdateFWBlueNRG+0x214>)
 8004bca:	617b      	str	r3, [r7, #20]
          /* The default polynomial is used */
          CrcHandle.Init.DefaultPolynomialUse    = DEFAULT_POLYNOMIAL_ENABLE;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	763b      	strb	r3, [r7, #24]

          /* The default init value is used */
          CrcHandle.Init.DefaultInitValueUse     = DEFAULT_INIT_VALUE_ENABLE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	767b      	strb	r3, [r7, #25]

          /* The input data are not inverted */
          CrcHandle.Init.InputDataInversionMode  = CRC_INPUTDATA_INVERSION_NONE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	62bb      	str	r3, [r7, #40]	; 0x28

          /* The output data are not inverted */
          CrcHandle.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	62fb      	str	r3, [r7, #44]	; 0x2c

          /* The input data are 32-bit long words */
          CrcHandle.InputDataFormat              = CRC_INPUTDATA_FORMAT_WORDS;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	637b      	str	r3, [r7, #52]	; 0x34

          if(HAL_CRC_GetState(&CrcHandle) != HAL_CRC_STATE_RESET) {
 8004be0:	f107 0314 	add.w	r3, r7, #20
 8004be4:	4618      	mov	r0, r3
 8004be6:	f005 fc59 	bl	800a49c <HAL_CRC_GetState>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <UpdateFWBlueNRG+0xf2>
            HAL_CRC_DeInit(&CrcHandle);
 8004bf0:	f107 0314 	add.w	r3, r7, #20
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f005 fbd5 	bl	800a3a4 <HAL_CRC_DeInit>
          }

          if (HAL_CRC_Init(&CrcHandle) != HAL_OK) {
 8004bfa:	f107 0314 	add.w	r3, r7, #20
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f005 fb6c 	bl	800a2dc <HAL_CRC_Init>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d000      	beq.n	8004c0c <UpdateFWBlueNRG+0x104>
            /* Initialization Error */
            OTA_ERROR_FUNCTION();
 8004c0a:	e7fe      	b.n	8004c0a <UpdateFWBlueNRG+0x102>
          } else {
            OTA_PRINTF("CRC  Initialized\n\r");
 8004c0c:	4844      	ldr	r0, [pc, #272]	; (8004d20 <UpdateFWBlueNRG+0x218>)
 8004c0e:	f00c fb23 	bl	8011258 <iprintf>
          }
          /* Compute the CRC */
          uwCRCValue = HAL_CRC_Calculate(&CrcHandle, (uint32_t *)OTA_ADDRESS_START, SizeOfUpdateBlueFW>>2);
 8004c12:	4b44      	ldr	r3, [pc, #272]	; (8004d24 <UpdateFWBlueNRG+0x21c>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	089a      	lsrs	r2, r3, #2
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	4942      	ldr	r1, [pc, #264]	; (8004d28 <UpdateFWBlueNRG+0x220>)
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f005 fbf0 	bl	800a404 <HAL_CRC_Calculate>
 8004c24:	6478      	str	r0, [r7, #68]	; 0x44

          if(uwCRCValue==AspecteduwCRCValue) {
 8004c26:	4b3c      	ldr	r3, [pc, #240]	; (8004d18 <UpdateFWBlueNRG+0x210>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d106      	bne.n	8004c3e <UpdateFWBlueNRG+0x136>
            ReturnValue=1;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            OTA_PRINTF("OTA CRC-checked\r\n");
 8004c36:	483d      	ldr	r0, [pc, #244]	; (8004d2c <UpdateFWBlueNRG+0x224>)
 8004c38:	f00c fb74 	bl	8011324 <puts>
 8004c3c:	e006      	b.n	8004c4c <UpdateFWBlueNRG+0x144>
          } else {
            OTA_PRINTF("OTA Error CRC-checking\r\n");
 8004c3e:	483c      	ldr	r0, [pc, #240]	; (8004d30 <UpdateFWBlueNRG+0x228>)
 8004c40:	f00c fb70 	bl	8011324 <puts>
 8004c44:	e002      	b.n	8004c4c <UpdateFWBlueNRG+0x144>
          }
        } else {
          ReturnValue=1;
 8004c46:	2301      	movs	r3, #1
 8004c48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

        }
        if(ReturnValue==1) {
 8004c4c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d143      	bne.n	8004cdc <UpdateFWBlueNRG+0x1d4>
          /* We write the Magic number for making the OTA at the next Board reset and the size of Update*/
          WritingAddress = OTA_MAGIC_NUM_POS;
 8004c54:	4b2e      	ldr	r3, [pc, #184]	; (8004d10 <UpdateFWBlueNRG+0x208>)
 8004c56:	4a37      	ldr	r2, [pc, #220]	; (8004d34 <UpdateFWBlueNRG+0x22c>)
 8004c58:	601a      	str	r2, [r3, #0]
          ValueToWrite=(((uint64_t)SizeOfUpdateBlueFW)<<32)| (OTA_MAGIC_NUM);
 8004c5a:	4b32      	ldr	r3, [pc, #200]	; (8004d24 <UpdateFWBlueNRG+0x21c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	469a      	mov	sl, r3
 8004c62:	4693      	mov	fp, r2
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	4653      	mov	r3, sl
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f042 445e 	orr.w	r4, r2, #3724541952	; 0xde000000
 8004c74:	f444 042d 	orr.w	r4, r4, #11337728	; 0xad0000
 8004c78:	f444 443e 	orr.w	r4, r4, #48640	; 0xbe00
 8004c7c:	f044 04ef 	orr.w	r4, r4, #239	; 0xef
 8004c80:	461d      	mov	r5, r3
 8004c82:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38

          if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WritingAddress,ValueToWrite)!=HAL_OK) {
 8004c86:	4b22      	ldr	r3, [pc, #136]	; (8004d10 <UpdateFWBlueNRG+0x208>)
 8004c88:	6819      	ldr	r1, [r3, #0]
 8004c8a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f005 fdbe 	bl	800a810 <HAL_FLASH_Program>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d000      	beq.n	8004c9c <UpdateFWBlueNRG+0x194>
            /* Error occurred while writing data in Flash memory.
               User can add here some code to deal with this error
               FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
            OTA_ERROR_FUNCTION();
 8004c9a:	e7fe      	b.n	8004c9a <UpdateFWBlueNRG+0x192>
          } else {
            WritingAddress = OTA_MAGIC_NUM_POS+8;
 8004c9c:	4b1c      	ldr	r3, [pc, #112]	; (8004d10 <UpdateFWBlueNRG+0x208>)
 8004c9e:	4a26      	ldr	r2, [pc, #152]	; (8004d38 <UpdateFWBlueNRG+0x230>)
 8004ca0:	601a      	str	r2, [r3, #0]
            /* Destination WritingAddress and HeaderSize==0 */
            ValueToWrite=((((uint64_t)(BootLoaderFeatures->ProgStartAdd))<<32)| (0x00));
 8004ca2:	4b26      	ldr	r3, [pc, #152]	; (8004d3c <UpdateFWBlueNRG+0x234>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695b      	ldr	r3, [r3, #20]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4698      	mov	r8, r3
 8004cac:	4691      	mov	r9, r2
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	4643      	mov	r3, r8
 8004cb8:	2200      	movs	r2, #0
 8004cba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, WritingAddress,ValueToWrite)!=HAL_OK) {
 8004cbe:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <UpdateFWBlueNRG+0x208>)
 8004cc0:	6819      	ldr	r1, [r3, #0]
 8004cc2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	f005 fda2 	bl	800a810 <HAL_FLASH_Program>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d000      	beq.n	8004cd4 <UpdateFWBlueNRG+0x1cc>
              /* Error occurred while writing data in Flash memory.
                 User can add here some code to deal with this error
                 FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
              OTA_ERROR_FUNCTION();
 8004cd2:	e7fe      	b.n	8004cd2 <UpdateFWBlueNRG+0x1ca>
            } else {
              OTA_PRINTF("OTA will be installed at next board reset\r\n");
 8004cd4:	481a      	ldr	r0, [pc, #104]	; (8004d40 <UpdateFWBlueNRG+0x238>)
 8004cd6:	f00c fb25 	bl	8011324 <puts>
 8004cda:	e00d      	b.n	8004cf8 <UpdateFWBlueNRG+0x1f0>
            }
          }
        } else {
          ReturnValue=-1;
 8004cdc:	23ff      	movs	r3, #255	; 0xff
 8004cde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          if(AspecteduwCRCValue) {
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <UpdateFWBlueNRG+0x210>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d006      	beq.n	8004cf8 <UpdateFWBlueNRG+0x1f0>
            OTA_PRINTF("Wrong CRC! Computed=%lx  expected=%lx ... Try again\r\n", (long)uwCRCValue, (long)AspecteduwCRCValue);
 8004cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cec:	4a0a      	ldr	r2, [pc, #40]	; (8004d18 <UpdateFWBlueNRG+0x210>)
 8004cee:	6812      	ldr	r2, [r2, #0]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4814      	ldr	r0, [pc, #80]	; (8004d44 <UpdateFWBlueNRG+0x23c>)
 8004cf4:	f00c fab0 	bl	8011258 <iprintf>
      }
    }

    /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
    HAL_FLASH_Lock();
 8004cf8:	f005 fe18 	bl	800a92c <HAL_FLASH_Lock>
  }
  return ReturnValue;
 8004cfc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3750      	adds	r7, #80	; 0x50
 8004d04:	46bd      	mov	sp, r7
 8004d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d0a:	bf00      	nop
 8004d0c:	080125cc 	.word	0x080125cc
 8004d10:	20000000 	.word	0x20000000
 8004d14:	0801261c 	.word	0x0801261c
 8004d18:	200000c8 	.word	0x200000c8
 8004d1c:	40023000 	.word	0x40023000
 8004d20:	08012630 	.word	0x08012630
 8004d24:	200000c4 	.word	0x200000c4
 8004d28:	08080010 	.word	0x08080010
 8004d2c:	08012644 	.word	0x08012644
 8004d30:	08012658 	.word	0x08012658
 8004d34:	08080000 	.word	0x08080000
 8004d38:	08080008 	.word	0x08080008
 8004d3c:	20000004 	.word	0x20000004
 8004d40:	08012670 	.word	0x08012670
 8004d44:	0801269c 	.word	0x0801269c

08004d48 <StartUpdateFWBlueNRG>:
 * @param uint32_t SizeOfUpdate  size of the firmware image [bytes]
 * @param uint32_t uwCRCValue expected CRV value
 * @retval None
 */
void StartUpdateFWBlueNRG(uint32_t SizeOfUpdate, uint32_t uwCRCValue)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t SectorError = 0;
 8004d52:	2300      	movs	r3, #0
 8004d54:	60fb      	str	r3, [r7, #12]
  OTA_PRINTF("Start FLASH Erase\r\n");
 8004d56:	481b      	ldr	r0, [pc, #108]	; (8004dc4 <StartUpdateFWBlueNRG+0x7c>)
 8004d58:	f00c fae4 	bl	8011324 <puts>

  SizeOfUpdateBlueFW = SizeOfUpdate;
 8004d5c:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <StartUpdateFWBlueNRG+0x80>)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6013      	str	r3, [r2, #0]
  AspecteduwCRCValue = uwCRCValue;
 8004d62:	4a1a      	ldr	r2, [pc, #104]	; (8004dcc <StartUpdateFWBlueNRG+0x84>)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	6013      	str	r3, [r2, #0]
  WritingAddress = OTA_ADDRESS_START;
 8004d68:	4b19      	ldr	r3, [pc, #100]	; (8004dd0 <StartUpdateFWBlueNRG+0x88>)
 8004d6a:	4a1a      	ldr	r2, [pc, #104]	; (8004dd4 <StartUpdateFWBlueNRG+0x8c>)
 8004d6c:	601a      	str	r2, [r3, #0]

  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	613b      	str	r3, [r7, #16]
  EraseInitStruct.Banks       = GetBank(OTA_MAGIC_NUM_POS);
 8004d72:	4819      	ldr	r0, [pc, #100]	; (8004dd8 <StartUpdateFWBlueNRG+0x90>)
 8004d74:	f003 fbf4 	bl	8008560 <GetBank>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	617b      	str	r3, [r7, #20]
  EraseInitStruct.Page        = GetPage(OTA_MAGIC_NUM_POS);
 8004d7c:	4816      	ldr	r0, [pc, #88]	; (8004dd8 <StartUpdateFWBlueNRG+0x90>)
 8004d7e:	f003 fbad 	bl	80084dc <GetPage>
 8004d82:	4603      	mov	r3, r0
 8004d84:	61bb      	str	r3, [r7, #24]
  EraseInitStruct.NbPages     = (SizeOfUpdate+16+FLASH_PAGE_SIZE-1)/FLASH_PAGE_SIZE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f603 030f 	addw	r3, r3, #2063	; 0x80f
 8004d8c:	0adb      	lsrs	r3, r3, #11
 8004d8e:	61fb      	str	r3, [r7, #28]

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8004d90:	f005 fdaa 	bl	800a8e8 <HAL_FLASH_Unlock>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PEMPTY) != 0) {
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PEMPTY);
  }
#endif /* STM32L4R9xx */

  if(HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError) != HAL_OK){
 8004d94:	f107 020c 	add.w	r2, r7, #12
 8004d98:	f107 0310 	add.w	r3, r7, #16
 8004d9c:	4611      	mov	r1, r2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f005 fe86 	bl	800aab0 <HAL_FLASHEx_Erase>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d000      	beq.n	8004dac <StartUpdateFWBlueNRG+0x64>
    /* Error occurred while sector erase.
      User can add here some code to deal with this error.
      SectorError will contain the faulty sector and then to know the code error on this sector,
      user can call function 'HAL_FLASH_GetError()'
      FLASH_ErrorTypeDef errorcode = HAL_FLASH_GetError(); */
    OTA_ERROR_FUNCTION();
 8004daa:	e7fe      	b.n	8004daa <StartUpdateFWBlueNRG+0x62>
  } else {
    OTA_PRINTF("End FLASH Erase %ld Pages of 4KB\r\n", (long)EraseInitStruct.NbPages);
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	4619      	mov	r1, r3
 8004db0:	480a      	ldr	r0, [pc, #40]	; (8004ddc <StartUpdateFWBlueNRG+0x94>)
 8004db2:	f00c fa51 	bl	8011258 <iprintf>
  }

  /* Lock the Flash to disable the flash control register access (recommended
  to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8004db6:	f005 fdb9 	bl	800a92c <HAL_FLASH_Lock>
}
 8004dba:	bf00      	nop
 8004dbc:	3720      	adds	r7, #32
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	080126d4 	.word	0x080126d4
 8004dc8:	200000c4 	.word	0x200000c4
 8004dcc:	200000c8 	.word	0x200000c8
 8004dd0:	20000000 	.word	0x20000000
 8004dd4:	08080010 	.word	0x08080010
 8004dd8:	08080000 	.word	0x08080000
 8004ddc:	080126e8 	.word	0x080126e8

08004de0 <MX_BlueNRG_2_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_2_Init(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
  /* USER CODE END BlueNRG_2_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  uint8_t ret;

  User_Init();
 8004de6:	f000 f829 	bl	8004e3c <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8004dea:	2000      	movs	r0, #0
 8004dec:	f003 fcec 	bl	80087c8 <BSP_PB_GetState>
 8004df0:	4603      	mov	r3, r0
 8004df2:	b2da      	uxtb	r2, r3
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <MX_BlueNRG_2_Init+0x44>)
 8004df6:	701a      	strb	r2, [r3, #0]

  hci_init(APP_UserEvtRx, NULL);
 8004df8:	2100      	movs	r1, #0
 8004dfa:	480b      	ldr	r0, [pc, #44]	; (8004e28 <MX_BlueNRG_2_Init+0x48>)
 8004dfc:	f00b fd76 	bl	80108ec <hci_init>
  PRINT_DBG("\033[2J"); /* serial console clear screen */
  PRINT_DBG("\033[H");  /* serial console cursor to home */
  PRINT_DBG("BlueNRG-2 SensorDemo_BLESensor-App Application\r\n");

  /* Init Sensor Device */
  ret = Sensor_DeviceInit();
 8004e00:	f000 f82a 	bl	8004e58 <Sensor_DeviceInit>
 8004e04:	4603      	mov	r3, r0
 8004e06:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS)
 8004e08:	79fb      	ldrb	r3, [r7, #7]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <MX_BlueNRG_2_Init+0x36>
  {
    BSP_LED_On(LED2);
 8004e0e:	2000      	movs	r0, #0
 8004e10:	f003 fc06 	bl	8008620 <BSP_LED_On>
    PRINT_DBG("SensorDeviceInit()--> Failed 0x%02x\r\n", ret);
    while(1);
 8004e14:	e7fe      	b.n	8004e14 <MX_BlueNRG_2_Init+0x34>

  PRINT_DBG("BLE Stack Initialized & Device Configured\r\n");

#ifdef STM32L476xx
  /* Check the BootLoader Compliance */
  if (CheckBootLoaderCompliance()) {
 8004e16:	f7ff fddf 	bl	80049d8 <CheckBootLoaderCompliance>
#endif /* STM32L476xx */

  /* USER CODE BEGIN BlueNRG_2_Init_PostTreatment */

  /* USER CODE END BlueNRG_2_Init_PostTreatment */
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20000008 	.word	0x20000008
 8004e28:	08007e31 	.word	0x08007e31

08004e2c <MX_BlueNRG_2_Process>:

/*
 * BlueNRG-2 background task
 */
void MX_BlueNRG_2_Process(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_2_Process_PreTreatment */

  /* USER CODE END BlueNRG_2_Process_PreTreatment */

  hci_user_evt_proc();
 8004e30:	f00b fed6 	bl	8010be0 <hci_user_evt_proc>
  User_Process();
 8004e34:	f000 f8b6 	bl	8004fa4 <User_Process>

  /* USER CODE BEGIN BlueNRG_2_Process_PostTreatment */

  /* USER CODE END BlueNRG_2_Process_PostTreatment */
}
 8004e38:	bf00      	nop
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8004e40:	2101      	movs	r1, #1
 8004e42:	2000      	movs	r0, #0
 8004e44:	f003 fc6c 	bl	8008720 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8004e48:	2000      	movs	r0, #0
 8004e4a:	f003 fbd7 	bl	80085fc <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8004e4e:	2000      	movs	r0, #0
 8004e50:	f003 fd18 	bl	8008884 <BSP_COM_Init>
}
 8004e54:	bf00      	nop
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <Sensor_DeviceInit>:
 *
 * @param  None
 * @retval None
 */
uint8_t Sensor_DeviceInit(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08c      	sub	sp, #48	; 0x30
 8004e5c:	af06      	add	r7, sp, #24
  uint8_t ret;
  uint16_t service_handle, dev_name_char_handle, appearance_char_handle;
  uint8_t device_name[] = {SENSOR_DEMO_NAME};
 8004e5e:	4a4e      	ldr	r2, [pc, #312]	; (8004f98 <Sensor_DeviceInit+0x140>)
 8004e60:	f107 0308 	add.w	r3, r7, #8
 8004e64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004e68:	6018      	str	r0, [r3, #0]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	8019      	strh	r1, [r3, #0]
 8004e6e:	3302      	adds	r3, #2
 8004e70:	0c0a      	lsrs	r2, r1, #16
 8004e72:	701a      	strb	r2, [r3, #0]
  uint8_t  hwVersion;
  uint16_t fwVersion;
  uint8_t  bdaddr_len_out;
  uint8_t  config_data_stored_static_random_address = 0x80; /* Offset of the static random address stored in NVM */
 8004e74:	2380      	movs	r3, #128	; 0x80
 8004e76:	75fb      	strb	r3, [r7, #23]

  /* Sw reset of the device */
  hci_reset();
 8004e78:	f00b fbb6 	bl	80105e8 <hci_reset>
  /**
   *  To support both the BlueNRG-2 and the BlueNRG-2N a minimum delay of 2000ms is required at device boot
   */
  HAL_Delay(2000);
 8004e7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004e80:	f003 fe9e 	bl	8008bc0 <HAL_Delay>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8004e84:	1d3a      	adds	r2, r7, #4
 8004e86:	1dfb      	adds	r3, r7, #7
 8004e88:	4611      	mov	r1, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f001 fa9e 	bl	80063cc <getBlueNRGVersion>

  PRINT_DBG("HWver %d\nFWver %d\r\n", hwVersion, fwVersion);

  ret = aci_hal_read_config_data(config_data_stored_static_random_address,
 8004e90:	1cf9      	adds	r1, r7, #3
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	4a41      	ldr	r2, [pc, #260]	; (8004f9c <Sensor_DeviceInit+0x144>)
 8004e96:	4618      	mov	r0, r3
 8004e98:	f009 ff17 	bl	800ecca <aci_hal_read_config_data>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	75bb      	strb	r3, [r7, #22]

  if (ret) {
    PRINT_DBG("Read Static Random address failed.\r\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 8004ea0:	4b3e      	ldr	r3, [pc, #248]	; (8004f9c <Sensor_DeviceInit+0x144>)
 8004ea2:	795b      	ldrb	r3, [r3, #5]
 8004ea4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ea8:	2bc0      	cmp	r3, #192	; 0xc0
 8004eaa:	d000      	beq.n	8004eae <Sensor_DeviceInit+0x56>
    PRINT_DBG("Static Random address not well formed.\r\n");
    while(1);
 8004eac:	e7fe      	b.n	8004eac <Sensor_DeviceInit+0x54>
  }

  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	4a3a      	ldr	r2, [pc, #232]	; (8004f9c <Sensor_DeviceInit+0x144>)
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f009 fe7a 	bl	800ebae <aci_hal_write_config_data>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	75bb      	strb	r3, [r7, #22]
  else {
    PRINT_DBG("aci_hal_write_config_data --> SUCCESS\r\n");
  }

  /* Set the TX power -2 dBm */
  aci_hal_set_tx_power_level(1, 4);
 8004ebe:	2104      	movs	r1, #4
 8004ec0:	2001      	movs	r0, #1
 8004ec2:	f009 ff86 	bl	800edd2 <aci_hal_set_tx_power_level>
  else {
    PRINT_DBG("aci_hal_set_tx_power_level --> SUCCESS\r\n");
  }

  /* GATT Init */
  ret = aci_gatt_init();
 8004ec6:	f009 fb00 	bl	800e4ca <aci_gatt_init>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	75bb      	strb	r3, [r7, #22]
  if (ret != BLE_STATUS_SUCCESS) {
 8004ece:	7dbb      	ldrb	r3, [r7, #22]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <Sensor_DeviceInit+0x80>
    PRINT_DBG("aci_gatt_init() failed: 0x%02x\r\n", ret);
    return ret;
 8004ed4:	7dbb      	ldrb	r3, [r7, #22]
 8004ed6:	e05b      	b.n	8004f90 <Sensor_DeviceInit+0x138>
  else {
    PRINT_DBG("aci_gatt_init() --> SUCCESS\r\n");
  }

  /* GAP Init */
  ret = aci_gap_init(GAP_PERIPHERAL_ROLE, 0x00, 0x07, &service_handle, &dev_name_char_handle,
 8004ed8:	f107 0214 	add.w	r2, r7, #20
 8004edc:	f107 0310 	add.w	r3, r7, #16
 8004ee0:	9301      	str	r3, [sp, #4]
 8004ee2:	f107 0312 	add.w	r3, r7, #18
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	2207      	movs	r2, #7
 8004eec:	2100      	movs	r1, #0
 8004eee:	2001      	movs	r0, #1
 8004ef0:	f009 f93a 	bl	800e168 <aci_gap_init>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75bb      	strb	r3, [r7, #22]
                     &appearance_char_handle);
  if (ret != BLE_STATUS_SUCCESS) {
 8004ef8:	7dbb      	ldrb	r3, [r7, #22]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <Sensor_DeviceInit+0xaa>
    PRINT_DBG("aci_gap_init() failed: 0x%02x\r\n", ret);
    return ret;
 8004efe:	7dbb      	ldrb	r3, [r7, #22]
 8004f00:	e046      	b.n	8004f90 <Sensor_DeviceInit+0x138>
  else {
    PRINT_DBG("aci_gap_init() --> SUCCESS\r\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, sizeof(device_name),
 8004f02:	8ab8      	ldrh	r0, [r7, #20]
 8004f04:	8a79      	ldrh	r1, [r7, #18]
 8004f06:	f107 0308 	add.w	r3, r7, #8
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2307      	movs	r3, #7
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f009 fce3 	bl	800e8da <aci_gatt_update_char_value>
 8004f14:	4603      	mov	r3, r0
 8004f16:	75bb      	strb	r3, [r7, #22]
                                   device_name);
  if (ret != BLE_STATUS_SUCCESS) {
 8004f18:	7dbb      	ldrb	r3, [r7, #22]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <Sensor_DeviceInit+0xca>
    PRINT_DBG("aci_gatt_update_char_value() failed: 0x%02x\r\n", ret);
    return ret;
 8004f1e:	7dbb      	ldrb	r3, [r7, #22]
 8004f20:	e036      	b.n	8004f90 <Sensor_DeviceInit+0x138>

  /*
   * Clear security database: this implies that each time the application is executed
   * the full bonding process is executed (with PassKey generation and setting).
   */
  ret = aci_gap_clear_security_db();
 8004f22:	f009 faa9 	bl	800e478 <aci_gap_clear_security_db>
 8004f26:	4603      	mov	r3, r0
 8004f28:	75bb      	strb	r3, [r7, #22]

  /*
   * Set the I/O capability otherwise the Central device (e.g. the smartphone) will
   * propose a PIN that will be accepted without any control.
   */
  if (aci_gap_set_io_capability(IO_CAP_DISPLAY_ONLY)==BLE_STATUS_SUCCESS) {
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	f008 ff82 	bl	800de34 <aci_gap_set_io_capability>
  } else {
    PRINT_DBG("Error Setting I/O Capability\r\n");
  }

  /* BLE Security v4.2 is supported: BLE stack FW version >= 2.x (new API prototype) */
  ret = aci_gap_set_authentication_requirement(BONDING,
 8004f30:	2300      	movs	r3, #0
 8004f32:	9304      	str	r3, [sp, #16]
 8004f34:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <Sensor_DeviceInit+0x148>)
 8004f36:	9303      	str	r3, [sp, #12]
 8004f38:	2301      	movs	r3, #1
 8004f3a:	9302      	str	r3, [sp, #8]
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	2307      	movs	r3, #7
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	2300      	movs	r3, #0
 8004f46:	2201      	movs	r2, #1
 8004f48:	2101      	movs	r1, #1
 8004f4a:	2001      	movs	r0, #1
 8004f4c:	f008 ffcf 	bl	800deee <aci_gap_set_authentication_requirement>
 8004f50:	4603      	mov	r3, r0
 8004f52:	75bb      	strb	r3, [r7, #22]
                                               16,
                                               DONOT_USE_FIXED_PIN_FOR_PAIRING,
                                               PERIPHERAL_PASS_KEY,
                                               0x00); /* - 0x00: Public Identity Address
                                                         - 0x01: Random (static) Identity Address */
  if (ret != BLE_STATUS_SUCCESS) {
 8004f54:	7dbb      	ldrb	r3, [r7, #22]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <Sensor_DeviceInit+0x106>
    PRINT_DBG("aci_gap_set_authentication_requirement()failed: 0x%02x\r\n", ret);
    return ret;
 8004f5a:	7dbb      	ldrb	r3, [r7, #22]
 8004f5c:	e018      	b.n	8004f90 <Sensor_DeviceInit+0x138>
    PRINT_DBG("aci_gap_set_authentication_requirement() --> SUCCESS\r\n");
  }

  PRINT_DBG("BLE Stack Initialized with SUCCESS\r\n");

  ret = Add_HWServW2ST_Service();
 8004f5e:	f001 fb39 	bl	80065d4 <Add_HWServW2ST_Service>
 8004f62:	4603      	mov	r3, r0
 8004f64:	75bb      	strb	r3, [r7, #22]
  if (ret == BLE_STATUS_SUCCESS) {
 8004f66:	7dbb      	ldrb	r3, [r7, #22]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d000      	beq.n	8004f6e <Sensor_DeviceInit+0x116>
    PRINT_DBG("BlueNRG2 HW service added successfully.\r\n");
  }
  else {
    PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
    while(1);
 8004f6c:	e7fe      	b.n	8004f6c <Sensor_DeviceInit+0x114>
  }

  ret = Add_SWServW2ST_Service();
 8004f6e:	f001 fc0b 	bl	8006788 <Add_SWServW2ST_Service>
 8004f72:	4603      	mov	r3, r0
 8004f74:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS) {
 8004f76:	7dbb      	ldrb	r3, [r7, #22]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d000      	beq.n	8004f7e <Sensor_DeviceInit+0x126>
     PRINT_DBG("BlueNRG2 SW service added successfully.\r\n");
  }
  else {
     PRINT_DBG("Error while adding BlueNRG2 HW service: 0x%02x\r\n", ret);
     while(1);
 8004f7c:	e7fe      	b.n	8004f7c <Sensor_DeviceInit+0x124>
  }

#ifdef STM32L476xx
  ret = Add_ConsoleW2ST_Service();
 8004f7e:	f001 fc93 	bl	80068a8 <Add_ConsoleW2ST_Service>
 8004f82:	4603      	mov	r3, r0
 8004f84:	75bb      	strb	r3, [r7, #22]
  if(ret == BLE_STATUS_SUCCESS) {
 8004f86:	7dbb      	ldrb	r3, [r7, #22]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d000      	beq.n	8004f8e <Sensor_DeviceInit+0x136>
     PRINT_DBG("BlueNRG2 Console service added successfully.\r\n");
  }
  else {
     PRINT_DBG("Error while adding BlueNRG2 Console service: 0x%02x\r\n", ret);
     while(1);
 8004f8c:	e7fe      	b.n	8004f8c <Sensor_DeviceInit+0x134>
  }

#endif /* STM32L476xx */
  return BLE_STATUS_SUCCESS;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	0801270c 	.word	0x0801270c
 8004f9c:	200000cc 	.word	0x200000cc
 8004fa0:	0001e240 	.word	0x0001e240

08004fa4 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
  float data_t;
  float data_p;
  static uint32_t counter = 0;

  /* Make the device discoverable */
  if(set_connectable)
 8004faa:	4b4c      	ldr	r3, [pc, #304]	; (80050dc <User_Process+0x138>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d004      	beq.n	8004fbe <User_Process+0x1a>
  {
    Set_DeviceConnectable();
 8004fb4:	f002 fec8 	bl	8007d48 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8004fb8:	4b48      	ldr	r3, [pc, #288]	; (80050dc <User_Process+0x138>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	701a      	strb	r2, [r3, #0]
  }

  if ((connected) && (!pairing))
 8004fbe:	4b48      	ldr	r3, [pc, #288]	; (80050e0 <User_Process+0x13c>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00f      	beq.n	8004fe8 <User_Process+0x44>
 8004fc8:	4b46      	ldr	r3, [pc, #280]	; (80050e4 <User_Process+0x140>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <User_Process+0x44>
  {
    ret = aci_gap_slave_security_req(connection_handle);
 8004fd2:	4b45      	ldr	r3, [pc, #276]	; (80050e8 <User_Process+0x144>)
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f009 f972 	bl	800e2c2 <aci_gap_slave_security_req>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	73fb      	strb	r3, [r7, #15]
      PRINT_DBG("aci_gap_slave_security_req() failed:0x%02x\r\n", ret);
    }
    else {
      PRINT_DBG("aci_gap_slave_security_req --> SUCCESS\r\n");
    }
    pairing = TRUE;
 8004fe2:	4b40      	ldr	r3, [pc, #256]	; (80050e4 <User_Process+0x140>)
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	701a      	strb	r2, [r3, #0]
    HAL_Delay(50);

    BSP_LED_Toggle(LED2);
#endif /* USE_BUTTON */

    if (paired)
 8004fe8:	4b40      	ldr	r3, [pc, #256]	; (80050ec <User_Process+0x148>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d06f      	beq.n	80050d2 <User_Process+0x12e>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 8004ff2:	f003 fdd9 	bl	8008ba8 <HAL_GetTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f00b ff85 	bl	8010f08 <srand>

      if (send_env) {
 8004ffe:	4b3c      	ldr	r3, [pc, #240]	; (80050f0 <User_Process+0x14c>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	b2db      	uxtb	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d02e      	beq.n	8005066 <User_Process+0xc2>
        /* Update emulated Environmental data */
        // Set_Random_Environmental_Values(&data_t, &data_p);
      	data_p = moisture_value;
 8005008:	4b3a      	ldr	r3, [pc, #232]	; (80050f4 <User_Process+0x150>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	ee07 3a90 	vmov	s15, r3
 8005010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005014:	edc7 7a02 	vstr	s15, [r7, #8]
      	data_t = waterlevel_value;
 8005018:	4b37      	ldr	r3, [pc, #220]	; (80050f8 <User_Process+0x154>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	ee07 3a90 	vmov	s15, r3
 8005020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005024:	edc7 7a01 	vstr	s15, [r7, #4]
        Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8005028:	edd7 7a02 	vldr	s15, [r7, #8]
 800502c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80050fc <User_Process+0x158>
 8005030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005034:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8005038:	edd7 7a01 	vldr	s15, [r7, #4]
 800503c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005040:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005048:	ee17 3a90 	vmov	r3, s15
 800504c:	b21b      	sxth	r3, r3
 800504e:	4619      	mov	r1, r3
 8005050:	ee16 0a90 	vmov	r0, s13
 8005054:	f001 fcfa 	bl	8006a4c <Environmental_Update>
#if (!USE_BUTTON)
        BSP_LED_Toggle(LED2);
 8005058:	2000      	movs	r0, #0
 800505a:	f003 fb0d 	bl	8008678 <BSP_LED_Toggle>
        HAL_Delay(1000); /* wait 1 sec before sending new data */
 800505e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005062:	f003 fdad 	bl	8008bc0 <HAL_Delay>
#endif /* (!USE_BUTTON) */
      }

      if ((send_mot) || (send_quat)) {
 8005066:	4b26      	ldr	r3, [pc, #152]	; (8005100 <User_Process+0x15c>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d104      	bne.n	800507a <User_Process+0xd6>
 8005070:	4b24      	ldr	r3, [pc, #144]	; (8005104 <User_Process+0x160>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d02b      	beq.n	80050d2 <User_Process+0x12e>
        /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
        Set_Random_Motion_Values(counter);
 800507a:	4b23      	ldr	r3, [pc, #140]	; (8005108 <User_Process+0x164>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f84c 	bl	800511c <Set_Random_Motion_Values>
        if (send_mot) {
 8005084:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <User_Process+0x15c>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d004      	beq.n	8005098 <User_Process+0xf4>
          Acc_Update(&x_axes, &g_axes, &m_axes);
 800508e:	4a1f      	ldr	r2, [pc, #124]	; (800510c <User_Process+0x168>)
 8005090:	491f      	ldr	r1, [pc, #124]	; (8005110 <User_Process+0x16c>)
 8005092:	4820      	ldr	r0, [pc, #128]	; (8005114 <User_Process+0x170>)
 8005094:	f001 fd20 	bl	8006ad8 <Acc_Update>
        }
        if (send_quat) {
 8005098:	4b1a      	ldr	r3, [pc, #104]	; (8005104 <User_Process+0x160>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <User_Process+0x104>
          Quat_Update(&q_axes);
 80050a2:	481d      	ldr	r0, [pc, #116]	; (8005118 <User_Process+0x174>)
 80050a4:	f001 fda2 	bl	8006bec <Quat_Update>
        }
        counter ++;
 80050a8:	4b17      	ldr	r3, [pc, #92]	; (8005108 <User_Process+0x164>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3301      	adds	r3, #1
 80050ae:	4a16      	ldr	r2, [pc, #88]	; (8005108 <User_Process+0x164>)
 80050b0:	6013      	str	r3, [r2, #0]
        if (counter == 40) {
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <User_Process+0x164>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b28      	cmp	r3, #40	; 0x28
 80050b8:	d104      	bne.n	80050c4 <User_Process+0x120>
          counter = 0;
 80050ba:	4b13      	ldr	r3, [pc, #76]	; (8005108 <User_Process+0x164>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
          Reset_Motion_Values();
 80050c0:	f001 f89a 	bl	80061f8 <Reset_Motion_Values>
        }
#if (!USE_BUTTON)
        BSP_LED_Toggle(LED2);
 80050c4:	2000      	movs	r0, #0
 80050c6:	f003 fad7 	bl	8008678 <BSP_LED_Toggle>
        HAL_Delay(1000); /* wait 1 sec before sending new data */
 80050ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050ce:	f003 fd77 	bl	8008bc0 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif /* USE_BUTTON */
}
 80050d2:	bf00      	nop
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	20000009 	.word	0x20000009
 80050e0:	2000042a 	.word	0x2000042a
 80050e4:	2000042b 	.word	0x2000042b
 80050e8:	20000428 	.word	0x20000428
 80050ec:	2000042c 	.word	0x2000042c
 80050f0:	20000228 	.word	0x20000228
 80050f4:	20000420 	.word	0x20000420
 80050f8:	20000424 	.word	0x20000424
 80050fc:	42c80000 	.word	0x42c80000
 8005100:	20000229 	.word	0x20000229
 8005104:	2000022a 	.word	0x2000022a
 8005108:	200000d4 	.word	0x200000d4
 800510c:	20000448 	.word	0x20000448
 8005110:	2000043c 	.word	0x2000043c
 8005114:	20000430 	.word	0x20000430
 8005118:	20000454 	.word	0x20000454

0800511c <Set_Random_Motion_Values>:
 *
 * @param  uint32_t counter for changing the rotation direction
 * @retval None
 */
static void Set_Random_Motion_Values(uint32_t cnt)
{
 800511c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005120:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 8005124:	af00      	add	r7, sp, #0
 8005126:	f8c7 03e4 	str.w	r0, [r7, #996]	; 0x3e4
  /* Update Acceleration, Gyroscope and Sensor Fusion data */
  if (cnt < 20) {
 800512a:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800512e:	2b13      	cmp	r3, #19
 8005130:	f200 8426 	bhi.w	8005980 <Set_Random_Motion_Values+0x864>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8005134:	f00b ff16 	bl	8010f64 <rand>
 8005138:	4603      	mov	r3, r0
 800513a:	17da      	asrs	r2, r3, #31
 800513c:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 8005140:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
 8005144:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800514e:	f8c7 2324 	str.w	r2, [r7, #804]	; 0x324
 8005152:	e9d7 45ca 	ldrd	r4, r5, [r7, #808]	; 0x328
 8005156:	462b      	mov	r3, r5
 8005158:	e9d7 abc8 	ldrd	sl, fp, [r7, #800]	; 0x320
 800515c:	4652      	mov	r2, sl
 800515e:	fb02 f203 	mul.w	r2, r2, r3
 8005162:	465b      	mov	r3, fp
 8005164:	4621      	mov	r1, r4
 8005166:	fb01 f303 	mul.w	r3, r1, r3
 800516a:	4413      	add	r3, r2
 800516c:	4622      	mov	r2, r4
 800516e:	4651      	mov	r1, sl
 8005170:	fba2 8901 	umull	r8, r9, r2, r1
 8005174:	444b      	add	r3, r9
 8005176:	4699      	mov	r9, r3
 8005178:	4642      	mov	r2, r8
 800517a:	464b      	mov	r3, r9
 800517c:	1891      	adds	r1, r2, r2
 800517e:	66b9      	str	r1, [r7, #104]	; 0x68
 8005180:	415b      	adcs	r3, r3
 8005182:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005184:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005188:	eb12 0108 	adds.w	r1, r2, r8
 800518c:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
 8005190:	eb43 0309 	adc.w	r3, r3, r9
 8005194:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8005198:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	e9d7 01c6 	ldrd	r0, r1, [r7, #792]	; 0x318
 80051a4:	f7ff fa70 	bl	8004688 <__aeabi_uldivmod>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	f112 010a 	adds.w	r1, r2, #10
 80051b0:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80051b4:	f143 0300 	adc.w	r3, r3, #0
 80051b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051bc:	4bec      	ldr	r3, [pc, #944]	; (8005570 <Set_Random_Motion_Values+0x454>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80051c6:	4413      	add	r3, r2
 80051c8:	461a      	mov	r2, r3
 80051ca:	4be9      	ldr	r3, [pc, #932]	; (8005570 <Set_Random_Motion_Values+0x454>)
 80051cc:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80051ce:	f00b fec9 	bl	8010f64 <rand>
 80051d2:	4603      	mov	r3, r0
 80051d4:	17da      	asrs	r2, r3, #31
 80051d6:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80051da:	f8c7 2314 	str.w	r2, [r7, #788]	; 0x314
 80051de:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 80051e8:	f8c7 230c 	str.w	r2, [r7, #780]	; 0x30c
 80051ec:	e9d7 45c4 	ldrd	r4, r5, [r7, #784]	; 0x310
 80051f0:	462b      	mov	r3, r5
 80051f2:	e9d7 89c2 	ldrd	r8, r9, [r7, #776]	; 0x308
 80051f6:	4642      	mov	r2, r8
 80051f8:	fb02 f203 	mul.w	r2, r2, r3
 80051fc:	464b      	mov	r3, r9
 80051fe:	4621      	mov	r1, r4
 8005200:	fb01 f303 	mul.w	r3, r1, r3
 8005204:	4413      	add	r3, r2
 8005206:	4622      	mov	r2, r4
 8005208:	4641      	mov	r1, r8
 800520a:	fba2 1201 	umull	r1, r2, r2, r1
 800520e:	f8c7 23dc 	str.w	r2, [r7, #988]	; 0x3dc
 8005212:	460a      	mov	r2, r1
 8005214:	f8c7 23d8 	str.w	r2, [r7, #984]	; 0x3d8
 8005218:	f8d7 23dc 	ldr.w	r2, [r7, #988]	; 0x3dc
 800521c:	4413      	add	r3, r2
 800521e:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 8005222:	e9d7 45f6 	ldrd	r4, r5, [r7, #984]	; 0x3d8
 8005226:	4622      	mov	r2, r4
 8005228:	462b      	mov	r3, r5
 800522a:	f04f 0000 	mov.w	r0, #0
 800522e:	f04f 0100 	mov.w	r1, #0
 8005232:	0099      	lsls	r1, r3, #2
 8005234:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005238:	0090      	lsls	r0, r2, #2
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4621      	mov	r1, r4
 8005240:	1851      	adds	r1, r2, r1
 8005242:	f8c7 1300 	str.w	r1, [r7, #768]	; 0x300
 8005246:	4629      	mov	r1, r5
 8005248:	eb43 0101 	adc.w	r1, r3, r1
 800524c:	f8c7 1304 	str.w	r1, [r7, #772]	; 0x304
 8005250:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005254:	f04f 0300 	mov.w	r3, #0
 8005258:	e9d7 01c0 	ldrd	r0, r1, [r7, #768]	; 0x300
 800525c:	f7ff fa14 	bl	8004688 <__aeabi_uldivmod>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	f06f 0009 	mvn.w	r0, #9
 8005268:	f04f 31ff 	mov.w	r1, #4294967295
 800526c:	1a80      	subs	r0, r0, r2
 800526e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 8005272:	eb61 0303 	sbc.w	r3, r1, r3
 8005276:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800527a:	4bbd      	ldr	r3, [pc, #756]	; (8005570 <Set_Random_Motion_Values+0x454>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	461a      	mov	r2, r3
 8005280:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005284:	4413      	add	r3, r2
 8005286:	461a      	mov	r2, r3
 8005288:	4bb9      	ldr	r3, [pc, #740]	; (8005570 <Set_Random_Motion_Values+0x454>)
 800528a:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 800528c:	f00b fe6a 	bl	8010f64 <rand>
 8005290:	4603      	mov	r3, r0
 8005292:	17da      	asrs	r2, r3, #31
 8005294:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8005298:	f8c7 22fc 	str.w	r2, [r7, #764]	; 0x2fc
 800529c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 80052a6:	f8c7 22f4 	str.w	r2, [r7, #756]	; 0x2f4
 80052aa:	e9d7 45be 	ldrd	r4, r5, [r7, #760]	; 0x2f8
 80052ae:	462b      	mov	r3, r5
 80052b0:	e9d7 89bc 	ldrd	r8, r9, [r7, #752]	; 0x2f0
 80052b4:	4642      	mov	r2, r8
 80052b6:	fb02 f203 	mul.w	r2, r2, r3
 80052ba:	464b      	mov	r3, r9
 80052bc:	4621      	mov	r1, r4
 80052be:	fb01 f303 	mul.w	r3, r1, r3
 80052c2:	4413      	add	r3, r2
 80052c4:	4622      	mov	r2, r4
 80052c6:	4641      	mov	r1, r8
 80052c8:	fba2 1201 	umull	r1, r2, r2, r1
 80052cc:	f8c7 23d4 	str.w	r2, [r7, #980]	; 0x3d4
 80052d0:	460a      	mov	r2, r1
 80052d2:	f8c7 23d0 	str.w	r2, [r7, #976]	; 0x3d0
 80052d6:	f8d7 23d4 	ldr.w	r2, [r7, #980]	; 0x3d4
 80052da:	4413      	add	r3, r2
 80052dc:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 80052e0:	e9d7 45f4 	ldrd	r4, r5, [r7, #976]	; 0x3d0
 80052e4:	4622      	mov	r2, r4
 80052e6:	462b      	mov	r3, r5
 80052e8:	f04f 0000 	mov.w	r0, #0
 80052ec:	f04f 0100 	mov.w	r1, #0
 80052f0:	00d9      	lsls	r1, r3, #3
 80052f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052f6:	00d0      	lsls	r0, r2, #3
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4621      	mov	r1, r4
 80052fe:	1a51      	subs	r1, r2, r1
 8005300:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 8005304:	4629      	mov	r1, r5
 8005306:	eb63 0301 	sbc.w	r3, r3, r1
 800530a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 800530e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	e9d7 01ba 	ldrd	r0, r1, [r7, #744]	; 0x2e8
 800531a:	f7ff f9b5 	bl	8004688 <__aeabi_uldivmod>
 800531e:	4602      	mov	r2, r0
 8005320:	460b      	mov	r3, r1
 8005322:	f112 010a 	adds.w	r1, r2, #10
 8005326:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800532a:	f143 0300 	adc.w	r3, r3, #0
 800532e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005332:	4b8f      	ldr	r3, [pc, #572]	; (8005570 <Set_Random_Motion_Values+0x454>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	461a      	mov	r2, r3
 8005338:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800533c:	4413      	add	r3, r2
 800533e:	461a      	mov	r2, r3
 8005340:	4b8b      	ldr	r3, [pc, #556]	; (8005570 <Set_Random_Motion_Values+0x454>)
 8005342:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8005344:	f00b fe0e 	bl	8010f64 <rand>
 8005348:	4603      	mov	r3, r0
 800534a:	17da      	asrs	r2, r3, #31
 800534c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8005350:	f8c7 22e4 	str.w	r2, [r7, #740]	; 0x2e4
 8005354:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005358:	2200      	movs	r2, #0
 800535a:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 800535e:	f8c7 22dc 	str.w	r2, [r7, #732]	; 0x2dc
 8005362:	e9d7 45b8 	ldrd	r4, r5, [r7, #736]	; 0x2e0
 8005366:	462b      	mov	r3, r5
 8005368:	e9d7 89b6 	ldrd	r8, r9, [r7, #728]	; 0x2d8
 800536c:	4642      	mov	r2, r8
 800536e:	fb02 f203 	mul.w	r2, r2, r3
 8005372:	464b      	mov	r3, r9
 8005374:	4621      	mov	r1, r4
 8005376:	fb01 f303 	mul.w	r3, r1, r3
 800537a:	4413      	add	r3, r2
 800537c:	4622      	mov	r2, r4
 800537e:	4641      	mov	r1, r8
 8005380:	fba2 1201 	umull	r1, r2, r2, r1
 8005384:	f8c7 23cc 	str.w	r2, [r7, #972]	; 0x3cc
 8005388:	460a      	mov	r2, r1
 800538a:	f8c7 23c8 	str.w	r2, [r7, #968]	; 0x3c8
 800538e:	f8d7 23cc 	ldr.w	r2, [r7, #972]	; 0x3cc
 8005392:	4413      	add	r3, r2
 8005394:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8005398:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	; 0x3c8
 800539c:	460b      	mov	r3, r1
 800539e:	18db      	adds	r3, r3, r3
 80053a0:	663b      	str	r3, [r7, #96]	; 0x60
 80053a2:	4613      	mov	r3, r2
 80053a4:	eb42 0303 	adc.w	r3, r2, r3
 80053a8:	667b      	str	r3, [r7, #100]	; 0x64
 80053aa:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	f7ff f967 	bl	8004688 <__aeabi_uldivmod>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80053c2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 80053c6:	f143 0300 	adc.w	r3, r3, #0
 80053ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053ce:	4b69      	ldr	r3, [pc, #420]	; (8005574 <Set_Random_Motion_Values+0x458>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80053d8:	4413      	add	r3, r2
 80053da:	461a      	mov	r2, r3
 80053dc:	4b65      	ldr	r3, [pc, #404]	; (8005574 <Set_Random_Motion_Values+0x458>)
 80053de:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80053e0:	f00b fdc0 	bl	8010f64 <rand>
 80053e4:	4603      	mov	r3, r0
 80053e6:	17da      	asrs	r2, r3, #31
 80053e8:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 80053ec:	f8c7 22d4 	str.w	r2, [r7, #724]	; 0x2d4
 80053f0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 80053fa:	f8c7 22cc 	str.w	r2, [r7, #716]	; 0x2cc
 80053fe:	e9d7 45b4 	ldrd	r4, r5, [r7, #720]	; 0x2d0
 8005402:	462b      	mov	r3, r5
 8005404:	e9d7 89b2 	ldrd	r8, r9, [r7, #712]	; 0x2c8
 8005408:	4642      	mov	r2, r8
 800540a:	fb02 f203 	mul.w	r2, r2, r3
 800540e:	464b      	mov	r3, r9
 8005410:	4621      	mov	r1, r4
 8005412:	fb01 f303 	mul.w	r3, r1, r3
 8005416:	4413      	add	r3, r2
 8005418:	4622      	mov	r2, r4
 800541a:	4641      	mov	r1, r8
 800541c:	fba2 1201 	umull	r1, r2, r2, r1
 8005420:	f8c7 23c4 	str.w	r2, [r7, #964]	; 0x3c4
 8005424:	460a      	mov	r2, r1
 8005426:	f8c7 23c0 	str.w	r2, [r7, #960]	; 0x3c0
 800542a:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 800542e:	4413      	add	r3, r2
 8005430:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8005434:	f04f 0000 	mov.w	r0, #0
 8005438:	f04f 0100 	mov.w	r1, #0
 800543c:	e9d7 45f0 	ldrd	r4, r5, [r7, #960]	; 0x3c0
 8005440:	462b      	mov	r3, r5
 8005442:	0099      	lsls	r1, r3, #2
 8005444:	4623      	mov	r3, r4
 8005446:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800544a:	4623      	mov	r3, r4
 800544c:	0098      	lsls	r0, r3, #2
 800544e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	f7ff f917 	bl	8004688 <__aeabi_uldivmod>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8005462:	f04f 31ff 	mov.w	r1, #4294967295
 8005466:	1a80      	subs	r0, r0, r2
 8005468:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800546c:	eb61 0303 	sbc.w	r3, r1, r3
 8005470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005474:	4b3f      	ldr	r3, [pc, #252]	; (8005574 <Set_Random_Motion_Values+0x458>)
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	461a      	mov	r2, r3
 800547a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800547e:	4413      	add	r3, r2
 8005480:	461a      	mov	r2, r3
 8005482:	4b3c      	ldr	r3, [pc, #240]	; (8005574 <Set_Random_Motion_Values+0x458>)
 8005484:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8005486:	f00b fd6d 	bl	8010f64 <rand>
 800548a:	4603      	mov	r3, r0
 800548c:	17da      	asrs	r2, r3, #31
 800548e:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
 8005492:	f8c7 22c4 	str.w	r2, [r7, #708]	; 0x2c4
 8005496:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800549a:	2200      	movs	r2, #0
 800549c:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 80054a0:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 80054a4:	e9d7 45b0 	ldrd	r4, r5, [r7, #704]	; 0x2c0
 80054a8:	462b      	mov	r3, r5
 80054aa:	e9d7 89ae 	ldrd	r8, r9, [r7, #696]	; 0x2b8
 80054ae:	4642      	mov	r2, r8
 80054b0:	fb02 f203 	mul.w	r2, r2, r3
 80054b4:	464b      	mov	r3, r9
 80054b6:	4621      	mov	r1, r4
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	4413      	add	r3, r2
 80054be:	4622      	mov	r2, r4
 80054c0:	4641      	mov	r1, r8
 80054c2:	fba2 1201 	umull	r1, r2, r2, r1
 80054c6:	f8c7 23bc 	str.w	r2, [r7, #956]	; 0x3bc
 80054ca:	460a      	mov	r2, r1
 80054cc:	f8c7 23b8 	str.w	r2, [r7, #952]	; 0x3b8
 80054d0:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 80054d4:	4413      	add	r3, r2
 80054d6:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 80054da:	e9d7 45ee 	ldrd	r4, r5, [r7, #952]	; 0x3b8
 80054de:	4622      	mov	r2, r4
 80054e0:	462b      	mov	r3, r5
 80054e2:	1891      	adds	r1, r2, r2
 80054e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80054e6:	415b      	adcs	r3, r3
 80054e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80054ee:	4621      	mov	r1, r4
 80054f0:	1851      	adds	r1, r2, r1
 80054f2:	6539      	str	r1, [r7, #80]	; 0x50
 80054f4:	4629      	mov	r1, r5
 80054f6:	eb43 0101 	adc.w	r1, r3, r1
 80054fa:	6579      	str	r1, [r7, #84]	; 0x54
 80054fc:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005500:	460b      	mov	r3, r1
 8005502:	18db      	adds	r3, r3, r3
 8005504:	64bb      	str	r3, [r7, #72]	; 0x48
 8005506:	4613      	mov	r3, r2
 8005508:	eb42 0303 	adc.w	r3, r2, r3
 800550c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8005512:	4618      	mov	r0, r3
 8005514:	4621      	mov	r1, r4
 8005516:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	f7ff f8b3 	bl	8004688 <__aeabi_uldivmod>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800552a:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800552e:	f143 0300 	adc.w	r3, r3, #0
 8005532:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005536:	4b0f      	ldr	r3, [pc, #60]	; (8005574 <Set_Random_Motion_Values+0x458>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	461a      	mov	r2, r3
 800553c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005540:	4413      	add	r3, r2
 8005542:	461a      	mov	r2, r3
 8005544:	4b0b      	ldr	r3, [pc, #44]	; (8005574 <Set_Random_Motion_Values+0x458>)
 8005546:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8005548:	f00b fd0c 	bl	8010f64 <rand>
 800554c:	4603      	mov	r3, r0
 800554e:	17da      	asrs	r2, r3, #31
 8005550:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
 8005554:	f8c7 22b4 	str.w	r2, [r7, #692]	; 0x2b4
 8005558:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 800555c:	2200      	movs	r2, #0
 800555e:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8005562:	f8c7 22ac 	str.w	r2, [r7, #684]	; 0x2ac
 8005566:	e9d7 45ac 	ldrd	r4, r5, [r7, #688]	; 0x2b0
 800556a:	462b      	mov	r3, r5
 800556c:	e004      	b.n	8005578 <Set_Random_Motion_Values+0x45c>
 800556e:	bf00      	nop
 8005570:	20000430 	.word	0x20000430
 8005574:	2000043c 	.word	0x2000043c
 8005578:	e9d7 89aa 	ldrd	r8, r9, [r7, #680]	; 0x2a8
 800557c:	4642      	mov	r2, r8
 800557e:	fb02 f203 	mul.w	r2, r2, r3
 8005582:	464b      	mov	r3, r9
 8005584:	4621      	mov	r1, r4
 8005586:	fb01 f303 	mul.w	r3, r1, r3
 800558a:	4413      	add	r3, r2
 800558c:	4622      	mov	r2, r4
 800558e:	4641      	mov	r1, r8
 8005590:	fba2 1201 	umull	r1, r2, r2, r1
 8005594:	f8c7 23b4 	str.w	r2, [r7, #948]	; 0x3b4
 8005598:	460a      	mov	r2, r1
 800559a:	f8c7 23b0 	str.w	r2, [r7, #944]	; 0x3b0
 800559e:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 80055a2:	4413      	add	r3, r2
 80055a4:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80055a8:	e9d7 45ec 	ldrd	r4, r5, [r7, #944]	; 0x3b0
 80055ac:	4622      	mov	r2, r4
 80055ae:	462b      	mov	r3, r5
 80055b0:	1891      	adds	r1, r2, r2
 80055b2:	6439      	str	r1, [r7, #64]	; 0x40
 80055b4:	415b      	adcs	r3, r3
 80055b6:	647b      	str	r3, [r7, #68]	; 0x44
 80055b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80055bc:	4621      	mov	r1, r4
 80055be:	1851      	adds	r1, r2, r1
 80055c0:	f8c7 12a0 	str.w	r1, [r7, #672]	; 0x2a0
 80055c4:	4629      	mov	r1, r5
 80055c6:	eb43 0101 	adc.w	r1, r3, r1
 80055ca:	f8c7 12a4 	str.w	r1, [r7, #676]	; 0x2a4
 80055ce:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80055d2:	f04f 0300 	mov.w	r3, #0
 80055d6:	e9d7 01a8 	ldrd	r0, r1, [r7, #672]	; 0x2a0
 80055da:	f7ff f855 	bl	8004688 <__aeabi_uldivmod>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	1cd1      	adds	r1, r2, #3
 80055e4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80055e8:	f143 0300 	adc.w	r3, r3, #0
 80055ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055f0:	4be1      	ldr	r3, [pc, #900]	; (8005978 <Set_Random_Motion_Values+0x85c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	461a      	mov	r2, r3
 80055f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055fa:	4413      	add	r3, r2
 80055fc:	461a      	mov	r2, r3
 80055fe:	4bde      	ldr	r3, [pc, #888]	; (8005978 <Set_Random_Motion_Values+0x85c>)
 8005600:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8005602:	f00b fcaf 	bl	8010f64 <rand>
 8005606:	4603      	mov	r3, r0
 8005608:	17da      	asrs	r2, r3, #31
 800560a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 800560e:	f8c7 229c 	str.w	r2, [r7, #668]	; 0x29c
 8005612:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005616:	2200      	movs	r2, #0
 8005618:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800561c:	f8c7 2294 	str.w	r2, [r7, #660]	; 0x294
 8005620:	e9d7 45a6 	ldrd	r4, r5, [r7, #664]	; 0x298
 8005624:	462b      	mov	r3, r5
 8005626:	e9d7 89a4 	ldrd	r8, r9, [r7, #656]	; 0x290
 800562a:	4642      	mov	r2, r8
 800562c:	fb02 f203 	mul.w	r2, r2, r3
 8005630:	464b      	mov	r3, r9
 8005632:	4621      	mov	r1, r4
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	4413      	add	r3, r2
 800563a:	4622      	mov	r2, r4
 800563c:	4641      	mov	r1, r8
 800563e:	fba2 1201 	umull	r1, r2, r2, r1
 8005642:	f8c7 23ac 	str.w	r2, [r7, #940]	; 0x3ac
 8005646:	460a      	mov	r2, r1
 8005648:	f8c7 23a8 	str.w	r2, [r7, #936]	; 0x3a8
 800564c:	f8d7 23ac 	ldr.w	r2, [r7, #940]	; 0x3ac
 8005650:	4413      	add	r3, r2
 8005652:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8005656:	f04f 0000 	mov.w	r0, #0
 800565a:	f04f 0100 	mov.w	r1, #0
 800565e:	e9d7 45ea 	ldrd	r4, r5, [r7, #936]	; 0x3a8
 8005662:	462b      	mov	r3, r5
 8005664:	0099      	lsls	r1, r3, #2
 8005666:	4623      	mov	r3, r4
 8005668:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 800566c:	4623      	mov	r3, r4
 800566e:	0098      	lsls	r0, r3, #2
 8005670:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005674:	f04f 0300 	mov.w	r3, #0
 8005678:	f7ff f806 	bl	8004688 <__aeabi_uldivmod>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	f06f 0002 	mvn.w	r0, #2
 8005684:	f04f 31ff 	mov.w	r1, #4294967295
 8005688:	1a80      	subs	r0, r0, r2
 800568a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
 800568e:	eb61 0303 	sbc.w	r3, r1, r3
 8005692:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005696:	4bb8      	ldr	r3, [pc, #736]	; (8005978 <Set_Random_Motion_Values+0x85c>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	461a      	mov	r2, r3
 800569c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80056a0:	4413      	add	r3, r2
 80056a2:	461a      	mov	r2, r3
 80056a4:	4bb4      	ldr	r3, [pc, #720]	; (8005978 <Set_Random_Motion_Values+0x85c>)
 80056a6:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80056a8:	f00b fc5c 	bl	8010f64 <rand>
 80056ac:	4603      	mov	r3, r0
 80056ae:	17da      	asrs	r2, r3, #31
 80056b0:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 80056b4:	f8c7 228c 	str.w	r2, [r7, #652]	; 0x28c
 80056b8:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80056bc:	2200      	movs	r2, #0
 80056be:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 80056c2:	f8c7 2284 	str.w	r2, [r7, #644]	; 0x284
 80056c6:	e9d7 45a2 	ldrd	r4, r5, [r7, #648]	; 0x288
 80056ca:	462b      	mov	r3, r5
 80056cc:	e9d7 89a0 	ldrd	r8, r9, [r7, #640]	; 0x280
 80056d0:	4642      	mov	r2, r8
 80056d2:	fb02 f203 	mul.w	r2, r2, r3
 80056d6:	464b      	mov	r3, r9
 80056d8:	4621      	mov	r1, r4
 80056da:	fb01 f303 	mul.w	r3, r1, r3
 80056de:	4413      	add	r3, r2
 80056e0:	4622      	mov	r2, r4
 80056e2:	4641      	mov	r1, r8
 80056e4:	fba2 1201 	umull	r1, r2, r2, r1
 80056e8:	f8c7 23a4 	str.w	r2, [r7, #932]	; 0x3a4
 80056ec:	460a      	mov	r2, r1
 80056ee:	f8c7 23a0 	str.w	r2, [r7, #928]	; 0x3a0
 80056f2:	f8d7 23a4 	ldr.w	r2, [r7, #932]	; 0x3a4
 80056f6:	4413      	add	r3, r2
 80056f8:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80056fc:	e9d7 45e8 	ldrd	r4, r5, [r7, #928]	; 0x3a0
 8005700:	4622      	mov	r2, r4
 8005702:	462b      	mov	r3, r5
 8005704:	f04f 0000 	mov.w	r0, #0
 8005708:	f04f 0100 	mov.w	r1, #0
 800570c:	0099      	lsls	r1, r3, #2
 800570e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005712:	0090      	lsls	r0, r2, #2
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4621      	mov	r1, r4
 800571a:	1851      	adds	r1, r2, r1
 800571c:	f8c7 1278 	str.w	r1, [r7, #632]	; 0x278
 8005720:	4629      	mov	r1, r5
 8005722:	eb43 0101 	adc.w	r1, r3, r1
 8005726:	f8c7 127c 	str.w	r1, [r7, #636]	; 0x27c
 800572a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	e9d7 019e 	ldrd	r0, r1, [r7, #632]	; 0x278
 8005736:	f7fe ffa7 	bl	8004688 <__aeabi_uldivmod>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	1cd1      	adds	r1, r2, #3
 8005740:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005744:	f143 0300 	adc.w	r3, r3, #0
 8005748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800574c:	4b8a      	ldr	r3, [pc, #552]	; (8005978 <Set_Random_Motion_Values+0x85c>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	461a      	mov	r2, r3
 8005752:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005756:	4413      	add	r3, r2
 8005758:	461a      	mov	r2, r3
 800575a:	4b87      	ldr	r3, [pc, #540]	; (8005978 <Set_Random_Motion_Values+0x85c>)
 800575c:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800575e:	f00b fc01 	bl	8010f64 <rand>
 8005762:	4603      	mov	r3, r0
 8005764:	17da      	asrs	r2, r3, #31
 8005766:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 800576a:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 800576e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8005778:	f8c7 226c 	str.w	r2, [r7, #620]	; 0x26c
 800577c:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 8005780:	462b      	mov	r3, r5
 8005782:	e9d7 899a 	ldrd	r8, r9, [r7, #616]	; 0x268
 8005786:	4642      	mov	r2, r8
 8005788:	fb02 f203 	mul.w	r2, r2, r3
 800578c:	464b      	mov	r3, r9
 800578e:	4621      	mov	r1, r4
 8005790:	fb01 f303 	mul.w	r3, r1, r3
 8005794:	4413      	add	r3, r2
 8005796:	4622      	mov	r2, r4
 8005798:	4641      	mov	r1, r8
 800579a:	fba2 1201 	umull	r1, r2, r2, r1
 800579e:	f8c7 239c 	str.w	r2, [r7, #924]	; 0x39c
 80057a2:	460a      	mov	r2, r1
 80057a4:	f8c7 2398 	str.w	r2, [r7, #920]	; 0x398
 80057a8:	f8d7 239c 	ldr.w	r2, [r7, #924]	; 0x39c
 80057ac:	4413      	add	r3, r2
 80057ae:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 80057b2:	e9d7 45e6 	ldrd	r4, r5, [r7, #920]	; 0x398
 80057b6:	4622      	mov	r2, r4
 80057b8:	462b      	mov	r3, r5
 80057ba:	1891      	adds	r1, r2, r2
 80057bc:	63b9      	str	r1, [r7, #56]	; 0x38
 80057be:	415b      	adcs	r3, r3
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057c6:	4621      	mov	r1, r4
 80057c8:	1851      	adds	r1, r2, r1
 80057ca:	f8c7 1260 	str.w	r1, [r7, #608]	; 0x260
 80057ce:	4629      	mov	r1, r5
 80057d0:	eb43 0101 	adc.w	r1, r3, r1
 80057d4:	f8c7 1264 	str.w	r1, [r7, #612]	; 0x264
 80057d8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	e9d7 0198 	ldrd	r0, r1, [r7, #608]	; 0x260
 80057e4:	f7fe ff50 	bl	8004688 <__aeabi_uldivmod>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80057f0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80057f4:	f143 0300 	adc.w	r3, r3, #0
 80057f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80057fc:	4b5f      	ldr	r3, [pc, #380]	; (800597c <Set_Random_Motion_Values+0x860>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	461a      	mov	r2, r3
 800580a:	4b5c      	ldr	r3, [pc, #368]	; (800597c <Set_Random_Motion_Values+0x860>)
 800580c:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800580e:	f00b fba9 	bl	8010f64 <rand>
 8005812:	4603      	mov	r3, r0
 8005814:	17da      	asrs	r2, r3, #31
 8005816:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 800581a:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 800581e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005822:	2200      	movs	r2, #0
 8005824:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8005828:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 800582c:	e9d7 4596 	ldrd	r4, r5, [r7, #600]	; 0x258
 8005830:	462b      	mov	r3, r5
 8005832:	e9d7 8994 	ldrd	r8, r9, [r7, #592]	; 0x250
 8005836:	4642      	mov	r2, r8
 8005838:	fb02 f203 	mul.w	r2, r2, r3
 800583c:	464b      	mov	r3, r9
 800583e:	4621      	mov	r1, r4
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	4413      	add	r3, r2
 8005846:	4622      	mov	r2, r4
 8005848:	4641      	mov	r1, r8
 800584a:	fba2 1201 	umull	r1, r2, r2, r1
 800584e:	f8c7 2394 	str.w	r2, [r7, #916]	; 0x394
 8005852:	460a      	mov	r2, r1
 8005854:	f8c7 2390 	str.w	r2, [r7, #912]	; 0x390
 8005858:	f8d7 2394 	ldr.w	r2, [r7, #916]	; 0x394
 800585c:	4413      	add	r3, r2
 800585e:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8005862:	e9d7 45e4 	ldrd	r4, r5, [r7, #912]	; 0x390
 8005866:	4622      	mov	r2, r4
 8005868:	462b      	mov	r3, r5
 800586a:	f04f 0000 	mov.w	r0, #0
 800586e:	f04f 0100 	mov.w	r1, #0
 8005872:	0099      	lsls	r1, r3, #2
 8005874:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005878:	0090      	lsls	r0, r2, #2
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	4621      	mov	r1, r4
 8005880:	1851      	adds	r1, r2, r1
 8005882:	f8c7 1248 	str.w	r1, [r7, #584]	; 0x248
 8005886:	4629      	mov	r1, r5
 8005888:	eb43 0101 	adc.w	r1, r3, r1
 800588c:	f8c7 124c 	str.w	r1, [r7, #588]	; 0x24c
 8005890:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	e9d7 0192 	ldrd	r0, r1, [r7, #584]	; 0x248
 800589c:	f7fe fef4 	bl	8004688 <__aeabi_uldivmod>
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 80058a8:	67b9      	str	r1, [r7, #120]	; 0x78
 80058aa:	f143 0300 	adc.w	r3, r3, #0
 80058ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058b0:	4b32      	ldr	r3, [pc, #200]	; (800597c <Set_Random_Motion_Values+0x860>)
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	461a      	mov	r2, r3
 80058b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b8:	4413      	add	r3, r2
 80058ba:	461a      	mov	r2, r3
 80058bc:	4b2f      	ldr	r3, [pc, #188]	; (800597c <Set_Random_Motion_Values+0x860>)
 80058be:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80058c0:	f00b fb50 	bl	8010f64 <rand>
 80058c4:	4603      	mov	r3, r0
 80058c6:	17da      	asrs	r2, r3, #31
 80058c8:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 80058cc:	f8c7 2244 	str.w	r2, [r7, #580]	; 0x244
 80058d0:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80058da:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 80058de:	e9d7 4590 	ldrd	r4, r5, [r7, #576]	; 0x240
 80058e2:	462b      	mov	r3, r5
 80058e4:	e9d7 898e 	ldrd	r8, r9, [r7, #568]	; 0x238
 80058e8:	4642      	mov	r2, r8
 80058ea:	fb02 f203 	mul.w	r2, r2, r3
 80058ee:	464b      	mov	r3, r9
 80058f0:	4621      	mov	r1, r4
 80058f2:	fb01 f303 	mul.w	r3, r1, r3
 80058f6:	4413      	add	r3, r2
 80058f8:	4622      	mov	r2, r4
 80058fa:	4641      	mov	r1, r8
 80058fc:	fba2 1201 	umull	r1, r2, r2, r1
 8005900:	f8c7 238c 	str.w	r2, [r7, #908]	; 0x38c
 8005904:	460a      	mov	r2, r1
 8005906:	f8c7 2388 	str.w	r2, [r7, #904]	; 0x388
 800590a:	f8d7 238c 	ldr.w	r2, [r7, #908]	; 0x38c
 800590e:	4413      	add	r3, r2
 8005910:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8005914:	e9d7 45e2 	ldrd	r4, r5, [r7, #904]	; 0x388
 8005918:	4622      	mov	r2, r4
 800591a:	462b      	mov	r3, r5
 800591c:	f04f 0000 	mov.w	r0, #0
 8005920:	f04f 0100 	mov.w	r1, #0
 8005924:	00d9      	lsls	r1, r3, #3
 8005926:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800592a:	00d0      	lsls	r0, r2, #3
 800592c:	4602      	mov	r2, r0
 800592e:	460b      	mov	r3, r1
 8005930:	4621      	mov	r1, r4
 8005932:	1a51      	subs	r1, r2, r1
 8005934:	f8c7 1230 	str.w	r1, [r7, #560]	; 0x230
 8005938:	4629      	mov	r1, r5
 800593a:	eb63 0301 	sbc.w	r3, r3, r1
 800593e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8005942:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	e9d7 018c 	ldrd	r0, r1, [r7, #560]	; 0x230
 800594e:	f7fe fe9b 	bl	8004688 <__aeabi_uldivmod>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 800595a:	6739      	str	r1, [r7, #112]	; 0x70
 800595c:	f143 0300 	adc.w	r3, r3, #0
 8005960:	677b      	str	r3, [r7, #116]	; 0x74
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <Set_Random_Motion_Values+0x860>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	461a      	mov	r2, r3
 8005968:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	461a      	mov	r2, r3
 800596e:	4b03      	ldr	r3, [pc, #12]	; (800597c <Set_Random_Motion_Values+0x860>)
 8005970:	609a      	str	r2, [r3, #8]

    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
  }
}
 8005972:	f000 bc37 	b.w	80061e4 <Set_Random_Motion_Values+0x10c8>
 8005976:	bf00      	nop
 8005978:	20000448 	.word	0x20000448
 800597c:	20000454 	.word	0x20000454
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8005980:	f00b faf0 	bl	8010f64 <rand>
 8005984:	4603      	mov	r3, r0
 8005986:	17da      	asrs	r2, r3, #31
 8005988:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 800598c:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 8005990:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005994:	2200      	movs	r2, #0
 8005996:	469a      	mov	sl, r3
 8005998:	4693      	mov	fp, r2
 800599a:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 800599e:	460b      	mov	r3, r1
 80059a0:	fb0a f203 	mul.w	r2, sl, r3
 80059a4:	4603      	mov	r3, r0
 80059a6:	fb03 f30b 	mul.w	r3, r3, fp
 80059aa:	4413      	add	r3, r2
 80059ac:	4602      	mov	r2, r0
 80059ae:	fba2 450a 	umull	r4, r5, r2, sl
 80059b2:	442b      	add	r3, r5
 80059b4:	461d      	mov	r5, r3
 80059b6:	4622      	mov	r2, r4
 80059b8:	462b      	mov	r3, r5
 80059ba:	1891      	adds	r1, r2, r2
 80059bc:	6339      	str	r1, [r7, #48]	; 0x30
 80059be:	415b      	adcs	r3, r3
 80059c0:	637b      	str	r3, [r7, #52]	; 0x34
 80059c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80059c6:	1911      	adds	r1, r2, r4
 80059c8:	f8c7 1220 	str.w	r1, [r7, #544]	; 0x220
 80059cc:	416b      	adcs	r3, r5
 80059ce:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80059d2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80059d6:	f04f 0300 	mov.w	r3, #0
 80059da:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80059de:	f7fe fe53 	bl	8004688 <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	f06f 0009 	mvn.w	r0, #9
 80059ea:	f04f 31ff 	mov.w	r1, #4294967295
 80059ee:	1a80      	subs	r0, r0, r2
 80059f0:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
 80059f4:	eb61 0303 	sbc.w	r3, r1, r3
 80059f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80059fc:	4beb      	ldr	r3, [pc, #940]	; (8005dac <Set_Random_Motion_Values+0xc90>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005a06:	4413      	add	r3, r2
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4be8      	ldr	r3, [pc, #928]	; (8005dac <Set_Random_Motion_Values+0xc90>)
 8005a0c:	601a      	str	r2, [r3, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8005a0e:	f00b faa9 	bl	8010f64 <rand>
 8005a12:	4603      	mov	r3, r0
 8005a14:	17da      	asrs	r2, r3, #31
 8005a16:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8005a1a:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8005a1e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8005a28:	f8c7 2214 	str.w	r2, [r7, #532]	; 0x214
 8005a2c:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8005a30:	462b      	mov	r3, r5
 8005a32:	e9d7 8984 	ldrd	r8, r9, [r7, #528]	; 0x210
 8005a36:	4642      	mov	r2, r8
 8005a38:	fb02 f203 	mul.w	r2, r2, r3
 8005a3c:	464b      	mov	r3, r9
 8005a3e:	4621      	mov	r1, r4
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	4413      	add	r3, r2
 8005a46:	4622      	mov	r2, r4
 8005a48:	4641      	mov	r1, r8
 8005a4a:	fba2 1201 	umull	r1, r2, r2, r1
 8005a4e:	f8c7 2384 	str.w	r2, [r7, #900]	; 0x384
 8005a52:	460a      	mov	r2, r1
 8005a54:	f8c7 2380 	str.w	r2, [r7, #896]	; 0x380
 8005a58:	f8d7 2384 	ldr.w	r2, [r7, #900]	; 0x384
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8005a62:	e9d7 45e0 	ldrd	r4, r5, [r7, #896]	; 0x380
 8005a66:	4622      	mov	r2, r4
 8005a68:	462b      	mov	r3, r5
 8005a6a:	f04f 0000 	mov.w	r0, #0
 8005a6e:	f04f 0100 	mov.w	r1, #0
 8005a72:	0099      	lsls	r1, r3, #2
 8005a74:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8005a78:	0090      	lsls	r0, r2, #2
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	4621      	mov	r1, r4
 8005a80:	1851      	adds	r1, r2, r1
 8005a82:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
 8005a86:	4629      	mov	r1, r5
 8005a88:	eb43 0101 	adc.w	r1, r3, r1
 8005a8c:	f8c7 120c 	str.w	r1, [r7, #524]	; 0x20c
 8005a90:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	; 0x208
 8005a9c:	f7fe fdf4 	bl	8004688 <__aeabi_uldivmod>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	460b      	mov	r3, r1
 8005aa4:	f112 010a 	adds.w	r1, r2, #10
 8005aa8:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
 8005aac:	f143 0300 	adc.w	r3, r3, #0
 8005ab0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005ab4:	4bbd      	ldr	r3, [pc, #756]	; (8005dac <Set_Random_Motion_Values+0xc90>)
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005abe:	4413      	add	r3, r2
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4bba      	ldr	r3, [pc, #744]	; (8005dac <Set_Random_Motion_Values+0xc90>)
 8005ac4:	605a      	str	r2, [r3, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8005ac6:	f00b fa4d 	bl	8010f64 <rand>
 8005aca:	4603      	mov	r3, r0
 8005acc:	17da      	asrs	r2, r3, #31
 8005ace:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8005ad2:	f8c7 2204 	str.w	r2, [r7, #516]	; 0x204
 8005ad6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8005ae0:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 8005ae4:	e9d7 4580 	ldrd	r4, r5, [r7, #512]	; 0x200
 8005ae8:	462b      	mov	r3, r5
 8005aea:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 8005aee:	4642      	mov	r2, r8
 8005af0:	fb02 f203 	mul.w	r2, r2, r3
 8005af4:	464b      	mov	r3, r9
 8005af6:	4621      	mov	r1, r4
 8005af8:	fb01 f303 	mul.w	r3, r1, r3
 8005afc:	4413      	add	r3, r2
 8005afe:	4622      	mov	r2, r4
 8005b00:	4641      	mov	r1, r8
 8005b02:	fba2 1201 	umull	r1, r2, r2, r1
 8005b06:	f8c7 237c 	str.w	r2, [r7, #892]	; 0x37c
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	f8c7 2378 	str.w	r2, [r7, #888]	; 0x378
 8005b10:	f8d7 237c 	ldr.w	r2, [r7, #892]	; 0x37c
 8005b14:	4413      	add	r3, r2
 8005b16:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8005b1a:	e9d7 45de 	ldrd	r4, r5, [r7, #888]	; 0x378
 8005b1e:	4622      	mov	r2, r4
 8005b20:	462b      	mov	r3, r5
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f04f 0100 	mov.w	r1, #0
 8005b2a:	00d9      	lsls	r1, r3, #3
 8005b2c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b30:	00d0      	lsls	r0, r2, #3
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4621      	mov	r1, r4
 8005b38:	1a51      	subs	r1, r2, r1
 8005b3a:	f8c7 11f0 	str.w	r1, [r7, #496]	; 0x1f0
 8005b3e:	4629      	mov	r1, r5
 8005b40:	eb63 0301 	sbc.w	r3, r3, r1
 8005b44:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 8005b48:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005b4c:	f04f 0300 	mov.w	r3, #0
 8005b50:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	; 0x1f0
 8005b54:	f7fe fd98 	bl	8004688 <__aeabi_uldivmod>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	f06f 0009 	mvn.w	r0, #9
 8005b60:	f04f 31ff 	mov.w	r1, #4294967295
 8005b64:	1a80      	subs	r0, r0, r2
 8005b66:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118
 8005b6a:	eb61 0303 	sbc.w	r3, r1, r3
 8005b6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b72:	4b8e      	ldr	r3, [pc, #568]	; (8005dac <Set_Random_Motion_Values+0xc90>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b7c:	4413      	add	r3, r2
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4b8a      	ldr	r3, [pc, #552]	; (8005dac <Set_Random_Motion_Values+0xc90>)
 8005b82:	609a      	str	r2, [r3, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8005b84:	f00b f9ee 	bl	8010f64 <rand>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	17da      	asrs	r2, r3, #31
 8005b8c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005b90:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8005b94:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8005b9e:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8005ba2:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8005ba6:	462b      	mov	r3, r5
 8005ba8:	e9d7 8978 	ldrd	r8, r9, [r7, #480]	; 0x1e0
 8005bac:	4642      	mov	r2, r8
 8005bae:	fb02 f203 	mul.w	r2, r2, r3
 8005bb2:	464b      	mov	r3, r9
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	fb01 f303 	mul.w	r3, r1, r3
 8005bba:	4413      	add	r3, r2
 8005bbc:	4622      	mov	r2, r4
 8005bbe:	4641      	mov	r1, r8
 8005bc0:	fba2 1201 	umull	r1, r2, r2, r1
 8005bc4:	f8c7 2374 	str.w	r2, [r7, #884]	; 0x374
 8005bc8:	460a      	mov	r2, r1
 8005bca:	f8c7 2370 	str.w	r2, [r7, #880]	; 0x370
 8005bce:	f8d7 2374 	ldr.w	r2, [r7, #884]	; 0x374
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8005bd8:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	; 0x370
 8005bdc:	460b      	mov	r3, r1
 8005bde:	18db      	adds	r3, r3, r3
 8005be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005be2:	4613      	mov	r3, r2
 8005be4:	eb42 0303 	adc.w	r3, r2, r3
 8005be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005bee:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	f7fe fd47 	bl	8004688 <__aeabi_uldivmod>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8005c02:	f04f 31ff 	mov.w	r1, #4294967295
 8005c06:	1a80      	subs	r0, r0, r2
 8005c08:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
 8005c0c:	eb61 0303 	sbc.w	r3, r1, r3
 8005c10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005c14:	4b66      	ldr	r3, [pc, #408]	; (8005db0 <Set_Random_Motion_Values+0xc94>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c1e:	4413      	add	r3, r2
 8005c20:	461a      	mov	r2, r3
 8005c22:	4b63      	ldr	r3, [pc, #396]	; (8005db0 <Set_Random_Motion_Values+0xc94>)
 8005c24:	601a      	str	r2, [r3, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8005c26:	f00b f99d 	bl	8010f64 <rand>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	17da      	asrs	r2, r3, #31
 8005c2e:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8005c32:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005c36:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005c40:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8005c44:	e9d7 4576 	ldrd	r4, r5, [r7, #472]	; 0x1d8
 8005c48:	462b      	mov	r3, r5
 8005c4a:	e9d7 8974 	ldrd	r8, r9, [r7, #464]	; 0x1d0
 8005c4e:	4642      	mov	r2, r8
 8005c50:	fb02 f203 	mul.w	r2, r2, r3
 8005c54:	464b      	mov	r3, r9
 8005c56:	4621      	mov	r1, r4
 8005c58:	fb01 f303 	mul.w	r3, r1, r3
 8005c5c:	4413      	add	r3, r2
 8005c5e:	4622      	mov	r2, r4
 8005c60:	4641      	mov	r1, r8
 8005c62:	fba2 1201 	umull	r1, r2, r2, r1
 8005c66:	f8c7 236c 	str.w	r2, [r7, #876]	; 0x36c
 8005c6a:	460a      	mov	r2, r1
 8005c6c:	f8c7 2368 	str.w	r2, [r7, #872]	; 0x368
 8005c70:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8005c74:	4413      	add	r3, r2
 8005c76:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8005c7a:	f04f 0000 	mov.w	r0, #0
 8005c7e:	f04f 0100 	mov.w	r1, #0
 8005c82:	e9d7 45da 	ldrd	r4, r5, [r7, #872]	; 0x368
 8005c86:	462b      	mov	r3, r5
 8005c88:	0099      	lsls	r1, r3, #2
 8005c8a:	4623      	mov	r3, r4
 8005c8c:	ea41 7193 	orr.w	r1, r1, r3, lsr #30
 8005c90:	4623      	mov	r3, r4
 8005c92:	0098      	lsls	r0, r3, #2
 8005c94:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005c98:	f04f 0300 	mov.w	r3, #0
 8005c9c:	f7fe fcf4 	bl	8004688 <__aeabi_uldivmod>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	f112 0164 	adds.w	r1, r2, #100	; 0x64
 8005ca8:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8005cac:	f143 0300 	adc.w	r3, r3, #0
 8005cb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005cb4:	4b3e      	ldr	r3, [pc, #248]	; (8005db0 <Set_Random_Motion_Values+0xc94>)
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005cbe:	4413      	add	r3, r2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4b3b      	ldr	r3, [pc, #236]	; (8005db0 <Set_Random_Motion_Values+0xc94>)
 8005cc4:	605a      	str	r2, [r3, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8005cc6:	f00b f94d 	bl	8010f64 <rand>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	17da      	asrs	r2, r3, #31
 8005cce:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8005cd2:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8005cd6:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8005ce0:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8005ce4:	e9d7 4572 	ldrd	r4, r5, [r7, #456]	; 0x1c8
 8005ce8:	462b      	mov	r3, r5
 8005cea:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8005cee:	4642      	mov	r2, r8
 8005cf0:	fb02 f203 	mul.w	r2, r2, r3
 8005cf4:	464b      	mov	r3, r9
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	4413      	add	r3, r2
 8005cfe:	4622      	mov	r2, r4
 8005d00:	4641      	mov	r1, r8
 8005d02:	fba2 1201 	umull	r1, r2, r2, r1
 8005d06:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 8005d0a:	460a      	mov	r2, r1
 8005d0c:	f8c7 2360 	str.w	r2, [r7, #864]	; 0x360
 8005d10:	f8d7 2364 	ldr.w	r2, [r7, #868]	; 0x364
 8005d14:	4413      	add	r3, r2
 8005d16:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8005d1a:	e9d7 45d8 	ldrd	r4, r5, [r7, #864]	; 0x360
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	1891      	adds	r1, r2, r2
 8005d24:	6239      	str	r1, [r7, #32]
 8005d26:	415b      	adcs	r3, r3
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d2e:	4621      	mov	r1, r4
 8005d30:	1851      	adds	r1, r2, r1
 8005d32:	61b9      	str	r1, [r7, #24]
 8005d34:	4629      	mov	r1, r5
 8005d36:	eb43 0101 	adc.w	r1, r3, r1
 8005d3a:	61f9      	str	r1, [r7, #28]
 8005d3c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005d40:	460b      	mov	r3, r1
 8005d42:	18db      	adds	r3, r3, r3
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	4613      	mov	r3, r2
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005d52:	4618      	mov	r0, r3
 8005d54:	4621      	mov	r1, r4
 8005d56:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	f7fe fc93 	bl	8004688 <__aeabi_uldivmod>
 8005d62:	4602      	mov	r2, r0
 8005d64:	460b      	mov	r3, r1
 8005d66:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8005d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8005d6e:	1a80      	subs	r0, r0, r2
 8005d70:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 8005d74:	eb61 0303 	sbc.w	r3, r1, r3
 8005d78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <Set_Random_Motion_Values+0xc94>)
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	461a      	mov	r2, r3
 8005d82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005d86:	4413      	add	r3, r2
 8005d88:	461a      	mov	r2, r3
 8005d8a:	4b09      	ldr	r3, [pc, #36]	; (8005db0 <Set_Random_Motion_Values+0xc94>)
 8005d8c:	609a      	str	r2, [r3, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8005d8e:	f00b f8e9 	bl	8010f64 <rand>
 8005d92:	4603      	mov	r3, r0
 8005d94:	17da      	asrs	r2, r3, #31
 8005d96:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8005d9a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8005d9e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005da8:	e004      	b.n	8005db4 <Set_Random_Motion_Values+0xc98>
 8005daa:	bf00      	nop
 8005dac:	20000430 	.word	0x20000430
 8005db0:	2000043c 	.word	0x2000043c
 8005db4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8005db8:	e9d7 456e 	ldrd	r4, r5, [r7, #440]	; 0x1b8
 8005dbc:	462b      	mov	r3, r5
 8005dbe:	e9d7 896c 	ldrd	r8, r9, [r7, #432]	; 0x1b0
 8005dc2:	4642      	mov	r2, r8
 8005dc4:	fb02 f203 	mul.w	r2, r2, r3
 8005dc8:	464b      	mov	r3, r9
 8005dca:	4621      	mov	r1, r4
 8005dcc:	fb01 f303 	mul.w	r3, r1, r3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	4622      	mov	r2, r4
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	fba2 1201 	umull	r1, r2, r2, r1
 8005dda:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 8005dde:	460a      	mov	r2, r1
 8005de0:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 8005de4:	f8d7 235c 	ldr.w	r2, [r7, #860]	; 0x35c
 8005de8:	4413      	add	r3, r2
 8005dea:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8005dee:	e9d7 45d6 	ldrd	r4, r5, [r7, #856]	; 0x358
 8005df2:	4622      	mov	r2, r4
 8005df4:	462b      	mov	r3, r5
 8005df6:	f04f 0000 	mov.w	r0, #0
 8005dfa:	f04f 0100 	mov.w	r1, #0
 8005dfe:	00d9      	lsls	r1, r3, #3
 8005e00:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e04:	00d0      	lsls	r0, r2, #3
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	1a51      	subs	r1, r2, r1
 8005e0e:	f8c7 11a8 	str.w	r1, [r7, #424]	; 0x1a8
 8005e12:	4629      	mov	r1, r5
 8005e14:	eb63 0301 	sbc.w	r3, r3, r1
 8005e18:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8005e1c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005e20:	f04f 0300 	mov.w	r3, #0
 8005e24:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	; 0x1a8
 8005e28:	f7fe fc2e 	bl	8004688 <__aeabi_uldivmod>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	f06f 0002 	mvn.w	r0, #2
 8005e34:	f04f 31ff 	mov.w	r1, #4294967295
 8005e38:	1a80      	subs	r0, r0, r2
 8005e3a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8005e3e:	eb61 0303 	sbc.w	r3, r1, r3
 8005e42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005e46:	4bea      	ldr	r3, [pc, #936]	; (80061f0 <Set_Random_Motion_Values+0x10d4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e50:	4413      	add	r3, r2
 8005e52:	461a      	mov	r2, r3
 8005e54:	4be6      	ldr	r3, [pc, #920]	; (80061f0 <Set_Random_Motion_Values+0x10d4>)
 8005e56:	601a      	str	r2, [r3, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8005e58:	f00b f884 	bl	8010f64 <rand>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	17da      	asrs	r2, r3, #31
 8005e60:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005e64:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8005e68:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8005e72:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8005e76:	e9d7 4568 	ldrd	r4, r5, [r7, #416]	; 0x1a0
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	e9d7 8966 	ldrd	r8, r9, [r7, #408]	; 0x198
 8005e80:	4642      	mov	r2, r8
 8005e82:	fb02 f203 	mul.w	r2, r2, r3
 8005e86:	464b      	mov	r3, r9
 8005e88:	4621      	mov	r1, r4
 8005e8a:	fb01 f303 	mul.w	r3, r1, r3
 8005e8e:	4413      	add	r3, r2
 8005e90:	4622      	mov	r2, r4
 8005e92:	4641      	mov	r1, r8
 8005e94:	fba2 1201 	umull	r1, r2, r2, r1
 8005e98:	f8c7 2354 	str.w	r2, [r7, #852]	; 0x354
 8005e9c:	460a      	mov	r2, r1
 8005e9e:	f8c7 2350 	str.w	r2, [r7, #848]	; 0x350
 8005ea2:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005eac:	e9d7 45d4 	ldrd	r4, r5, [r7, #848]	; 0x350
 8005eb0:	4622      	mov	r2, r4
 8005eb2:	462b      	mov	r3, r5
 8005eb4:	f04f 0000 	mov.w	r0, #0
 8005eb8:	f04f 0100 	mov.w	r1, #0
 8005ebc:	00d9      	lsls	r1, r3, #3
 8005ebe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ec2:	00d0      	lsls	r0, r2, #3
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4621      	mov	r1, r4
 8005eca:	1851      	adds	r1, r2, r1
 8005ecc:	f8c7 1190 	str.w	r1, [r7, #400]	; 0x190
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	eb43 0101 	adc.w	r1, r3, r1
 8005ed6:	f8c7 1194 	str.w	r1, [r7, #404]	; 0x194
 8005eda:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8005ee6:	f7fe fbcf 	bl	8004688 <__aeabi_uldivmod>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	1cd1      	adds	r1, r2, #3
 8005ef0:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8005ef4:	f143 0300 	adc.w	r3, r3, #0
 8005ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005efc:	4bbc      	ldr	r3, [pc, #752]	; (80061f0 <Set_Random_Motion_Values+0x10d4>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	461a      	mov	r2, r3
 8005f02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005f06:	4413      	add	r3, r2
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4bb9      	ldr	r3, [pc, #740]	; (80061f0 <Set_Random_Motion_Values+0x10d4>)
 8005f0c:	605a      	str	r2, [r3, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8005f0e:	f00b f829 	bl	8010f64 <rand>
 8005f12:	4603      	mov	r3, r0
 8005f14:	17da      	asrs	r2, r3, #31
 8005f16:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8005f1a:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 8005f1e:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005f22:	2200      	movs	r2, #0
 8005f24:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005f28:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8005f2c:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 8005f30:	462b      	mov	r3, r5
 8005f32:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 8005f36:	4642      	mov	r2, r8
 8005f38:	fb02 f203 	mul.w	r2, r2, r3
 8005f3c:	464b      	mov	r3, r9
 8005f3e:	4621      	mov	r1, r4
 8005f40:	fb01 f303 	mul.w	r3, r1, r3
 8005f44:	4413      	add	r3, r2
 8005f46:	4622      	mov	r2, r4
 8005f48:	4641      	mov	r1, r8
 8005f4a:	fba2 1201 	umull	r1, r2, r2, r1
 8005f4e:	f8c7 234c 	str.w	r2, [r7, #844]	; 0x34c
 8005f52:	460a      	mov	r2, r1
 8005f54:	f8c7 2348 	str.w	r2, [r7, #840]	; 0x348
 8005f58:	f8d7 234c 	ldr.w	r2, [r7, #844]	; 0x34c
 8005f5c:	4413      	add	r3, r2
 8005f5e:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8005f62:	e9d7 45d2 	ldrd	r4, r5, [r7, #840]	; 0x348
 8005f66:	4622      	mov	r2, r4
 8005f68:	462b      	mov	r3, r5
 8005f6a:	1891      	adds	r1, r2, r2
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	415b      	adcs	r3, r3
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f76:	4621      	mov	r1, r4
 8005f78:	1851      	adds	r1, r2, r1
 8005f7a:	f8c7 1178 	str.w	r1, [r7, #376]	; 0x178
 8005f7e:	4629      	mov	r1, r5
 8005f80:	eb43 0101 	adc.w	r1, r3, r1
 8005f84:	f8c7 117c 	str.w	r1, [r7, #380]	; 0x17c
 8005f88:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 8005f94:	f7fe fb78 	bl	8004688 <__aeabi_uldivmod>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	f06f 0002 	mvn.w	r0, #2
 8005fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8005fa4:	1a80      	subs	r0, r0, r2
 8005fa6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
 8005faa:	eb61 0303 	sbc.w	r3, r1, r3
 8005fae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005fb2:	4b8f      	ldr	r3, [pc, #572]	; (80061f0 <Set_Random_Motion_Values+0x10d4>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	461a      	mov	r2, r3
 8005fb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005fbc:	4413      	add	r3, r2
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4b8b      	ldr	r3, [pc, #556]	; (80061f0 <Set_Random_Motion_Values+0x10d4>)
 8005fc2:	609a      	str	r2, [r3, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8005fc4:	f00a ffce 	bl	8010f64 <rand>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	17da      	asrs	r2, r3, #31
 8005fcc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8005fd0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8005fd4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005fde:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8005fe2:	e9d7 455c 	ldrd	r4, r5, [r7, #368]	; 0x170
 8005fe6:	462b      	mov	r3, r5
 8005fe8:	e9d7 895a 	ldrd	r8, r9, [r7, #360]	; 0x168
 8005fec:	4642      	mov	r2, r8
 8005fee:	fb02 f203 	mul.w	r2, r2, r3
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	4621      	mov	r1, r4
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	4413      	add	r3, r2
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	4641      	mov	r1, r8
 8006000:	fba2 1201 	umull	r1, r2, r2, r1
 8006004:	f8c7 2344 	str.w	r2, [r7, #836]	; 0x344
 8006008:	460a      	mov	r2, r1
 800600a:	f8c7 2340 	str.w	r2, [r7, #832]	; 0x340
 800600e:	f8d7 2344 	ldr.w	r2, [r7, #836]	; 0x344
 8006012:	4413      	add	r3, r2
 8006014:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8006018:	e9d7 45d0 	ldrd	r4, r5, [r7, #832]	; 0x340
 800601c:	4622      	mov	r2, r4
 800601e:	462b      	mov	r3, r5
 8006020:	f04f 0000 	mov.w	r0, #0
 8006024:	f04f 0100 	mov.w	r1, #0
 8006028:	00d9      	lsls	r1, r3, #3
 800602a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800602e:	00d0      	lsls	r0, r2, #3
 8006030:	4602      	mov	r2, r0
 8006032:	460b      	mov	r3, r1
 8006034:	4621      	mov	r1, r4
 8006036:	1a51      	subs	r1, r2, r1
 8006038:	f8c7 1160 	str.w	r1, [r7, #352]	; 0x160
 800603c:	4629      	mov	r1, r5
 800603e:	eb63 0301 	sbc.w	r3, r3, r1
 8006042:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8006046:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 8006052:	f7fe fb19 	bl	8004688 <__aeabi_uldivmod>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	f112 01c8 	adds.w	r1, r2, #200	; 0xc8
 800605e:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8006062:	f143 0300 	adc.w	r3, r3, #0
 8006066:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800606a:	4b62      	ldr	r3, [pc, #392]	; (80061f4 <Set_Random_Motion_Values+0x10d8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006074:	4413      	add	r3, r2
 8006076:	461a      	mov	r2, r3
 8006078:	4b5e      	ldr	r3, [pc, #376]	; (80061f4 <Set_Random_Motion_Values+0x10d8>)
 800607a:	601a      	str	r2, [r3, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 800607c:	f00a ff72 	bl	8010f64 <rand>
 8006080:	4603      	mov	r3, r0
 8006082:	17da      	asrs	r2, r3, #31
 8006084:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8006088:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800608c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8006090:	2200      	movs	r2, #0
 8006092:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8006096:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800609a:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800609e:	462b      	mov	r3, r5
 80060a0:	e9d7 8954 	ldrd	r8, r9, [r7, #336]	; 0x150
 80060a4:	4642      	mov	r2, r8
 80060a6:	fb02 f203 	mul.w	r2, r2, r3
 80060aa:	464b      	mov	r3, r9
 80060ac:	4621      	mov	r1, r4
 80060ae:	fb01 f303 	mul.w	r3, r1, r3
 80060b2:	4413      	add	r3, r2
 80060b4:	4622      	mov	r2, r4
 80060b6:	4641      	mov	r1, r8
 80060b8:	fba2 1201 	umull	r1, r2, r2, r1
 80060bc:	f8c7 233c 	str.w	r2, [r7, #828]	; 0x33c
 80060c0:	460a      	mov	r2, r1
 80060c2:	f8c7 2338 	str.w	r2, [r7, #824]	; 0x338
 80060c6:	f8d7 233c 	ldr.w	r2, [r7, #828]	; 0x33c
 80060ca:	4413      	add	r3, r2
 80060cc:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 80060d0:	e9d7 45ce 	ldrd	r4, r5, [r7, #824]	; 0x338
 80060d4:	4622      	mov	r2, r4
 80060d6:	462b      	mov	r3, r5
 80060d8:	1891      	adds	r1, r2, r2
 80060da:	6039      	str	r1, [r7, #0]
 80060dc:	415b      	adcs	r3, r3
 80060de:	607b      	str	r3, [r7, #4]
 80060e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e4:	4621      	mov	r1, r4
 80060e6:	1851      	adds	r1, r2, r1
 80060e8:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 80060ec:	4629      	mov	r1, r5
 80060ee:	eb43 0101 	adc.w	r1, r3, r1
 80060f2:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 80060f6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 8006102:	f7fe fac1 	bl	8004688 <__aeabi_uldivmod>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	f112 0196 	adds.w	r1, r2, #150	; 0x96
 800610e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006112:	f143 0300 	adc.w	r3, r3, #0
 8006116:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800611a:	4b36      	ldr	r3, [pc, #216]	; (80061f4 <Set_Random_Motion_Values+0x10d8>)
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	461a      	mov	r2, r3
 8006120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	461a      	mov	r2, r3
 8006128:	4b32      	ldr	r3, [pc, #200]	; (80061f4 <Set_Random_Motion_Values+0x10d8>)
 800612a:	605a      	str	r2, [r3, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 800612c:	f00a ff1a 	bl	8010f64 <rand>
 8006130:	4603      	mov	r3, r0
 8006132:	17da      	asrs	r2, r3, #31
 8006134:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8006138:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800613c:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 8006140:	2200      	movs	r2, #0
 8006142:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8006146:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800614a:	e9d7 4550 	ldrd	r4, r5, [r7, #320]	; 0x140
 800614e:	462b      	mov	r3, r5
 8006150:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8006154:	4642      	mov	r2, r8
 8006156:	fb02 f203 	mul.w	r2, r2, r3
 800615a:	464b      	mov	r3, r9
 800615c:	4621      	mov	r1, r4
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	4413      	add	r3, r2
 8006164:	4622      	mov	r2, r4
 8006166:	4641      	mov	r1, r8
 8006168:	fba2 1201 	umull	r1, r2, r2, r1
 800616c:	f8c7 2334 	str.w	r2, [r7, #820]	; 0x334
 8006170:	460a      	mov	r2, r1
 8006172:	f8c7 2330 	str.w	r2, [r7, #816]	; 0x330
 8006176:	f8d7 2334 	ldr.w	r2, [r7, #820]	; 0x334
 800617a:	4413      	add	r3, r2
 800617c:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8006180:	e9d7 45cc 	ldrd	r4, r5, [r7, #816]	; 0x330
 8006184:	4622      	mov	r2, r4
 8006186:	462b      	mov	r3, r5
 8006188:	f04f 0000 	mov.w	r0, #0
 800618c:	f04f 0100 	mov.w	r1, #0
 8006190:	0099      	lsls	r1, r3, #2
 8006192:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006196:	0090      	lsls	r0, r2, #2
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4621      	mov	r1, r4
 800619e:	1851      	adds	r1, r2, r1
 80061a0:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 80061a4:	4629      	mov	r1, r5
 80061a6:	eb43 0101 	adc.w	r1, r3, r1
 80061aa:	f8c7 1134 	str.w	r1, [r7, #308]	; 0x134
 80061ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 80061ba:	f7fe fa65 	bl	8004688 <__aeabi_uldivmod>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	f112 010a 	adds.w	r1, r2, #10
 80061c6:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80061ca:	f143 0300 	adc.w	r3, r3, #0
 80061ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061d2:	4b08      	ldr	r3, [pc, #32]	; (80061f4 <Set_Random_Motion_Values+0x10d8>)
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	461a      	mov	r2, r3
 80061d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80061dc:	4413      	add	r3, r2
 80061de:	461a      	mov	r2, r3
 80061e0:	4b04      	ldr	r3, [pc, #16]	; (80061f4 <Set_Random_Motion_Values+0x10d8>)
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061f0:	20000448 	.word	0x20000448
 80061f4:	20000454 	.word	0x20000454

080061f8 <Reset_Motion_Values>:
 *
 * @param  None
 * @retval None
 */
static void Reset_Motion_Values(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 80061fc:	4b6e      	ldr	r3, [pc, #440]	; (80063b8 <Reset_Motion_Values+0x1c0>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	4b6e      	ldr	r3, [pc, #440]	; (80063bc <Reset_Motion_Values+0x1c4>)
 8006202:	fb83 1302 	smull	r1, r3, r3, r2
 8006206:	11d9      	asrs	r1, r3, #7
 8006208:	17d3      	asrs	r3, r2, #31
 800620a:	1acb      	subs	r3, r1, r3
 800620c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d103      	bne.n	8006222 <Reset_Motion_Values+0x2a>
 800621a:	4b67      	ldr	r3, [pc, #412]	; (80063b8 <Reset_Motion_Values+0x1c0>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	425b      	negs	r3, r3
 8006220:	e000      	b.n	8006224 <Reset_Motion_Values+0x2c>
 8006222:	230a      	movs	r3, #10
 8006224:	4a64      	ldr	r2, [pc, #400]	; (80063b8 <Reset_Motion_Values+0x1c0>)
 8006226:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8006228:	4b63      	ldr	r3, [pc, #396]	; (80063b8 <Reset_Motion_Values+0x1c0>)
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	4b63      	ldr	r3, [pc, #396]	; (80063bc <Reset_Motion_Values+0x1c4>)
 800622e:	fb83 1302 	smull	r1, r3, r3, r2
 8006232:	11d9      	asrs	r1, r3, #7
 8006234:	17d3      	asrs	r3, r2, #31
 8006236:	1acb      	subs	r3, r1, r3
 8006238:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800623c:	fb01 f303 	mul.w	r3, r1, r3
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <Reset_Motion_Values+0x56>
 8006246:	4b5c      	ldr	r3, [pc, #368]	; (80063b8 <Reset_Motion_Values+0x1c0>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	425b      	negs	r3, r3
 800624c:	e001      	b.n	8006252 <Reset_Motion_Values+0x5a>
 800624e:	f06f 0309 	mvn.w	r3, #9
 8006252:	4a59      	ldr	r2, [pc, #356]	; (80063b8 <Reset_Motion_Values+0x1c0>)
 8006254:	6053      	str	r3, [r2, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8006256:	4b58      	ldr	r3, [pc, #352]	; (80063b8 <Reset_Motion_Values+0x1c0>)
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	4b58      	ldr	r3, [pc, #352]	; (80063bc <Reset_Motion_Values+0x1c4>)
 800625c:	fb83 1302 	smull	r1, r3, r3, r2
 8006260:	11d9      	asrs	r1, r3, #7
 8006262:	17d3      	asrs	r3, r2, #31
 8006264:	1acb      	subs	r3, r1, r3
 8006266:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800626a:	fb01 f303 	mul.w	r3, r1, r3
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d103      	bne.n	800627c <Reset_Motion_Values+0x84>
 8006274:	4b50      	ldr	r3, [pc, #320]	; (80063b8 <Reset_Motion_Values+0x1c0>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	425b      	negs	r3, r3
 800627a:	e000      	b.n	800627e <Reset_Motion_Values+0x86>
 800627c:	230a      	movs	r3, #10
 800627e:	4a4e      	ldr	r2, [pc, #312]	; (80063b8 <Reset_Motion_Values+0x1c0>)
 8006280:	6093      	str	r3, [r2, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8006282:	4b4f      	ldr	r3, [pc, #316]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4b4d      	ldr	r3, [pc, #308]	; (80063bc <Reset_Motion_Values+0x1c4>)
 8006288:	fb83 1302 	smull	r1, r3, r3, r2
 800628c:	11d9      	asrs	r1, r3, #7
 800628e:	17d3      	asrs	r3, r2, #31
 8006290:	1acb      	subs	r3, r1, r3
 8006292:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006296:	fb01 f303 	mul.w	r3, r1, r3
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d103      	bne.n	80062a8 <Reset_Motion_Values+0xb0>
 80062a0:	4b47      	ldr	r3, [pc, #284]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	425b      	negs	r3, r3
 80062a6:	e000      	b.n	80062aa <Reset_Motion_Values+0xb2>
 80062a8:	2364      	movs	r3, #100	; 0x64
 80062aa:	4a45      	ldr	r2, [pc, #276]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 80062ac:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 80062ae:	4b44      	ldr	r3, [pc, #272]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	4b42      	ldr	r3, [pc, #264]	; (80063bc <Reset_Motion_Values+0x1c4>)
 80062b4:	fb83 1302 	smull	r1, r3, r3, r2
 80062b8:	11d9      	asrs	r1, r3, #7
 80062ba:	17d3      	asrs	r3, r2, #31
 80062bc:	1acb      	subs	r3, r1, r3
 80062be:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80062c2:	fb01 f303 	mul.w	r3, r1, r3
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d103      	bne.n	80062d4 <Reset_Motion_Values+0xdc>
 80062cc:	4b3c      	ldr	r3, [pc, #240]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	425b      	negs	r3, r3
 80062d2:	e001      	b.n	80062d8 <Reset_Motion_Values+0xe0>
 80062d4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80062d8:	4a39      	ldr	r2, [pc, #228]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 80062da:	6053      	str	r3, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 80062dc:	4b38      	ldr	r3, [pc, #224]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 80062de:	689a      	ldr	r2, [r3, #8]
 80062e0:	4b36      	ldr	r3, [pc, #216]	; (80063bc <Reset_Motion_Values+0x1c4>)
 80062e2:	fb83 1302 	smull	r1, r3, r3, r2
 80062e6:	11d9      	asrs	r1, r3, #7
 80062e8:	17d3      	asrs	r3, r2, #31
 80062ea:	1acb      	subs	r3, r1, r3
 80062ec:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80062f0:	fb01 f303 	mul.w	r3, r1, r3
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d103      	bne.n	8006302 <Reset_Motion_Values+0x10a>
 80062fa:	4b31      	ldr	r3, [pc, #196]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	425b      	negs	r3, r3
 8006300:	e000      	b.n	8006304 <Reset_Motion_Values+0x10c>
 8006302:	2364      	movs	r3, #100	; 0x64
 8006304:	4a2e      	ldr	r2, [pc, #184]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 8006306:	6093      	str	r3, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8006308:	4b2d      	ldr	r3, [pc, #180]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	4b2b      	ldr	r3, [pc, #172]	; (80063bc <Reset_Motion_Values+0x1c4>)
 800630e:	fb83 1302 	smull	r1, r3, r3, r2
 8006312:	11d9      	asrs	r1, r3, #7
 8006314:	17d3      	asrs	r3, r2, #31
 8006316:	1acb      	subs	r3, r1, r3
 8006318:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800631c:	fb01 f303 	mul.w	r3, r1, r3
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d103      	bne.n	800632e <Reset_Motion_Values+0x136>
 8006326:	4b27      	ldr	r3, [pc, #156]	; (80063c4 <Reset_Motion_Values+0x1cc>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	425b      	negs	r3, r3
 800632c:	e000      	b.n	8006330 <Reset_Motion_Values+0x138>
 800632e:	2303      	movs	r3, #3
 8006330:	4a24      	ldr	r2, [pc, #144]	; (80063c4 <Reset_Motion_Values+0x1cc>)
 8006332:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8006334:	4b22      	ldr	r3, [pc, #136]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	4b20      	ldr	r3, [pc, #128]	; (80063bc <Reset_Motion_Values+0x1c4>)
 800633a:	fb83 1302 	smull	r1, r3, r3, r2
 800633e:	11d9      	asrs	r1, r3, #7
 8006340:	17d3      	asrs	r3, r2, #31
 8006342:	1acb      	subs	r3, r1, r3
 8006344:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006348:	fb01 f303 	mul.w	r3, r1, r3
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d103      	bne.n	800635a <Reset_Motion_Values+0x162>
 8006352:	4b1c      	ldr	r3, [pc, #112]	; (80063c4 <Reset_Motion_Values+0x1cc>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	425b      	negs	r3, r3
 8006358:	e001      	b.n	800635e <Reset_Motion_Values+0x166>
 800635a:	f06f 0302 	mvn.w	r3, #2
 800635e:	4a19      	ldr	r2, [pc, #100]	; (80063c4 <Reset_Motion_Values+0x1cc>)
 8006360:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8006362:	4b17      	ldr	r3, [pc, #92]	; (80063c0 <Reset_Motion_Values+0x1c8>)
 8006364:	689a      	ldr	r2, [r3, #8]
 8006366:	4b15      	ldr	r3, [pc, #84]	; (80063bc <Reset_Motion_Values+0x1c4>)
 8006368:	fb83 1302 	smull	r1, r3, r3, r2
 800636c:	11d9      	asrs	r1, r3, #7
 800636e:	17d3      	asrs	r3, r2, #31
 8006370:	1acb      	subs	r3, r1, r3
 8006372:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006376:	fb01 f303 	mul.w	r3, r1, r3
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d103      	bne.n	8006388 <Reset_Motion_Values+0x190>
 8006380:	4b10      	ldr	r3, [pc, #64]	; (80063c4 <Reset_Motion_Values+0x1cc>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	425b      	negs	r3, r3
 8006386:	e000      	b.n	800638a <Reset_Motion_Values+0x192>
 8006388:	2303      	movs	r3, #3
 800638a:	4a0e      	ldr	r2, [pc, #56]	; (80063c4 <Reset_Motion_Values+0x1cc>)
 800638c:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 800638e:	4b0e      	ldr	r3, [pc, #56]	; (80063c8 <Reset_Motion_Values+0x1d0>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	425b      	negs	r3, r3
 8006394:	4a0c      	ldr	r2, [pc, #48]	; (80063c8 <Reset_Motion_Values+0x1d0>)
 8006396:	6013      	str	r3, [r2, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <Reset_Motion_Values+0x1d0>)
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	425b      	negs	r3, r3
 800639e:	4a0a      	ldr	r2, [pc, #40]	; (80063c8 <Reset_Motion_Values+0x1d0>)
 80063a0:	6053      	str	r3, [r2, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 80063a2:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <Reset_Motion_Values+0x1d0>)
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	425b      	negs	r3, r3
 80063a8:	4a07      	ldr	r2, [pc, #28]	; (80063c8 <Reset_Motion_Values+0x1d0>)
 80063aa:	6093      	str	r3, [r2, #8]
}
 80063ac:	bf00      	nop
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20000430 	.word	0x20000430
 80063bc:	10624dd3 	.word	0x10624dd3
 80063c0:	2000043c 	.word	0x2000043c
 80063c4:	20000448 	.word	0x20000448
 80063c8:	20000454 	.word	0x20000454

080063cc <getBlueNRGVersion>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80063cc:	b590      	push	{r4, r7, lr}
 80063ce:	b089      	sub	sp, #36	; 0x24
 80063d0:	af02      	add	r7, sp, #8
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 80063d6:	f107 0410 	add.w	r4, r7, #16
 80063da:	f107 0215 	add.w	r2, r7, #21
 80063de:	f107 0112 	add.w	r1, r7, #18
 80063e2:	f107 0016 	add.w	r0, r7, #22
 80063e6:	f107 030e 	add.w	r3, r7, #14
 80063ea:	9300      	str	r3, [sp, #0]
 80063ec:	4623      	mov	r3, r4
 80063ee:	f00a f924 	bl	801063a <hci_read_local_version_information>
 80063f2:	4603      	mov	r3, r0
 80063f4:	75fb      	strb	r3, [r7, #23]
                                              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80063f6:	7dfb      	ldrb	r3, [r7, #23]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d126      	bne.n	800644a <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 80063fc:	8a7b      	ldrh	r3, [r7, #18]
 80063fe:	0a1b      	lsrs	r3, r3, #8
 8006400:	b29b      	uxth	r3, r3
 8006402:	b2da      	uxtb	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8006408:	8a7b      	ldrh	r3, [r7, #18]
 800640a:	021b      	lsls	r3, r3, #8
 800640c:	b29a      	uxth	r2, r3
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	881b      	ldrh	r3, [r3, #0]
 8006416:	b21a      	sxth	r2, r3
 8006418:	89fb      	ldrh	r3, [r7, #14]
 800641a:	091b      	lsrs	r3, r3, #4
 800641c:	b29b      	uxth	r3, r3
 800641e:	011b      	lsls	r3, r3, #4
 8006420:	b21b      	sxth	r3, r3
 8006422:	b2db      	uxtb	r3, r3
 8006424:	b21b      	sxth	r3, r3
 8006426:	4313      	orrs	r3, r2
 8006428:	b21b      	sxth	r3, r3
 800642a:	b29a      	uxth	r2, r3
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b21a      	sxth	r2, r3
 8006436:	89fb      	ldrh	r3, [r7, #14]
 8006438:	b21b      	sxth	r3, r3
 800643a:	f003 030f 	and.w	r3, r3, #15
 800643e:	b21b      	sxth	r3, r3
 8006440:	4313      	orrs	r3, r2
 8006442:	b21b      	sxth	r3, r3
 8006444:	b29a      	uxth	r2, r3
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	801a      	strh	r2, [r3, #0]
  }
  return status;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
}
 800644c:	4618      	mov	r0, r3
 800644e:	371c      	adds	r7, #28
 8006450:	46bd      	mov	sp, r7
 8006452:	bd90      	pop	{r4, r7, pc}

08006454 <BSP_PB_Callback>:
 *
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 800645e:	4b04      	ldr	r3, [pc, #16]	; (8006470 <BSP_PB_Callback+0x1c>)
 8006460:	2201      	movs	r2, #1
 8006462:	701a      	strb	r2, [r3, #0]
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	200000d2 	.word	0x200000d2

08006474 <hci_le_connection_complete_event>:
                                      uint8_t Peer_Address[6],
                                      uint16_t Conn_Interval,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint8_t Master_Clock_Accuracy)
{
 8006474:	b590      	push	{r4, r7, lr}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	4604      	mov	r4, r0
 800647c:	4608      	mov	r0, r1
 800647e:	4611      	mov	r1, r2
 8006480:	461a      	mov	r2, r3
 8006482:	4623      	mov	r3, r4
 8006484:	71fb      	strb	r3, [r7, #7]
 8006486:	4603      	mov	r3, r0
 8006488:	80bb      	strh	r3, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	71bb      	strb	r3, [r7, #6]
 800648e:	4613      	mov	r3, r2
 8006490:	70fb      	strb	r3, [r7, #3]
  connected = TRUE;
 8006492:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <hci_le_connection_complete_event+0x44>)
 8006494:	2201      	movs	r2, #1
 8006496:	701a      	strb	r2, [r3, #0]
#if (!SECURE_PAIRING)
  pairing = TRUE;
 8006498:	4b08      	ldr	r3, [pc, #32]	; (80064bc <hci_le_connection_complete_event+0x48>)
 800649a:	2201      	movs	r2, #1
 800649c:	701a      	strb	r2, [r3, #0]
  paired = TRUE;
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <hci_le_connection_complete_event+0x4c>)
 80064a0:	2201      	movs	r2, #1
 80064a2:	701a      	strb	r2, [r3, #0]
#endif
  connection_handle = Connection_Handle;
 80064a4:	4a07      	ldr	r2, [pc, #28]	; (80064c4 <hci_le_connection_complete_event+0x50>)
 80064a6:	88bb      	ldrh	r3, [r7, #4]
 80064a8:	8013      	strh	r3, [r2, #0]

  PRINT_DBG("Connected (%02x %02x %02x %02x %02x %02x)\r\n", Peer_Address[5], Peer_Address[4], Peer_Address[3],
                                                             Peer_Address[2], Peer_Address[1], Peer_Address[0]);

  BSP_LED_Off(LED2); //activity led
 80064aa:	2000      	movs	r0, #0
 80064ac:	f002 f8ce 	bl	800864c <BSP_LED_Off>
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd90      	pop	{r4, r7, pc}
 80064b8:	2000042a 	.word	0x2000042a
 80064bc:	2000042b 	.word	0x2000042b
 80064c0:	2000042c 	.word	0x2000042c
 80064c4:	20000428 	.word	0x20000428

080064c8 <hci_disconnection_complete_event>:
 * @retval See file bluenrg1_events.h
 */
void hci_disconnection_complete_event(uint8_t Status,
                                      uint16_t Connection_Handle,
                                      uint8_t Reason)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	71fb      	strb	r3, [r7, #7]
 80064d2:	460b      	mov	r3, r1
 80064d4:	80bb      	strh	r3, [r7, #4]
 80064d6:	4613      	mov	r3, r2
 80064d8:	71bb      	strb	r3, [r7, #6]
  connected = FALSE;
 80064da:	4b0b      	ldr	r3, [pc, #44]	; (8006508 <hci_disconnection_complete_event+0x40>)
 80064dc:	2200      	movs	r2, #0
 80064de:	701a      	strb	r2, [r3, #0]
  pairing = FALSE;
 80064e0:	4b0a      	ldr	r3, [pc, #40]	; (800650c <hci_disconnection_complete_event+0x44>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
  paired = FALSE;
 80064e6:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <hci_disconnection_complete_event+0x48>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]

  /* Make the device connectable again */
  set_connectable = TRUE;
 80064ec:	4b09      	ldr	r3, [pc, #36]	; (8006514 <hci_disconnection_complete_event+0x4c>)
 80064ee:	2201      	movs	r2, #1
 80064f0:	701a      	strb	r2, [r3, #0]
  connection_handle = 0;
 80064f2:	4b09      	ldr	r3, [pc, #36]	; (8006518 <hci_disconnection_complete_event+0x50>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	801a      	strh	r2, [r3, #0]
  PRINT_DBG("Disconnected (0x%02x)\r\n", Reason);

  BSP_LED_On(LED2); //activity led
 80064f8:	2000      	movs	r0, #0
 80064fa:	f002 f891 	bl	8008620 <BSP_LED_On>
}
 80064fe:	bf00      	nop
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	2000042a 	.word	0x2000042a
 800650c:	2000042b 	.word	0x2000042b
 8006510:	2000042c 	.word	0x2000042c
 8006514:	20000009 	.word	0x20000009
 8006518:	20000428 	.word	0x20000428

0800651c <aci_gatt_read_permit_req_event>:
 * @retval See file bluenrg1_events.h
 */
void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	4603      	mov	r3, r0
 8006524:	80fb      	strh	r3, [r7, #6]
 8006526:	460b      	mov	r3, r1
 8006528:	80bb      	strh	r3, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	807b      	strh	r3, [r7, #2]
  Read_Request_CB(Attribute_Handle);
 800652e:	88bb      	ldrh	r3, [r7, #4]
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fc0b 	bl	8006d4c <Read_Request_CB>
}
 8006536:	bf00      	nop
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
                                       uint16_t Attribute_Handle,
                                       uint16_t Offset,
                                       uint16_t Attr_Data_Length,
                                       uint8_t Attr_Data[])
{
 800653e:	b590      	push	{r4, r7, lr}
 8006540:	b085      	sub	sp, #20
 8006542:	af02      	add	r7, sp, #8
 8006544:	4604      	mov	r4, r0
 8006546:	4608      	mov	r0, r1
 8006548:	4611      	mov	r1, r2
 800654a:	461a      	mov	r2, r3
 800654c:	4623      	mov	r3, r4
 800654e:	80fb      	strh	r3, [r7, #6]
 8006550:	4603      	mov	r3, r0
 8006552:	80bb      	strh	r3, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	807b      	strh	r3, [r7, #2]
 8006558:	4613      	mov	r3, r2
 800655a:	803b      	strh	r3, [r7, #0]
  Attribute_Modified_Request_CB(Connection_Handle, Attribute_Handle, Offset, Attr_Data_Length, Attr_Data);
 800655c:	883b      	ldrh	r3, [r7, #0]
 800655e:	b2dc      	uxtb	r4, r3
 8006560:	887a      	ldrh	r2, [r7, #2]
 8006562:	88b9      	ldrh	r1, [r7, #4]
 8006564:	88f8      	ldrh	r0, [r7, #6]
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	4623      	mov	r3, r4
 800656c:	f000 fcc2 	bl	8006ef4 <Attribute_Modified_Request_CB>
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	bd90      	pop	{r4, r7, pc}

08006578 <aci_gap_pass_key_req_event>:
 *         aci_gap_pass_key_resp command.
 * @param  See file bluenrg1_events.h
 * @retval See file bluenrg1_events.h
 */
void aci_gap_pass_key_req_event(uint16_t Connection_Handle)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	4603      	mov	r3, r0
 8006580:	80fb      	strh	r3, [r7, #6]
  uint8_t ret;

  ret = aci_gap_pass_key_resp(connection_handle, PERIPHERAL_PASS_KEY);
 8006582:	4b06      	ldr	r3, [pc, #24]	; (800659c <aci_gap_pass_key_req_event+0x24>)
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29b      	uxth	r3, r3
 8006588:	4905      	ldr	r1, [pc, #20]	; (80065a0 <aci_gap_pass_key_req_event+0x28>)
 800658a:	4618      	mov	r0, r3
 800658c:	f007 fd7c 	bl	800e088 <aci_gap_pass_key_resp>
 8006590:	4603      	mov	r3, r0
 8006592:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINT_DBG("aci_gap_pass_key_resp failed:0x%02x\r\n", ret);
  } else {
    PRINT_DBG("aci_gap_pass_key_resp OK\r\n");
  }
}
 8006594:	bf00      	nop
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000428 	.word	0x20000428
 80065a0:	0001e240 	.word	0x0001e240

080065a4 <aci_gap_pairing_complete_event>:
 *         timeout has occurred so that the upper layer can decide to disconnect the link.
 * @param  See file bluenrg1_events.h
 * @retval See file bluenrg1_events.h
 */
void aci_gap_pairing_complete_event(uint16_t connection_handle, uint8_t status, uint8_t reason)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	80fb      	strh	r3, [r7, #6]
 80065ae:	460b      	mov	r3, r1
 80065b0:	717b      	strb	r3, [r7, #5]
 80065b2:	4613      	mov	r3, r2
 80065b4:	713b      	strb	r3, [r7, #4]
  if (status == 0x02) { /* Pairing Failed */
 80065b6:	797b      	ldrb	r3, [r7, #5]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d002      	beq.n	80065c2 <aci_gap_pairing_complete_event+0x1e>
    PRINT_DBG("aci_gap_pairing_complete_event failed:0x%02x with reason 0x%02x\r\n", status, reason);
  }
  else {
    paired = TRUE;
 80065bc:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <aci_gap_pairing_complete_event+0x2c>)
 80065be:	2201      	movs	r2, #1
 80065c0:	701a      	strb	r2, [r3, #0]
    PRINT_DBG("aci_gap_pairing_complete_event with status 0x%02x\r\n", status);
  }
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	2000042c 	.word	0x2000042c

080065d4 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 80065d4:	b590      	push	{r4, r7, lr}
 80065d6:	b08d      	sub	sp, #52	; 0x34
 80065d8:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 5;
 80065da:	2305      	movs	r3, #5
 80065dc:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 80065de:	7dfb      	ldrb	r3, [r7, #23]
 80065e0:	461a      	mov	r2, r3
 80065e2:	0052      	lsls	r2, r2, #1
 80065e4:	4413      	add	r3, r2
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	3301      	adds	r3, #1
 80065ea:	75bb      	strb	r3, [r7, #22]

  /* add HW_SENS_W2ST service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 80065ec:	231b      	movs	r3, #27
 80065ee:	713b      	strb	r3, [r7, #4]
 80065f0:	23c5      	movs	r3, #197	; 0xc5
 80065f2:	717b      	strb	r3, [r7, #5]
 80065f4:	23d5      	movs	r3, #213	; 0xd5
 80065f6:	71bb      	strb	r3, [r7, #6]
 80065f8:	23a5      	movs	r3, #165	; 0xa5
 80065fa:	71fb      	strb	r3, [r7, #7]
 80065fc:	2302      	movs	r3, #2
 80065fe:	723b      	strb	r3, [r7, #8]
 8006600:	2300      	movs	r3, #0
 8006602:	727b      	strb	r3, [r7, #9]
 8006604:	23b4      	movs	r3, #180	; 0xb4
 8006606:	72bb      	strb	r3, [r7, #10]
 8006608:	239a      	movs	r3, #154	; 0x9a
 800660a:	72fb      	strb	r3, [r7, #11]
 800660c:	23e1      	movs	r3, #225	; 0xe1
 800660e:	733b      	strb	r3, [r7, #12]
 8006610:	2311      	movs	r3, #17
 8006612:	737b      	strb	r3, [r7, #13]
 8006614:	2301      	movs	r3, #1
 8006616:	73bb      	strb	r3, [r7, #14]
 8006618:	2300      	movs	r3, #0
 800661a:	73fb      	strb	r3, [r7, #15]
 800661c:	2300      	movs	r3, #0
 800661e:	743b      	strb	r3, [r7, #16]
 8006620:	2300      	movs	r3, #0
 8006622:	747b      	strb	r3, [r7, #17]
 8006624:	2300      	movs	r3, #0
 8006626:	74bb      	strb	r3, [r7, #18]
 8006628:	2300      	movs	r3, #0
 800662a:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800662c:	4b51      	ldr	r3, [pc, #324]	; (8006774 <Add_HWServW2ST_Service+0x1a0>)
 800662e:	461c      	mov	r4, r3
 8006630:	1d3b      	adds	r3, r7, #4
 8006632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 8006638:	7dbb      	ldrb	r3, [r7, #22]
 800663a:	4a4f      	ldr	r2, [pc, #316]	; (8006778 <Add_HWServW2ST_Service+0x1a4>)
 800663c:	9200      	str	r2, [sp, #0]
 800663e:	2201      	movs	r2, #1
 8006640:	494c      	ldr	r1, [pc, #304]	; (8006774 <Add_HWServW2ST_Service+0x1a0>)
 8006642:	2002      	movs	r0, #2
 8006644:	f007 ff6b 	bl	800e51e <aci_gatt_add_service>
 8006648:	4603      	mov	r3, r0
 800664a:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 800664c:	7d7b      	ldrb	r3, [r7, #21]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <Add_HWServW2ST_Service+0x82>
    return BLE_STATUS_ERROR;
 8006652:	2347      	movs	r3, #71	; 0x47
 8006654:	e08a      	b.n	800676c <Add_HWServW2ST_Service+0x198>

  /* Fill the Environmental BLE Characteristc */
  COPY_ENVIRONMENTAL_W2ST_CHAR_UUID(uuid);
 8006656:	231b      	movs	r3, #27
 8006658:	713b      	strb	r3, [r7, #4]
 800665a:	23c5      	movs	r3, #197	; 0xc5
 800665c:	717b      	strb	r3, [r7, #5]
 800665e:	23d5      	movs	r3, #213	; 0xd5
 8006660:	71bb      	strb	r3, [r7, #6]
 8006662:	23a5      	movs	r3, #165	; 0xa5
 8006664:	71fb      	strb	r3, [r7, #7]
 8006666:	2302      	movs	r3, #2
 8006668:	723b      	strb	r3, [r7, #8]
 800666a:	2300      	movs	r3, #0
 800666c:	727b      	strb	r3, [r7, #9]
 800666e:	2336      	movs	r3, #54	; 0x36
 8006670:	72bb      	strb	r3, [r7, #10]
 8006672:	23ac      	movs	r3, #172	; 0xac
 8006674:	72fb      	strb	r3, [r7, #11]
 8006676:	23e1      	movs	r3, #225	; 0xe1
 8006678:	733b      	strb	r3, [r7, #12]
 800667a:	2311      	movs	r3, #17
 800667c:	737b      	strb	r3, [r7, #13]
 800667e:	2301      	movs	r3, #1
 8006680:	73bb      	strb	r3, [r7, #14]
 8006682:	2300      	movs	r3, #0
 8006684:	73fb      	strb	r3, [r7, #15]
 8006686:	2300      	movs	r3, #0
 8006688:	743b      	strb	r3, [r7, #16]
 800668a:	2300      	movs	r3, #0
 800668c:	747b      	strb	r3, [r7, #17]
 800668e:	2300      	movs	r3, #0
 8006690:	74bb      	strb	r3, [r7, #18]
 8006692:	2300      	movs	r3, #0
 8006694:	74fb      	strb	r3, [r7, #19]
  uuid[14] |= 0x04; /* One Temperature value*/
 8006696:	7cbb      	ldrb	r3, [r7, #18]
 8006698:	f043 0304 	orr.w	r3, r3, #4
 800669c:	b2db      	uxtb	r3, r3
 800669e:	74bb      	strb	r3, [r7, #18]
  uuid[14] |= 0x10; /* Pressure value*/
 80066a0:	7cbb      	ldrb	r3, [r7, #18]
 80066a2:	f043 0310 	orr.w	r3, r3, #16
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	74bb      	strb	r3, [r7, #18]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80066aa:	4b34      	ldr	r3, [pc, #208]	; (800677c <Add_HWServW2ST_Service+0x1a8>)
 80066ac:	461c      	mov	r4, r3
 80066ae:	1d3b      	adds	r3, r7, #4
 80066b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 80066b6:	4b30      	ldr	r3, [pc, #192]	; (8006778 <Add_HWServW2ST_Service+0x1a4>)
 80066b8:	8818      	ldrh	r0, [r3, #0]
 80066ba:	4b31      	ldr	r3, [pc, #196]	; (8006780 <Add_HWServW2ST_Service+0x1ac>)
 80066bc:	9305      	str	r3, [sp, #20]
 80066be:	2300      	movs	r3, #0
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	2310      	movs	r3, #16
 80066c4:	9303      	str	r3, [sp, #12]
 80066c6:	2304      	movs	r3, #4
 80066c8:	9302      	str	r3, [sp, #8]
 80066ca:	2300      	movs	r3, #0
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	2312      	movs	r3, #18
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	2308      	movs	r3, #8
 80066d4:	4a29      	ldr	r2, [pc, #164]	; (800677c <Add_HWServW2ST_Service+0x1a8>)
 80066d6:	2102      	movs	r1, #2
 80066d8:	f007 fff7 	bl	800e6ca <aci_gatt_add_char>
 80066dc:	4603      	mov	r3, r0
 80066de:	757b      	strb	r3, [r7, #21]
                           2+2+4,
                           CHAR_PROP_NOTIFY|CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &EnvironmentalCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80066e0:	7d7b      	ldrb	r3, [r7, #21]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d001      	beq.n	80066ea <Add_HWServW2ST_Service+0x116>
    return BLE_STATUS_ERROR;
 80066e6:	2347      	movs	r3, #71	; 0x47
 80066e8:	e040      	b.n	800676c <Add_HWServW2ST_Service+0x198>

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 80066ea:	231b      	movs	r3, #27
 80066ec:	713b      	strb	r3, [r7, #4]
 80066ee:	23c5      	movs	r3, #197	; 0xc5
 80066f0:	717b      	strb	r3, [r7, #5]
 80066f2:	23d5      	movs	r3, #213	; 0xd5
 80066f4:	71bb      	strb	r3, [r7, #6]
 80066f6:	23a5      	movs	r3, #165	; 0xa5
 80066f8:	71fb      	strb	r3, [r7, #7]
 80066fa:	2302      	movs	r3, #2
 80066fc:	723b      	strb	r3, [r7, #8]
 80066fe:	2300      	movs	r3, #0
 8006700:	727b      	strb	r3, [r7, #9]
 8006702:	2336      	movs	r3, #54	; 0x36
 8006704:	72bb      	strb	r3, [r7, #10]
 8006706:	23ac      	movs	r3, #172	; 0xac
 8006708:	72fb      	strb	r3, [r7, #11]
 800670a:	23e1      	movs	r3, #225	; 0xe1
 800670c:	733b      	strb	r3, [r7, #12]
 800670e:	2311      	movs	r3, #17
 8006710:	737b      	strb	r3, [r7, #13]
 8006712:	2301      	movs	r3, #1
 8006714:	73bb      	strb	r3, [r7, #14]
 8006716:	2300      	movs	r3, #0
 8006718:	73fb      	strb	r3, [r7, #15]
 800671a:	2300      	movs	r3, #0
 800671c:	743b      	strb	r3, [r7, #16]
 800671e:	2300      	movs	r3, #0
 8006720:	747b      	strb	r3, [r7, #17]
 8006722:	23e0      	movs	r3, #224	; 0xe0
 8006724:	74bb      	strb	r3, [r7, #18]
 8006726:	2300      	movs	r3, #0
 8006728:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 800672a:	4b14      	ldr	r3, [pc, #80]	; (800677c <Add_HWServW2ST_Service+0x1a8>)
 800672c:	461c      	mov	r4, r3
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006732:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <Add_HWServW2ST_Service+0x1a4>)
 8006738:	8818      	ldrh	r0, [r3, #0]
 800673a:	4b12      	ldr	r3, [pc, #72]	; (8006784 <Add_HWServW2ST_Service+0x1b0>)
 800673c:	9305      	str	r3, [sp, #20]
 800673e:	2300      	movs	r3, #0
 8006740:	9304      	str	r3, [sp, #16]
 8006742:	2310      	movs	r3, #16
 8006744:	9303      	str	r3, [sp, #12]
 8006746:	2304      	movs	r3, #4
 8006748:	9302      	str	r3, [sp, #8]
 800674a:	2300      	movs	r3, #0
 800674c:	9301      	str	r3, [sp, #4]
 800674e:	2310      	movs	r3, #16
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	2314      	movs	r3, #20
 8006754:	4a09      	ldr	r2, [pc, #36]	; (800677c <Add_HWServW2ST_Service+0x1a8>)
 8006756:	2102      	movs	r1, #2
 8006758:	f007 ffb7 	bl	800e6ca <aci_gatt_add_char>
 800675c:	4603      	mov	r3, r0
 800675e:	757b      	strb	r3, [r7, #21]
                           2+3*3*2,
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8006760:	7d7b      	ldrb	r3, [r7, #21]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <Add_HWServW2ST_Service+0x196>
    return BLE_STATUS_ERROR;
 8006766:	2347      	movs	r3, #71	; 0x47
 8006768:	e000      	b.n	800676c <Add_HWServW2ST_Service+0x198>

  return BLE_STATUS_SUCCESS;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	bd90      	pop	{r4, r7, pc}
 8006774:	20000208 	.word	0x20000208
 8006778:	200000d8 	.word	0x200000d8
 800677c:	20000218 	.word	0x20000218
 8006780:	200000da 	.word	0x200000da
 8006784:	200000dc 	.word	0x200000dc

08006788 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 8006788:	b590      	push	{r4, r7, lr}
 800678a:	b08d      	sub	sp, #52	; 0x34
 800678c:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];
  /* num of characteristics of this service */
  uint8_t char_number = 1;
 800678e:	2301      	movs	r3, #1
 8006790:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	461a      	mov	r2, r3
 8006796:	0052      	lsls	r2, r2, #1
 8006798:	4413      	add	r3, r2
 800679a:	b2db      	uxtb	r3, r3
 800679c:	3301      	adds	r3, #1
 800679e:	75bb      	strb	r3, [r7, #22]

  /* add SW_SENS_W2ST service */
  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
 80067a0:	231b      	movs	r3, #27
 80067a2:	713b      	strb	r3, [r7, #4]
 80067a4:	23c5      	movs	r3, #197	; 0xc5
 80067a6:	717b      	strb	r3, [r7, #5]
 80067a8:	23d5      	movs	r3, #213	; 0xd5
 80067aa:	71bb      	strb	r3, [r7, #6]
 80067ac:	23a5      	movs	r3, #165	; 0xa5
 80067ae:	71fb      	strb	r3, [r7, #7]
 80067b0:	2302      	movs	r3, #2
 80067b2:	723b      	strb	r3, [r7, #8]
 80067b4:	2300      	movs	r3, #0
 80067b6:	727b      	strb	r3, [r7, #9]
 80067b8:	23b4      	movs	r3, #180	; 0xb4
 80067ba:	72bb      	strb	r3, [r7, #10]
 80067bc:	239a      	movs	r3, #154	; 0x9a
 80067be:	72fb      	strb	r3, [r7, #11]
 80067c0:	23e1      	movs	r3, #225	; 0xe1
 80067c2:	733b      	strb	r3, [r7, #12]
 80067c4:	2311      	movs	r3, #17
 80067c6:	737b      	strb	r3, [r7, #13]
 80067c8:	2302      	movs	r3, #2
 80067ca:	73bb      	strb	r3, [r7, #14]
 80067cc:	2300      	movs	r3, #0
 80067ce:	73fb      	strb	r3, [r7, #15]
 80067d0:	2300      	movs	r3, #0
 80067d2:	743b      	strb	r3, [r7, #16]
 80067d4:	2300      	movs	r3, #0
 80067d6:	747b      	strb	r3, [r7, #17]
 80067d8:	2300      	movs	r3, #0
 80067da:	74bb      	strb	r3, [r7, #18]
 80067dc:	2300      	movs	r3, #0
 80067de:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80067e0:	4b2d      	ldr	r3, [pc, #180]	; (8006898 <Add_SWServW2ST_Service+0x110>)
 80067e2:	461c      	mov	r4, r3
 80067e4:	1d3b      	adds	r3, r7, #4
 80067e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80067e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128, &service_uuid, PRIMARY_SERVICE,
 80067ec:	7dbb      	ldrb	r3, [r7, #22]
 80067ee:	4a2b      	ldr	r2, [pc, #172]	; (800689c <Add_SWServW2ST_Service+0x114>)
 80067f0:	9200      	str	r2, [sp, #0]
 80067f2:	2201      	movs	r2, #1
 80067f4:	4928      	ldr	r1, [pc, #160]	; (8006898 <Add_SWServW2ST_Service+0x110>)
 80067f6:	2002      	movs	r0, #2
 80067f8:	f007 fe91 	bl	800e51e <aci_gatt_add_service>
 80067fc:	4603      	mov	r3, r0
 80067fe:	757b      	strb	r3, [r7, #21]
                             max_attribute_records, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8006800:	7d7b      	ldrb	r3, [r7, #21]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d13f      	bne.n	8006886 <Add_SWServW2ST_Service+0xfe>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
 8006806:	231b      	movs	r3, #27
 8006808:	713b      	strb	r3, [r7, #4]
 800680a:	23c5      	movs	r3, #197	; 0xc5
 800680c:	717b      	strb	r3, [r7, #5]
 800680e:	23d5      	movs	r3, #213	; 0xd5
 8006810:	71bb      	strb	r3, [r7, #6]
 8006812:	23a5      	movs	r3, #165	; 0xa5
 8006814:	71fb      	strb	r3, [r7, #7]
 8006816:	2302      	movs	r3, #2
 8006818:	723b      	strb	r3, [r7, #8]
 800681a:	2300      	movs	r3, #0
 800681c:	727b      	strb	r3, [r7, #9]
 800681e:	2336      	movs	r3, #54	; 0x36
 8006820:	72bb      	strb	r3, [r7, #10]
 8006822:	23ac      	movs	r3, #172	; 0xac
 8006824:	72fb      	strb	r3, [r7, #11]
 8006826:	23e1      	movs	r3, #225	; 0xe1
 8006828:	733b      	strb	r3, [r7, #12]
 800682a:	2311      	movs	r3, #17
 800682c:	737b      	strb	r3, [r7, #13]
 800682e:	2301      	movs	r3, #1
 8006830:	73bb      	strb	r3, [r7, #14]
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]
 8006836:	2300      	movs	r3, #0
 8006838:	743b      	strb	r3, [r7, #16]
 800683a:	2301      	movs	r3, #1
 800683c:	747b      	strb	r3, [r7, #17]
 800683e:	2300      	movs	r3, #0
 8006840:	74bb      	strb	r3, [r7, #18]
 8006842:	2300      	movs	r3, #0
 8006844:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8006846:	4b16      	ldr	r3, [pc, #88]	; (80068a0 <Add_SWServW2ST_Service+0x118>)
 8006848:	461c      	mov	r4, r3
 800684a:	1d3b      	adds	r3, r7, #4
 800684c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800684e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, &char_uuid,
 8006852:	4b12      	ldr	r3, [pc, #72]	; (800689c <Add_SWServW2ST_Service+0x114>)
 8006854:	8818      	ldrh	r0, [r3, #0]
 8006856:	4b13      	ldr	r3, [pc, #76]	; (80068a4 <Add_SWServW2ST_Service+0x11c>)
 8006858:	9305      	str	r3, [sp, #20]
 800685a:	2300      	movs	r3, #0
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	2310      	movs	r3, #16
 8006860:	9303      	str	r3, [sp, #12]
 8006862:	2304      	movs	r3, #4
 8006864:	9302      	str	r3, [sp, #8]
 8006866:	2300      	movs	r3, #0
 8006868:	9301      	str	r3, [sp, #4]
 800686a:	2310      	movs	r3, #16
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	2308      	movs	r3, #8
 8006870:	4a0b      	ldr	r2, [pc, #44]	; (80068a0 <Add_SWServW2ST_Service+0x118>)
 8006872:	2102      	movs	r1, #2
 8006874:	f007 ff29 	bl	800e6ca <aci_gatt_add_char>
 8006878:	4603      	mov	r3, r0
 800687a:	757b      	strb	r3, [r7, #21]
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800687c:	7d7b      	ldrb	r3, [r7, #21]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d103      	bne.n	800688a <Add_SWServW2ST_Service+0x102>
    goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8006882:	2300      	movs	r3, #0
 8006884:	e003      	b.n	800688e <Add_SWServW2ST_Service+0x106>
    goto fail;
 8006886:	bf00      	nop
 8006888:	e000      	b.n	800688c <Add_SWServW2ST_Service+0x104>
    goto fail;
 800688a:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 800688c:	2347      	movs	r3, #71	; 0x47
}
 800688e:	4618      	mov	r0, r3
 8006890:	371c      	adds	r7, #28
 8006892:	46bd      	mov	sp, r7
 8006894:	bd90      	pop	{r4, r7, pc}
 8006896:	bf00      	nop
 8006898:	20000208 	.word	0x20000208
 800689c:	200000de 	.word	0x200000de
 80068a0:	20000218 	.word	0x20000218
 80068a4:	200000e0 	.word	0x200000e0

080068a8 <Add_ConsoleW2ST_Service>:
 * @brief  Add the Console service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_ConsoleW2ST_Service(void)
{
 80068a8:	b590      	push	{r4, r7, lr}
 80068aa:	b08d      	sub	sp, #52	; 0x34
 80068ac:	af06      	add	r7, sp, #24
  /* num of characteristics of this service */
  uint8_t char_number = 2;
 80068ae:	2302      	movs	r3, #2
 80068b0:	75fb      	strb	r3, [r7, #23]
  /* number of attribute records that can be added to this service */
  uint8_t max_attribute_records = 1+(3*char_number);
 80068b2:	7dfb      	ldrb	r3, [r7, #23]
 80068b4:	461a      	mov	r2, r3
 80068b6:	0052      	lsls	r2, r2, #1
 80068b8:	4413      	add	r3, r2
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	3301      	adds	r3, #1
 80068be:	75bb      	strb	r3, [r7, #22]
  tBleStatus ret;

  uint8_t uuid[16];

  COPY_CONSOLE_SERVICE_UUID(uuid);
 80068c0:	231b      	movs	r3, #27
 80068c2:	713b      	strb	r3, [r7, #4]
 80068c4:	23c5      	movs	r3, #197	; 0xc5
 80068c6:	717b      	strb	r3, [r7, #5]
 80068c8:	23d5      	movs	r3, #213	; 0xd5
 80068ca:	71bb      	strb	r3, [r7, #6]
 80068cc:	23a5      	movs	r3, #165	; 0xa5
 80068ce:	71fb      	strb	r3, [r7, #7]
 80068d0:	2302      	movs	r3, #2
 80068d2:	723b      	strb	r3, [r7, #8]
 80068d4:	2300      	movs	r3, #0
 80068d6:	727b      	strb	r3, [r7, #9]
 80068d8:	23b4      	movs	r3, #180	; 0xb4
 80068da:	72bb      	strb	r3, [r7, #10]
 80068dc:	239a      	movs	r3, #154	; 0x9a
 80068de:	72fb      	strb	r3, [r7, #11]
 80068e0:	23e1      	movs	r3, #225	; 0xe1
 80068e2:	733b      	strb	r3, [r7, #12]
 80068e4:	2311      	movs	r3, #17
 80068e6:	737b      	strb	r3, [r7, #13]
 80068e8:	230e      	movs	r3, #14
 80068ea:	73bb      	strb	r3, [r7, #14]
 80068ec:	2300      	movs	r3, #0
 80068ee:	73fb      	strb	r3, [r7, #15]
 80068f0:	2300      	movs	r3, #0
 80068f2:	743b      	strb	r3, [r7, #16]
 80068f4:	2300      	movs	r3, #0
 80068f6:	747b      	strb	r3, [r7, #17]
 80068f8:	2300      	movs	r3, #0
 80068fa:	74bb      	strb	r3, [r7, #18]
 80068fc:	2300      	movs	r3, #0
 80068fe:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8006900:	4b4d      	ldr	r3, [pc, #308]	; (8006a38 <Add_ConsoleW2ST_Service+0x190>)
 8006902:	461c      	mov	r4, r3
 8006904:	1d3b      	adds	r3, r7, #4
 8006906:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006908:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_service(UUID_TYPE_128,  &service_uuid, PRIMARY_SERVICE,
 800690c:	7dbb      	ldrb	r3, [r7, #22]
 800690e:	4a4b      	ldr	r2, [pc, #300]	; (8006a3c <Add_ConsoleW2ST_Service+0x194>)
 8006910:	9200      	str	r2, [sp, #0]
 8006912:	2201      	movs	r2, #1
 8006914:	4948      	ldr	r1, [pc, #288]	; (8006a38 <Add_ConsoleW2ST_Service+0x190>)
 8006916:	2002      	movs	r0, #2
 8006918:	f007 fe01 	bl	800e51e <aci_gatt_add_service>
 800691c:	4603      	mov	r3, r0
 800691e:	757b      	strb	r3, [r7, #21]
                             max_attribute_records,
                             &ConsoleW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8006920:	7d7b      	ldrb	r3, [r7, #21]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d17d      	bne.n	8006a22 <Add_ConsoleW2ST_Service+0x17a>
    goto fail;
  }

  COPY_TERM_CHAR_UUID(uuid);
 8006926:	231b      	movs	r3, #27
 8006928:	713b      	strb	r3, [r7, #4]
 800692a:	23c5      	movs	r3, #197	; 0xc5
 800692c:	717b      	strb	r3, [r7, #5]
 800692e:	23d5      	movs	r3, #213	; 0xd5
 8006930:	71bb      	strb	r3, [r7, #6]
 8006932:	23a5      	movs	r3, #165	; 0xa5
 8006934:	71fb      	strb	r3, [r7, #7]
 8006936:	2302      	movs	r3, #2
 8006938:	723b      	strb	r3, [r7, #8]
 800693a:	2300      	movs	r3, #0
 800693c:	727b      	strb	r3, [r7, #9]
 800693e:	2336      	movs	r3, #54	; 0x36
 8006940:	72bb      	strb	r3, [r7, #10]
 8006942:	23ac      	movs	r3, #172	; 0xac
 8006944:	72fb      	strb	r3, [r7, #11]
 8006946:	23e1      	movs	r3, #225	; 0xe1
 8006948:	733b      	strb	r3, [r7, #12]
 800694a:	2311      	movs	r3, #17
 800694c:	737b      	strb	r3, [r7, #13]
 800694e:	230e      	movs	r3, #14
 8006950:	73bb      	strb	r3, [r7, #14]
 8006952:	2300      	movs	r3, #0
 8006954:	73fb      	strb	r3, [r7, #15]
 8006956:	2301      	movs	r3, #1
 8006958:	743b      	strb	r3, [r7, #16]
 800695a:	2300      	movs	r3, #0
 800695c:	747b      	strb	r3, [r7, #17]
 800695e:	2300      	movs	r3, #0
 8006960:	74bb      	strb	r3, [r7, #18]
 8006962:	2300      	movs	r3, #0
 8006964:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8006966:	4b36      	ldr	r3, [pc, #216]	; (8006a40 <Add_ConsoleW2ST_Service+0x198>)
 8006968:	461c      	mov	r4, r3
 800696a:	1d3b      	adds	r3, r7, #4
 800696c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800696e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(ConsoleW2STHandle, UUID_TYPE_128, &char_uuid, W2ST_MAX_CHAR_LEN,
 8006972:	4b32      	ldr	r3, [pc, #200]	; (8006a3c <Add_ConsoleW2ST_Service+0x194>)
 8006974:	8818      	ldrh	r0, [r3, #0]
 8006976:	4b33      	ldr	r3, [pc, #204]	; (8006a44 <Add_ConsoleW2ST_Service+0x19c>)
 8006978:	9305      	str	r3, [sp, #20]
 800697a:	2301      	movs	r3, #1
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	2310      	movs	r3, #16
 8006980:	9303      	str	r3, [sp, #12]
 8006982:	2305      	movs	r3, #5
 8006984:	9302      	str	r3, [sp, #8]
 8006986:	2300      	movs	r3, #0
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	231e      	movs	r3, #30
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	2314      	movs	r3, #20
 8006990:	4a2b      	ldr	r2, [pc, #172]	; (8006a40 <Add_ConsoleW2ST_Service+0x198>)
 8006992:	2102      	movs	r1, #2
 8006994:	f007 fe99 	bl	800e6ca <aci_gatt_add_char>
 8006998:	4603      	mov	r3, r0
 800699a:	757b      	strb	r3, [r7, #21]
                           CHAR_PROP_NOTIFY| CHAR_PROP_WRITE_WITHOUT_RESP | CHAR_PROP_WRITE | CHAR_PROP_READ ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &TermCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800699c:	7d7b      	ldrb	r3, [r7, #21]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d141      	bne.n	8006a26 <Add_ConsoleW2ST_Service+0x17e>
    goto fail;
  }

  COPY_STDERR_CHAR_UUID(uuid);
 80069a2:	231b      	movs	r3, #27
 80069a4:	713b      	strb	r3, [r7, #4]
 80069a6:	23c5      	movs	r3, #197	; 0xc5
 80069a8:	717b      	strb	r3, [r7, #5]
 80069aa:	23d5      	movs	r3, #213	; 0xd5
 80069ac:	71bb      	strb	r3, [r7, #6]
 80069ae:	23a5      	movs	r3, #165	; 0xa5
 80069b0:	71fb      	strb	r3, [r7, #7]
 80069b2:	2302      	movs	r3, #2
 80069b4:	723b      	strb	r3, [r7, #8]
 80069b6:	2300      	movs	r3, #0
 80069b8:	727b      	strb	r3, [r7, #9]
 80069ba:	2336      	movs	r3, #54	; 0x36
 80069bc:	72bb      	strb	r3, [r7, #10]
 80069be:	23ac      	movs	r3, #172	; 0xac
 80069c0:	72fb      	strb	r3, [r7, #11]
 80069c2:	23e1      	movs	r3, #225	; 0xe1
 80069c4:	733b      	strb	r3, [r7, #12]
 80069c6:	2311      	movs	r3, #17
 80069c8:	737b      	strb	r3, [r7, #13]
 80069ca:	230e      	movs	r3, #14
 80069cc:	73bb      	strb	r3, [r7, #14]
 80069ce:	2300      	movs	r3, #0
 80069d0:	73fb      	strb	r3, [r7, #15]
 80069d2:	2302      	movs	r3, #2
 80069d4:	743b      	strb	r3, [r7, #16]
 80069d6:	2300      	movs	r3, #0
 80069d8:	747b      	strb	r3, [r7, #17]
 80069da:	2300      	movs	r3, #0
 80069dc:	74bb      	strb	r3, [r7, #18]
 80069de:	2300      	movs	r3, #0
 80069e0:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 80069e2:	4b17      	ldr	r3, [pc, #92]	; (8006a40 <Add_ConsoleW2ST_Service+0x198>)
 80069e4:	461c      	mov	r4, r3
 80069e6:	1d3b      	adds	r3, r7, #4
 80069e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80069ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(ConsoleW2STHandle, UUID_TYPE_128, &char_uuid, W2ST_MAX_CHAR_LEN,
 80069ee:	4b13      	ldr	r3, [pc, #76]	; (8006a3c <Add_ConsoleW2ST_Service+0x194>)
 80069f0:	8818      	ldrh	r0, [r3, #0]
 80069f2:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <Add_ConsoleW2ST_Service+0x1a0>)
 80069f4:	9305      	str	r3, [sp, #20]
 80069f6:	2301      	movs	r3, #1
 80069f8:	9304      	str	r3, [sp, #16]
 80069fa:	2310      	movs	r3, #16
 80069fc:	9303      	str	r3, [sp, #12]
 80069fe:	2304      	movs	r3, #4
 8006a00:	9302      	str	r3, [sp, #8]
 8006a02:	2300      	movs	r3, #0
 8006a04:	9301      	str	r3, [sp, #4]
 8006a06:	2312      	movs	r3, #18
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	2314      	movs	r3, #20
 8006a0c:	4a0c      	ldr	r2, [pc, #48]	; (8006a40 <Add_ConsoleW2ST_Service+0x198>)
 8006a0e:	2102      	movs	r1, #2
 8006a10:	f007 fe5b 	bl	800e6ca <aci_gatt_add_char>
 8006a14:	4603      	mov	r3, r0
 8006a16:	757b      	strb	r3, [r7, #21]
                           CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 1, &StdErrCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 8006a18:	7d7b      	ldrb	r3, [r7, #21]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d105      	bne.n	8006a2a <Add_ConsoleW2ST_Service+0x182>
     goto fail;
  }

  return BLE_STATUS_SUCCESS;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	e005      	b.n	8006a2e <Add_ConsoleW2ST_Service+0x186>
    goto fail;
 8006a22:	bf00      	nop
 8006a24:	e002      	b.n	8006a2c <Add_ConsoleW2ST_Service+0x184>
    goto fail;
 8006a26:	bf00      	nop
 8006a28:	e000      	b.n	8006a2c <Add_ConsoleW2ST_Service+0x184>
     goto fail;
 8006a2a:	bf00      	nop

fail:
  return BLE_STATUS_ERROR;
 8006a2c:	2347      	movs	r3, #71	; 0x47
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd90      	pop	{r4, r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000208 	.word	0x20000208
 8006a3c:	200000e2 	.word	0x200000e2
 8006a40:	20000218 	.word	0x20000218
 8006a44:	200000e4 	.word	0x200000e4
 8006a48:	200000e6 	.word	0x200000e6

08006a4c <Environmental_Update>:
 * @param  int32_t pressure value
 * @param  int16_t temperature value
 * @retval tBleStatus Status
 */
tBleStatus Environmental_Update(int32_t press, int16_t temp)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	807b      	strh	r3, [r7, #2]
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 8006a58:	f002 f8a6 	bl	8008ba8 <HAL_GetTick>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	08db      	lsrs	r3, r3, #3
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	733b      	strb	r3, [r7, #12]
 8006a64:	f002 f8a0 	bl	8008ba8 <HAL_GetTick>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	0adb      	lsrs	r3, r3, #11
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	737b      	strb	r3, [r7, #13]

  HOST_TO_LE_32(buff+2,press);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	73bb      	strb	r3, [r7, #14]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	121b      	asrs	r3, r3, #8
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	73fb      	strb	r3, [r7, #15]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	141b      	asrs	r3, r3, #16
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	743b      	strb	r3, [r7, #16]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	161b      	asrs	r3, r3, #24
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,temp);
 8006a8e:	887b      	ldrh	r3, [r7, #2]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	74bb      	strb	r3, [r7, #18]
 8006a94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a98:	121b      	asrs	r3, r3, #8
 8006a9a:	b21b      	sxth	r3, r3
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	74fb      	strb	r3, [r7, #19]

  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle,
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <Environmental_Update+0x84>)
 8006aa2:	8818      	ldrh	r0, [r3, #0]
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <Environmental_Update+0x88>)
 8006aa6:	8819      	ldrh	r1, [r3, #0]
 8006aa8:	f107 030c 	add.w	r3, r7, #12
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	2308      	movs	r3, #8
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f007 ff12 	bl	800e8da <aci_gatt_update_char_value>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	75fb      	strb	r3, [r7, #23]
                                   0, 8, buff);

  if (ret != BLE_STATUS_SUCCESS){
 8006aba:	7dfb      	ldrb	r3, [r7, #23]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <Environmental_Update+0x78>
    PRINT_DBG("Error while updating TEMP characteristic: 0x%04X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8006ac0:	2347      	movs	r3, #71	; 0x47
 8006ac2:	e000      	b.n	8006ac6 <Environmental_Update+0x7a>
  }

  return BLE_STATUS_SUCCESS;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	200000d8 	.word	0x200000d8
 8006ad4:	200000da 	.word	0x200000da

08006ad8 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	; 0x30
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8006ae4:	f002 f860 	bl	8008ba8 <HAL_GetTick>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	08db      	lsrs	r3, r3, #3
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	743b      	strb	r3, [r7, #16]
 8006af0:	f002 f85a 	bl	8008ba8 <HAL_GetTick>
 8006af4:	4603      	mov	r3, r0
 8006af6:	0adb      	lsrs	r3, r3, #11
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2, -x_axes->AXIS_X);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	425b      	negs	r3, r3
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	74bb      	strb	r3, [r7, #18]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	425b      	negs	r3, r3
 8006b0e:	121b      	asrs	r3, r3, #8
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4,  x_axes->AXIS_Y);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	753b      	strb	r3, [r7, #20]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	121b      	asrs	r3, r3, #8
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6, -x_axes->AXIS_Z);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	425b      	negs	r3, r3
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	75bb      	strb	r3, [r7, #22]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	425b      	negs	r3, r3
 8006b38:	121b      	asrs	r3, r3, #8
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,  g_axes->AXIS_X);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	763b      	strb	r3, [r7, #24]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	121b      	asrs	r3, r3, #8
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10, g_axes->AXIS_Y);
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	76bb      	strb	r3, [r7, #26]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	121b      	asrs	r3, r3, #8
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12, g_axes->AXIS_Z);
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	773b      	strb	r3, [r7, #28]
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	121b      	asrs	r3, r3, #8
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14, m_axes->AXIS_X);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	77bb      	strb	r3, [r7, #30]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	121b      	asrs	r3, r3, #8
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16, m_axes->AXIS_Y);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f887 3020 	strb.w	r3, [r7, #32]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	121b      	asrs	r3, r3, #8
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HOST_TO_LE_16(buff+18, m_axes->AXIS_Z);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	121b      	asrs	r3, r3, #8
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <Acc_Update+0x10c>)
 8006bb4:	8818      	ldrh	r0, [r3, #0]
 8006bb6:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <Acc_Update+0x110>)
 8006bb8:	8819      	ldrh	r1, [r3, #0]
 8006bba:	f107 0310 	add.w	r3, r7, #16
 8006bbe:	9300      	str	r3, [sp, #0]
 8006bc0:	2314      	movs	r3, #20
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f007 fe89 	bl	800e8da <aci_gatt_update_char_value>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8006bce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <Acc_Update+0x102>
    PRINT_DBG("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8006bd6:	2347      	movs	r3, #71	; 0x47
 8006bd8:	e000      	b.n	8006bdc <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3728      	adds	r7, #40	; 0x28
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	200000d8 	.word	0x200000d8
 8006be8:	200000dc 	.word	0x200000dc

08006bec <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b088      	sub	sp, #32
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	6078      	str	r0, [r7, #4]
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8006bf4:	f001 ffd8 	bl	8008ba8 <HAL_GetTick>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	08db      	lsrs	r3, r3, #3
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	733b      	strb	r3, [r7, #12]
 8006c00:	f001 ffd2 	bl	8008ba8 <HAL_GetTick>
 8006c04:	4603      	mov	r3, r0
 8006c06:	0adb      	lsrs	r3, r3, #11
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	737b      	strb	r3, [r7, #13]

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	73bb      	strb	r3, [r7, #14]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	121b      	asrs	r3, r3, #8
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	73fb      	strb	r3, [r7, #15]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	743b      	strb	r3, [r7, #16]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	121b      	asrs	r3, r3, #8
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	747b      	strb	r3, [r7, #17]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	74bb      	strb	r3, [r7, #18]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	121b      	asrs	r3, r3, #8
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif

  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8006c42:	4b0b      	ldr	r3, [pc, #44]	; (8006c70 <Quat_Update+0x84>)
 8006c44:	8818      	ldrh	r0, [r3, #0]
 8006c46:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <Quat_Update+0x88>)
 8006c48:	8819      	ldrh	r1, [r3, #0]
 8006c4a:	f107 030c 	add.w	r3, r7, #12
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	2308      	movs	r3, #8
 8006c52:	2200      	movs	r2, #0
 8006c54:	f007 fe41 	bl	800e8da <aci_gatt_update_char_value>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75fb      	strb	r3, [r7, #23]
				   0, 2+6*SEND_N_QUATERNIONS, buff);
  if (ret != BLE_STATUS_SUCCESS){
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <Quat_Update+0x7a>
    PRINT_DBG("Error while updating Sensor Fusion characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 8006c62:	2347      	movs	r3, #71	; 0x47
 8006c64:	e000      	b.n	8006c68 <Quat_Update+0x7c>
  }

  return BLE_STATUS_SUCCESS;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	200000de 	.word	0x200000de
 8006c74:	200000e0 	.word	0x200000e0

08006c78 <Term_Update>:
 * @param  uint8_t    *data string to write
 * @param  uint8_t    length length of string to write
 * @retval tBleStatus Status
 */
tBleStatus Term_Update(uint8_t *data,uint8_t length)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
  tBleStatus ret;
  uint8_t Offset;
  uint8_t DataToSend;

  /* Split the code in packages */
  for(Offset =0; Offset<length; Offset +=W2ST_MAX_CHAR_LEN){
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]
 8006c88:	e02d      	b.n	8006ce6 <Term_Update+0x6e>
    DataToSend = (length-Offset);
 8006c8a:	78fa      	ldrb	r2, [r7, #3]
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	73bb      	strb	r3, [r7, #14]
    DataToSend = (DataToSend>W2ST_MAX_CHAR_LEN) ?  W2ST_MAX_CHAR_LEN : DataToSend;
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	2b14      	cmp	r3, #20
 8006c96:	bf28      	it	cs
 8006c98:	2314      	movcs	r3, #20
 8006c9a:	73bb      	strb	r3, [r7, #14]

    /* keep a copy */
    memcpy(LastTermBuffer,data+Offset,DataToSend);
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	7bba      	ldrb	r2, [r7, #14]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	4814      	ldr	r0, [pc, #80]	; (8006cf8 <Term_Update+0x80>)
 8006ca8:	f00a fcc8 	bl	801163c <memcpy>
    LastTermLen = DataToSend;
 8006cac:	4a13      	ldr	r2, [pc, #76]	; (8006cfc <Term_Update+0x84>)
 8006cae:	7bbb      	ldrb	r3, [r7, #14]
 8006cb0:	7013      	strb	r3, [r2, #0]

    ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, DataToSend , data+Offset);
 8006cb2:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <Term_Update+0x88>)
 8006cb4:	8818      	ldrh	r0, [r3, #0]
 8006cb6:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <Term_Update+0x8c>)
 8006cb8:	8819      	ldrh	r1, [r3, #0]
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	7bba      	ldrb	r2, [r7, #14]
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f007 fe07 	bl	800e8da <aci_gatt_update_char_value>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	737b      	strb	r3, [r7, #13]
    if (ret != BLE_STATUS_SUCCESS) {
 8006cd0:	7b7b      	ldrb	r3, [r7, #13]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <Term_Update+0x62>
        PRINT_DBG("Term_Update: Error Updating Stdout Char\r\n");
      return BLE_STATUS_ERROR;
 8006cd6:	2347      	movs	r3, #71	; 0x47
 8006cd8:	e00a      	b.n	8006cf0 <Term_Update+0x78>
    }
    HAL_Delay(20);
 8006cda:	2014      	movs	r0, #20
 8006cdc:	f001 ff70 	bl	8008bc0 <HAL_Delay>
  for(Offset =0; Offset<length; Offset +=W2ST_MAX_CHAR_LEN){
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	3314      	adds	r3, #20
 8006ce4:	73fb      	strb	r3, [r7, #15]
 8006ce6:	7bfa      	ldrb	r2, [r7, #15]
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d3cd      	bcc.n	8006c8a <Term_Update+0x12>
  }

  return BLE_STATUS_SUCCESS;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	200001f0 	.word	0x200001f0
 8006cfc:	20000204 	.word	0x20000204
 8006d00:	200000e2 	.word	0x200000e2
 8006d04:	200000e4 	.word	0x200000e4

08006d08 <Term_Update_AfterRead>:
 * @brief  Update Terminal characteristic value after a read request
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Term_Update_AfterRead(void)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af02      	add	r7, sp, #8
  tBleStatus ret;

  ret = aci_gatt_update_char_value(ConsoleW2STHandle, TermCharHandle, 0, LastTermLen , LastTermBuffer);
 8006d0e:	4b0b      	ldr	r3, [pc, #44]	; (8006d3c <Term_Update_AfterRead+0x34>)
 8006d10:	8818      	ldrh	r0, [r3, #0]
 8006d12:	4b0b      	ldr	r3, [pc, #44]	; (8006d40 <Term_Update_AfterRead+0x38>)
 8006d14:	8819      	ldrh	r1, [r3, #0]
 8006d16:	4b0b      	ldr	r3, [pc, #44]	; (8006d44 <Term_Update_AfterRead+0x3c>)
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	4a0b      	ldr	r2, [pc, #44]	; (8006d48 <Term_Update_AfterRead+0x40>)
 8006d1c:	9200      	str	r2, [sp, #0]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f007 fddb 	bl	800e8da <aci_gatt_update_char_value>
 8006d24:	4603      	mov	r3, r0
 8006d26:	71fb      	strb	r3, [r7, #7]
  if (ret != BLE_STATUS_SUCCESS) {
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d001      	beq.n	8006d32 <Term_Update_AfterRead+0x2a>
    return BLE_STATUS_ERROR;
 8006d2e:	2347      	movs	r3, #71	; 0x47
 8006d30:	e000      	b.n	8006d34 <Term_Update_AfterRead+0x2c>
  }

  return BLE_STATUS_SUCCESS;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3708      	adds	r7, #8
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	200000e2 	.word	0x200000e2
 8006d40:	200000e4 	.word	0x200000e4
 8006d44:	20000204 	.word	0x20000204
 8006d48:	200001f0 	.word	0x200001f0

08006d4c <Read_Request_CB>:
 *
 * @param  Handle of the characteristic to update
 * @retval None
 */
void Read_Request_CB(uint16_t handle)
{
 8006d4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d50:	b08e      	sub	sp, #56	; 0x38
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	4603      	mov	r3, r0
 8006d56:	84fb      	strh	r3, [r7, #38]	; 0x26
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 8006d58:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006d5a:	4b5c      	ldr	r3, [pc, #368]	; (8006ecc <Read_Request_CB+0x180>)
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d105      	bne.n	8006d70 <Read_Request_CB+0x24>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8006d64:	4a5a      	ldr	r2, [pc, #360]	; (8006ed0 <Read_Request_CB+0x184>)
 8006d66:	495b      	ldr	r1, [pc, #364]	; (8006ed4 <Read_Request_CB+0x188>)
 8006d68:	485b      	ldr	r0, [pc, #364]	; (8006ed8 <Read_Request_CB+0x18c>)
 8006d6a:	f7ff feb5 	bl	8006ad8 <Acc_Update>
 8006d6e:	e09a      	b.n	8006ea6 <Read_Request_CB+0x15a>
  }
  else if (handle == EnvironmentalCharHandle + 1)
 8006d70:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006d72:	4b5a      	ldr	r3, [pc, #360]	; (8006edc <Read_Request_CB+0x190>)
 8006d74:	881b      	ldrh	r3, [r3, #0]
 8006d76:	3301      	adds	r3, #1
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	f040 808c 	bne.w	8006e96 <Read_Request_CB+0x14a>
  {
    float data_t, data_p;
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
 8006d7e:	f00a f8f1 	bl	8010f64 <rand>
 8006d82:	4603      	mov	r3, r0
 8006d84:	17da      	asrs	r2, r3, #31
 8006d86:	61bb      	str	r3, [r7, #24]
 8006d88:	61fa      	str	r2, [r7, #28]
 8006d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d8e:	f04f 0000 	mov.w	r0, #0
 8006d92:	f04f 0100 	mov.w	r1, #0
 8006d96:	0099      	lsls	r1, r3, #2
 8006d98:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8006d9c:	0090      	lsls	r0, r2, #2
 8006d9e:	4602      	mov	r2, r0
 8006da0:	460b      	mov	r3, r1
 8006da2:	69b9      	ldr	r1, [r7, #24]
 8006da4:	1851      	adds	r1, r2, r1
 8006da6:	6139      	str	r1, [r7, #16]
 8006da8:	69f9      	ldr	r1, [r7, #28]
 8006daa:	eb43 0101 	adc.w	r1, r3, r1
 8006dae:	6179      	str	r1, [r7, #20]
 8006db0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006db4:	f04f 0300 	mov.w	r3, #0
 8006db8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006dbc:	f7fd fc64 	bl	8004688 <__aeabi_uldivmod>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	f7fd fbd8 	bl	800457c <__aeabi_ul2d>
 8006dcc:	f04f 0200 	mov.w	r2, #0
 8006dd0:	4b43      	ldr	r3, [pc, #268]	; (8006ee0 <Read_Request_CB+0x194>)
 8006dd2:	f7fd fa53 	bl	800427c <__adddf3>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	460b      	mov	r3, r1
 8006dda:	4610      	mov	r0, r2
 8006ddc:	4619      	mov	r1, r3
 8006dde:	f7fd fc03 	bl	80045e8 <__aeabi_d2f>
 8006de2:	4603      	mov	r3, r0
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
 8006de6:	f00a f8bd 	bl	8010f64 <rand>
 8006dea:	4603      	mov	r3, r0
 8006dec:	17da      	asrs	r2, r3, #31
 8006dee:	4698      	mov	r8, r3
 8006df0:	4691      	mov	r9, r2
 8006df2:	4642      	mov	r2, r8
 8006df4:	464b      	mov	r3, r9
 8006df6:	1891      	adds	r1, r2, r2
 8006df8:	6039      	str	r1, [r7, #0]
 8006dfa:	415b      	adcs	r3, r3
 8006dfc:	607b      	str	r3, [r7, #4]
 8006dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e02:	eb12 0408 	adds.w	r4, r2, r8
 8006e06:	eb43 0509 	adc.w	r5, r3, r9
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	016b      	lsls	r3, r5, #5
 8006e14:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8006e18:	0162      	lsls	r2, r4, #5
 8006e1a:	eb14 0a02 	adds.w	sl, r4, r2
 8006e1e:	eb45 0b03 	adc.w	fp, r5, r3
 8006e22:	eb1a 0308 	adds.w	r3, sl, r8
 8006e26:	60bb      	str	r3, [r7, #8]
 8006e28:	eb4b 0309 	adc.w	r3, fp, r9
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006e32:	f04f 0300 	mov.w	r3, #0
 8006e36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e3a:	f7fd fc25 	bl	8004688 <__aeabi_uldivmod>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	4610      	mov	r0, r2
 8006e44:	4619      	mov	r1, r3
 8006e46:	f7fd fb99 	bl	800457c <__aeabi_ul2d>
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	4b25      	ldr	r3, [pc, #148]	; (8006ee4 <Read_Request_CB+0x198>)
 8006e50:	f7fd fa14 	bl	800427c <__adddf3>
 8006e54:	4602      	mov	r2, r0
 8006e56:	460b      	mov	r3, r1
 8006e58:	4610      	mov	r0, r2
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	f7fd fbc4 	bl	80045e8 <__aeabi_d2f>
 8006e60:	4603      	mov	r3, r0
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30
    Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8006e64:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8006e68:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006ee8 <Read_Request_CB+0x19c>
 8006e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e70:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8006e74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8006e78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e84:	ee17 3a90 	vmov	r3, s15
 8006e88:	b21b      	sxth	r3, r3
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	ee16 0a90 	vmov	r0, s13
 8006e90:	f7ff fddc 	bl	8006a4c <Environmental_Update>
 8006e94:	e007      	b.n	8006ea6 <Read_Request_CB+0x15a>
  }
#ifdef STM32L476xx
  else if (handle == TermCharHandle + 1) {
 8006e96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e98:	4b14      	ldr	r3, [pc, #80]	; (8006eec <Read_Request_CB+0x1a0>)
 8006e9a:	881b      	ldrh	r3, [r3, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d101      	bne.n	8006ea6 <Read_Request_CB+0x15a>
    /* Send again the last packet for Terminal */
    Term_Update_AfterRead();
 8006ea2:	f7ff ff31 	bl	8006d08 <Term_Update_AfterRead>
  }
#endif /* STM32L476xx */

  if(connection_handle !=0)
 8006ea6:	4b12      	ldr	r3, [pc, #72]	; (8006ef0 <Read_Request_CB+0x1a4>)
 8006ea8:	881b      	ldrh	r3, [r3, #0]
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d008      	beq.n	8006ec2 <Read_Request_CB+0x176>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8006eb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ef0 <Read_Request_CB+0x1a4>)
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f007 fdc1 	bl	800ea3e <aci_gatt_allow_read>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINT_DBG("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8006ec2:	bf00      	nop
 8006ec4:	3738      	adds	r7, #56	; 0x38
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ecc:	200000dc 	.word	0x200000dc
 8006ed0:	20000448 	.word	0x20000448
 8006ed4:	2000043c 	.word	0x2000043c
 8006ed8:	20000430 	.word	0x20000430
 8006edc:	200000da 	.word	0x200000da
 8006ee0:	403b0000 	.word	0x403b0000
 8006ee4:	408f4000 	.word	0x408f4000
 8006ee8:	42c80000 	.word	0x42c80000
 8006eec:	200000e4 	.word	0x200000e4
 8006ef0:	20000428 	.word	0x20000428

08006ef4 <Attribute_Modified_Request_CB>:
 * @param  uint8_t  *att_data attribute data
 * @param  uint8_t  data_length length of the data
 * @retval None
 */
void Attribute_Modified_Request_CB(uint16_t Connection_Handle, uint16_t attr_handle, uint16_t Offset, uint8_t data_length, uint8_t *att_data)
{
 8006ef4:	b590      	push	{r4, r7, lr}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	4611      	mov	r1, r2
 8006f00:	461a      	mov	r2, r3
 8006f02:	4623      	mov	r3, r4
 8006f04:	80fb      	strh	r3, [r7, #6]
 8006f06:	4603      	mov	r3, r0
 8006f08:	80bb      	strh	r3, [r7, #4]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	807b      	strh	r3, [r7, #2]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	707b      	strb	r3, [r7, #1]
  if(attr_handle == EnvironmentalCharHandle + 2) {
 8006f12:	88ba      	ldrh	r2, [r7, #4]
 8006f14:	4b48      	ldr	r3, [pc, #288]	; (8007038 <Attribute_Modified_Request_CB+0x144>)
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	3302      	adds	r3, #2
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d10f      	bne.n	8006f3e <Attribute_Modified_Request_CB+0x4a>
    if (att_data[0] == 1) {
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d103      	bne.n	8006f2e <Attribute_Modified_Request_CB+0x3a>
      send_env = TRUE;
 8006f26:	4b45      	ldr	r3, [pc, #276]	; (800703c <Attribute_Modified_Request_CB+0x148>)
 8006f28:	2201      	movs	r2, #1
 8006f2a:	701a      	strb	r2, [r3, #0]
    if (SendBackData) {
      Term_Update(att_data,data_length);
    }
  }
#endif /* STM32L476xx */
}
 8006f2c:	e07f      	b.n	800702e <Attribute_Modified_Request_CB+0x13a>
    } else if (att_data[0] == 0){
 8006f2e:	6a3b      	ldr	r3, [r7, #32]
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d17b      	bne.n	800702e <Attribute_Modified_Request_CB+0x13a>
      send_env = FALSE;
 8006f36:	4b41      	ldr	r3, [pc, #260]	; (800703c <Attribute_Modified_Request_CB+0x148>)
 8006f38:	2200      	movs	r2, #0
 8006f3a:	701a      	strb	r2, [r3, #0]
}
 8006f3c:	e077      	b.n	800702e <Attribute_Modified_Request_CB+0x13a>
  else if (attr_handle == AccGyroMagCharHandle +2) {
 8006f3e:	88ba      	ldrh	r2, [r7, #4]
 8006f40:	4b3f      	ldr	r3, [pc, #252]	; (8007040 <Attribute_Modified_Request_CB+0x14c>)
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	3302      	adds	r3, #2
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d10f      	bne.n	8006f6a <Attribute_Modified_Request_CB+0x76>
    if (att_data[0] == 1) {
 8006f4a:	6a3b      	ldr	r3, [r7, #32]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d103      	bne.n	8006f5a <Attribute_Modified_Request_CB+0x66>
      send_mot = TRUE;
 8006f52:	4b3c      	ldr	r3, [pc, #240]	; (8007044 <Attribute_Modified_Request_CB+0x150>)
 8006f54:	2201      	movs	r2, #1
 8006f56:	701a      	strb	r2, [r3, #0]
}
 8006f58:	e069      	b.n	800702e <Attribute_Modified_Request_CB+0x13a>
    } else if (att_data[0] == 0){
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d165      	bne.n	800702e <Attribute_Modified_Request_CB+0x13a>
      send_mot = FALSE;
 8006f62:	4b38      	ldr	r3, [pc, #224]	; (8007044 <Attribute_Modified_Request_CB+0x150>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	701a      	strb	r2, [r3, #0]
}
 8006f68:	e061      	b.n	800702e <Attribute_Modified_Request_CB+0x13a>
  else if (attr_handle == QuaternionsCharHandle +2) {
 8006f6a:	88ba      	ldrh	r2, [r7, #4]
 8006f6c:	4b36      	ldr	r3, [pc, #216]	; (8007048 <Attribute_Modified_Request_CB+0x154>)
 8006f6e:	881b      	ldrh	r3, [r3, #0]
 8006f70:	3302      	adds	r3, #2
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d10f      	bne.n	8006f96 <Attribute_Modified_Request_CB+0xa2>
    if (att_data[0] == 1) {
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d103      	bne.n	8006f86 <Attribute_Modified_Request_CB+0x92>
      send_quat = TRUE;
 8006f7e:	4b33      	ldr	r3, [pc, #204]	; (800704c <Attribute_Modified_Request_CB+0x158>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	701a      	strb	r2, [r3, #0]
}
 8006f84:	e053      	b.n	800702e <Attribute_Modified_Request_CB+0x13a>
    } else if (att_data[0] == 0){
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d14f      	bne.n	800702e <Attribute_Modified_Request_CB+0x13a>
      send_quat = FALSE;
 8006f8e:	4b2f      	ldr	r3, [pc, #188]	; (800704c <Attribute_Modified_Request_CB+0x158>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
}
 8006f94:	e04b      	b.n	800702e <Attribute_Modified_Request_CB+0x13a>
  else if (attr_handle == TermCharHandle + 1) {
 8006f96:	88ba      	ldrh	r2, [r7, #4]
 8006f98:	4b2d      	ldr	r3, [pc, #180]	; (8007050 <Attribute_Modified_Request_CB+0x15c>)
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d145      	bne.n	800702e <Attribute_Modified_Request_CB+0x13a>
    uint32_t SendBackData =1; /* By default Answer with the same message received */
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	60fb      	str	r3, [r7, #12]
    if (SizeOfUpdateBlueFW != 0) {
 8006fa6:	4b2b      	ldr	r3, [pc, #172]	; (8007054 <Attribute_Modified_Request_CB+0x160>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d031      	beq.n	8007012 <Attribute_Modified_Request_CB+0x11e>
      int8_t RetValue = UpdateFWBlueNRG(&SizeOfUpdateBlueFW, att_data, data_length, 1);
 8006fae:	787a      	ldrb	r2, [r7, #1]
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	6a39      	ldr	r1, [r7, #32]
 8006fb4:	4827      	ldr	r0, [pc, #156]	; (8007054 <Attribute_Modified_Request_CB+0x160>)
 8006fb6:	f7fd fda7 	bl	8004b08 <UpdateFWBlueNRG>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	72fb      	strb	r3, [r7, #11]
      if (RetValue != 0) {
 8006fbe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d022      	beq.n	800700c <Attribute_Modified_Request_CB+0x118>
        MCR_FAST_TERM_UPDATE_FOR_OTA(((uint8_t *)&RetValue));
 8006fc6:	4b24      	ldr	r3, [pc, #144]	; (8007058 <Attribute_Modified_Request_CB+0x164>)
 8006fc8:	8818      	ldrh	r0, [r3, #0]
 8006fca:	4b21      	ldr	r3, [pc, #132]	; (8007050 <Attribute_Modified_Request_CB+0x15c>)
 8006fcc:	8819      	ldrh	r1, [r3, #0]
 8006fce:	f107 030b 	add.w	r3, r7, #11
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f007 fc7f 	bl	800e8da <aci_gatt_update_char_value>
        if (RetValue == 1) {
 8006fdc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006fe0:	2b01      	cmp	r3, #1
 8006fe2:	d113      	bne.n	800700c <Attribute_Modified_Request_CB+0x118>
          BytesToWrite = sprintf((char *)BufferToWrite, "The Board will restart in 5 seconds\r\n");
 8006fe4:	491d      	ldr	r1, [pc, #116]	; (800705c <Attribute_Modified_Request_CB+0x168>)
 8006fe6:	481e      	ldr	r0, [pc, #120]	; (8007060 <Attribute_Modified_Request_CB+0x16c>)
 8006fe8:	f00a f9a4 	bl	8011334 <siprintf>
 8006fec:	4603      	mov	r3, r0
 8006fee:	4a1d      	ldr	r2, [pc, #116]	; (8007064 <Attribute_Modified_Request_CB+0x170>)
 8006ff0:	6013      	str	r3, [r2, #0]
          Term_Update(BufferToWrite,BytesToWrite);
 8006ff2:	4b1c      	ldr	r3, [pc, #112]	; (8007064 <Attribute_Modified_Request_CB+0x170>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	b2db      	uxtb	r3, r3
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4819      	ldr	r0, [pc, #100]	; (8007060 <Attribute_Modified_Request_CB+0x16c>)
 8006ffc:	f7ff fe3c 	bl	8006c78 <Term_Update>
          HAL_Delay(5000);
 8007000:	f241 3088 	movw	r0, #5000	; 0x1388
 8007004:	f001 fddc 	bl	8008bc0 <HAL_Delay>
          HAL_NVIC_SystemReset();
 8007008:	f003 f957 	bl	800a2ba <HAL_NVIC_SystemReset>
      SendBackData = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	60fb      	str	r3, [r7, #12]
 8007010:	e005      	b.n	800701e <Attribute_Modified_Request_CB+0x12a>
      SendBackData = DebugConsoleCommandParsing(att_data,data_length);
 8007012:	787b      	ldrb	r3, [r7, #1]
 8007014:	4619      	mov	r1, r3
 8007016:	6a38      	ldr	r0, [r7, #32]
 8007018:	f000 f826 	bl	8007068 <DebugConsoleCommandParsing>
 800701c:	60f8      	str	r0, [r7, #12]
    if (SendBackData) {
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <Attribute_Modified_Request_CB+0x13a>
      Term_Update(att_data,data_length);
 8007024:	787b      	ldrb	r3, [r7, #1]
 8007026:	4619      	mov	r1, r3
 8007028:	6a38      	ldr	r0, [r7, #32]
 800702a:	f7ff fe25 	bl	8006c78 <Term_Update>
}
 800702e:	bf00      	nop
 8007030:	3714      	adds	r7, #20
 8007032:	46bd      	mov	sp, r7
 8007034:	bd90      	pop	{r4, r7, pc}
 8007036:	bf00      	nop
 8007038:	200000da 	.word	0x200000da
 800703c:	20000228 	.word	0x20000228
 8007040:	200000dc 	.word	0x200000dc
 8007044:	20000229 	.word	0x20000229
 8007048:	200000e0 	.word	0x200000e0
 800704c:	2000022a 	.word	0x2000022a
 8007050:	200000e4 	.word	0x200000e4
 8007054:	200000e8 	.word	0x200000e8
 8007058:	200000e2 	.word	0x200000e2
 800705c:	08012714 	.word	0x08012714
 8007060:	200000ec 	.word	0x200000ec
 8007064:	200001ec 	.word	0x200001ec

08007068 <DebugConsoleCommandParsing>:
 * @param uint8_t *att_data attribute data
 * @param uint8_t data_length length of the data
 * @retval uint32_t SendItBack true/false
 */
static uint32_t DebugConsoleCommandParsing(uint8_t * att_data, uint8_t data_length)
{
 8007068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800706a:	b08d      	sub	sp, #52	; 0x34
 800706c:	af04      	add	r7, sp, #16
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	460b      	mov	r3, r1
 8007072:	70fb      	strb	r3, [r7, #3]
  uint32_t SendBackData = 1;
 8007074:	2301      	movs	r3, #1
 8007076:	61fb      	str	r3, [r7, #28]

  /* Help Command */
  if(!strncmp("help",(char *)(att_data),4)) {
 8007078:	2204      	movs	r2, #4
 800707a:	6879      	ldr	r1, [r7, #4]
 800707c:	489b      	ldr	r0, [pc, #620]	; (80072ec <DebugConsoleCommandParsing+0x284>)
 800707e:	f00a fa59 	bl	8011534 <strncmp>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d110      	bne.n	80070aa <DebugConsoleCommandParsing+0x42>
    /* Print Legend */
    SendBackData=0;
 8007088:	2300      	movs	r3, #0
 800708a:	61fb      	str	r3, [r7, #28]

    BytesToWrite =sprintf((char *)BufferToWrite,"Command:\r\n"
 800708c:	4998      	ldr	r1, [pc, #608]	; (80072f0 <DebugConsoleCommandParsing+0x288>)
 800708e:	4899      	ldr	r0, [pc, #612]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 8007090:	f00a f950 	bl	8011334 <siprintf>
 8007094:	4603      	mov	r3, r0
 8007096:	4a98      	ldr	r2, [pc, #608]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 8007098:	6013      	str	r3, [r2, #0]
                          "info -> System Info\r\n"
                          "versionFw  -> FW Version\r\n"
                          "versionBle -> Ble Version\r\n");
    Term_Update(BufferToWrite,BytesToWrite);
 800709a:	4b97      	ldr	r3, [pc, #604]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	4619      	mov	r1, r3
 80070a2:	4894      	ldr	r0, [pc, #592]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 80070a4:	f7ff fde8 	bl	8006c78 <Term_Update>
 80070a8:	e16d      	b.n	8007386 <DebugConsoleCommandParsing+0x31e>
  }
  else if (!strncmp("versionFw",(char *)(att_data),9)) {
 80070aa:	2209      	movs	r2, #9
 80070ac:	6879      	ldr	r1, [r7, #4]
 80070ae:	4893      	ldr	r0, [pc, #588]	; (80072fc <DebugConsoleCommandParsing+0x294>)
 80070b0:	f00a fa40 	bl	8011534 <strncmp>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d118      	bne.n	80070ec <DebugConsoleCommandParsing+0x84>
    BytesToWrite = sprintf((char *)BufferToWrite,"%s_%s_%c.%c.%c\r\n",
 80070ba:	2332      	movs	r3, #50	; 0x32
 80070bc:	9302      	str	r3, [sp, #8]
 80070be:	2332      	movs	r3, #50	; 0x32
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	2333      	movs	r3, #51	; 0x33
 80070c4:	9300      	str	r3, [sp, #0]
 80070c6:	4b8e      	ldr	r3, [pc, #568]	; (8007300 <DebugConsoleCommandParsing+0x298>)
 80070c8:	4a8e      	ldr	r2, [pc, #568]	; (8007304 <DebugConsoleCommandParsing+0x29c>)
 80070ca:	498f      	ldr	r1, [pc, #572]	; (8007308 <DebugConsoleCommandParsing+0x2a0>)
 80070cc:	4889      	ldr	r0, [pc, #548]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 80070ce:	f00a f931 	bl	8011334 <siprintf>
 80070d2:	4603      	mov	r3, r0
 80070d4:	4a88      	ldr	r2, [pc, #544]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 80070d6:	6013      	str	r3, [r2, #0]
                            ,BLUENRG_PACKAGENAME,
                             PACK_VERSION_MAJOR,
                             PACK_VERSION_MINOR,
                             PACK_VERSION_PATCH);

    Term_Update(BufferToWrite,BytesToWrite);
 80070d8:	4b87      	ldr	r3, [pc, #540]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	4619      	mov	r1, r3
 80070e0:	4884      	ldr	r0, [pc, #528]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 80070e2:	f7ff fdc9 	bl	8006c78 <Term_Update>
    SendBackData=0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61fb      	str	r3, [r7, #28]
 80070ea:	e14c      	b.n	8007386 <DebugConsoleCommandParsing+0x31e>

  }
  else if (!strncmp("info",(char *)(att_data),4)) {
 80070ec:	2204      	movs	r2, #4
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	4886      	ldr	r0, [pc, #536]	; (800730c <DebugConsoleCommandParsing+0x2a4>)
 80070f2:	f00a fa1f 	bl	8011534 <strncmp>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d143      	bne.n	8007184 <DebugConsoleCommandParsing+0x11c>
    SendBackData=0;
 80070fc:	2300      	movs	r3, #0
 80070fe:	61fb      	str	r3, [r7, #28]

    BytesToWrite = sprintf((char *)BufferToWrite,
 8007100:	2332      	movs	r3, #50	; 0x32
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	2332      	movs	r3, #50	; 0x32
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	2333      	movs	r3, #51	; 0x33
 800710a:	4a7d      	ldr	r2, [pc, #500]	; (8007300 <DebugConsoleCommandParsing+0x298>)
 800710c:	4980      	ldr	r1, [pc, #512]	; (8007310 <DebugConsoleCommandParsing+0x2a8>)
 800710e:	4879      	ldr	r0, [pc, #484]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 8007110:	f00a f910 	bl	8011334 <siprintf>
 8007114:	4603      	mov	r3, r0
 8007116:	4a78      	ldr	r2, [pc, #480]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 8007118:	6013      	str	r3, [r2, #0]
                           "\tVersion %c.%c.%c\r\n"
                           "\tSTM32L476RG-Nucleo board"
                           "\r\n",
                           BLUENRG_PACKAGENAME,
                           PACK_VERSION_MAJOR, PACK_VERSION_MINOR, PACK_VERSION_PATCH);
    Term_Update(BufferToWrite, BytesToWrite);
 800711a:	4b77      	ldr	r3, [pc, #476]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	4619      	mov	r1, r3
 8007122:	4874      	ldr	r0, [pc, #464]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 8007124:	f7ff fda8 	bl	8006c78 <Term_Update>
#elif defined (__CC_ARM)
                           " (KEIL)\r\n",
#elif defined (__GNUC__)
                           " (STM32CubeIDE)\r\n",
#endif
                           (uint16_t)((HAL_GetHalVersion() >>24)),
 8007128:	f001 fd6e 	bl	8008c08 <HAL_GetHalVersion>
 800712c:	4603      	mov	r3, r0
 800712e:	0e1b      	lsrs	r3, r3, #24
 8007130:	b29b      	uxth	r3, r3
    BytesToWrite = sprintf((char *)BufferToWrite,
 8007132:	461e      	mov	r6, r3
                           (uint16_t)((HAL_GetHalVersion() >>16)&0xFF),
 8007134:	f001 fd68 	bl	8008c08 <HAL_GetHalVersion>
 8007138:	4603      	mov	r3, r0
 800713a:	0c1b      	lsrs	r3, r3, #16
 800713c:	b29b      	uxth	r3, r3
    BytesToWrite = sprintf((char *)BufferToWrite,
 800713e:	b2dd      	uxtb	r5, r3
                           (uint16_t)((HAL_GetHalVersion() >> 8)&0xFF),
 8007140:	f001 fd62 	bl	8008c08 <HAL_GetHalVersion>
 8007144:	4603      	mov	r3, r0
 8007146:	0a1b      	lsrs	r3, r3, #8
 8007148:	b29b      	uxth	r3, r3
    BytesToWrite = sprintf((char *)BufferToWrite,
 800714a:	b2dc      	uxtb	r4, r3
                           (uint16_t)((HAL_GetHalVersion()     )&0xFF),
 800714c:	f001 fd5c 	bl	8008c08 <HAL_GetHalVersion>
 8007150:	4603      	mov	r3, r0
 8007152:	b29b      	uxth	r3, r3
    BytesToWrite = sprintf((char *)BufferToWrite,
 8007154:	b2db      	uxtb	r3, r3
 8007156:	4a6f      	ldr	r2, [pc, #444]	; (8007314 <DebugConsoleCommandParsing+0x2ac>)
 8007158:	9203      	str	r2, [sp, #12]
 800715a:	4a6f      	ldr	r2, [pc, #444]	; (8007318 <DebugConsoleCommandParsing+0x2b0>)
 800715c:	9202      	str	r2, [sp, #8]
 800715e:	9301      	str	r3, [sp, #4]
 8007160:	9400      	str	r4, [sp, #0]
 8007162:	462b      	mov	r3, r5
 8007164:	4632      	mov	r2, r6
 8007166:	496d      	ldr	r1, [pc, #436]	; (800731c <DebugConsoleCommandParsing+0x2b4>)
 8007168:	4862      	ldr	r0, [pc, #392]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 800716a:	f00a f8e3 	bl	8011334 <siprintf>
 800716e:	4603      	mov	r3, r0
 8007170:	4a61      	ldr	r2, [pc, #388]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 8007172:	6013      	str	r3, [r2, #0]
                           __DATE__,__TIME__);
    Term_Update(BufferToWrite,BytesToWrite);
 8007174:	4b60      	ldr	r3, [pc, #384]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	b2db      	uxtb	r3, r3
 800717a:	4619      	mov	r1, r3
 800717c:	485d      	ldr	r0, [pc, #372]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 800717e:	f7ff fd7b 	bl	8006c78 <Term_Update>
 8007182:	e100      	b.n	8007386 <DebugConsoleCommandParsing+0x31e>
  }
  else if (!strncmp("upgradeFw", (char *)(att_data), 9)) {
 8007184:	2209      	movs	r2, #9
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	4865      	ldr	r0, [pc, #404]	; (8007320 <DebugConsoleCommandParsing+0x2b8>)
 800718a:	f00a f9d3 	bl	8011534 <strncmp>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	f040 8092 	bne.w	80072ba <DebugConsoleCommandParsing+0x252>
    uint32_t uwCRCValue;
    uint8_t *PointerByte = (uint8_t*) &SizeOfUpdateBlueFW;
 8007196:	4b63      	ldr	r3, [pc, #396]	; (8007324 <DebugConsoleCommandParsing+0x2bc>)
 8007198:	61bb      	str	r3, [r7, #24]

    SizeOfUpdateBlueFW = atoi((char *)(att_data + 9));
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	3309      	adds	r3, #9
 800719e:	4618      	mov	r0, r3
 80071a0:	f009 fead 	bl	8010efe <atoi>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	4b5e      	ldr	r3, [pc, #376]	; (8007324 <DebugConsoleCommandParsing+0x2bc>)
 80071aa:	601a      	str	r2, [r3, #0]
    PointerByte[0] = att_data[ 9];
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	7a5a      	ldrb	r2, [r3, #9]
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	701a      	strb	r2, [r3, #0]
    PointerByte[1] = att_data[10];
 80071b4:	69bb      	ldr	r3, [r7, #24]
 80071b6:	3301      	adds	r3, #1
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	7a92      	ldrb	r2, [r2, #10]
 80071bc:	701a      	strb	r2, [r3, #0]
    PointerByte[2] = att_data[11];
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	3302      	adds	r3, #2
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	7ad2      	ldrb	r2, [r2, #11]
 80071c6:	701a      	strb	r2, [r3, #0]
    PointerByte[3] = att_data[12];
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	3303      	adds	r3, #3
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7b12      	ldrb	r2, [r2, #12]
 80071d0:	701a      	strb	r2, [r3, #0]

    /* Check the Maximum Possible OTA size */
    if (SizeOfUpdateBlueFW > OTA_MAX_PROG_SIZE) {
 80071d2:	4b54      	ldr	r3, [pc, #336]	; (8007324 <DebugConsoleCommandParsing+0x2bc>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a54      	ldr	r2, [pc, #336]	; (8007328 <DebugConsoleCommandParsing+0x2c0>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d923      	bls.n	8007224 <DebugConsoleCommandParsing+0x1bc>
      PRINT_DBG("OTA %s SIZE=%ld > %d Max Allowed\r\n", BLUENRG_PACKAGENAME, (long)(SizeOfUpdateBlueFW), OTA_MAX_PROG_SIZE);
      /* Answer with a wrong CRC value for signaling the problem to BlueMS application */
      PointerByte[0] = att_data[13];
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	7b5a      	ldrb	r2, [r3, #13]
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	701a      	strb	r2, [r3, #0]
      PointerByte[1] = (att_data[14]!=0) ? 0 : 1; /* In order to be sure to have a wrong CRC */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	330e      	adds	r3, #14
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	bf0c      	ite	eq
 80071ee:	2301      	moveq	r3, #1
 80071f0:	2300      	movne	r3, #0
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	3301      	adds	r3, #1
 80071f8:	701a      	strb	r2, [r3, #0]
      PointerByte[2] = att_data[15];
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	3302      	adds	r3, #2
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	7bd2      	ldrb	r2, [r2, #15]
 8007202:	701a      	strb	r2, [r3, #0]
      PointerByte[3] = att_data[16];
 8007204:	69bb      	ldr	r3, [r7, #24]
 8007206:	3303      	adds	r3, #3
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	7c12      	ldrb	r2, [r2, #16]
 800720c:	701a      	strb	r2, [r3, #0]
      BytesToWrite = 4;
 800720e:	4b3a      	ldr	r3, [pc, #232]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 8007210:	2204      	movs	r2, #4
 8007212:	601a      	str	r2, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 8007214:	4b38      	ldr	r3, [pc, #224]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	4619      	mov	r1, r3
 800721c:	4835      	ldr	r0, [pc, #212]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 800721e:	f7ff fd2b 	bl	8006c78 <Term_Update>
 8007222:	e047      	b.n	80072b4 <DebugConsoleCommandParsing+0x24c>
    }
    else {
      PointerByte = (uint8_t*) &uwCRCValue;
 8007224:	f107 0310 	add.w	r3, r7, #16
 8007228:	61bb      	str	r3, [r7, #24]
      PointerByte[0] = att_data[13];
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7b5a      	ldrb	r2, [r3, #13]
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	701a      	strb	r2, [r3, #0]
      PointerByte[1] = att_data[14];
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	3301      	adds	r3, #1
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	7b92      	ldrb	r2, [r2, #14]
 800723a:	701a      	strb	r2, [r3, #0]
      PointerByte[2] = att_data[15];
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	3302      	adds	r3, #2
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	7bd2      	ldrb	r2, [r2, #15]
 8007244:	701a      	strb	r2, [r3, #0]
      PointerByte[3] = att_data[16];
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	3303      	adds	r3, #3
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	7c12      	ldrb	r2, [r2, #16]
 800724e:	701a      	strb	r2, [r3, #0]

      PRINT_DBG("OTA %s SIZE=%ld uwCRCValue=%lx\r\n", BLUENRG_PACKAGENAME, (long)(SizeOfUpdateBlueFW), (long)(uwCRCValue));

      /* Reset the Flash */
      StartUpdateFWBlueNRG(SizeOfUpdateBlueFW, uwCRCValue);
 8007250:	4b34      	ldr	r3, [pc, #208]	; (8007324 <DebugConsoleCommandParsing+0x2bc>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	4611      	mov	r1, r2
 8007258:	4618      	mov	r0, r3
 800725a:	f7fd fd75 	bl	8004d48 <StartUpdateFWBlueNRG>

      /* Reduce the connection interval */
      {
        int ret = aci_l2cap_connection_parameter_update_req(connection_handle,
 800725e:	4b33      	ldr	r3, [pc, #204]	; (800732c <DebugConsoleCommandParsing+0x2c4>)
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b298      	uxth	r0, r3
 8007264:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	2300      	movs	r3, #0
 800726c:	220a      	movs	r2, #10
 800726e:	210a      	movs	r1, #10
 8007270:	f007 fe1f 	bl	800eeb2 <aci_l2cap_connection_parameter_update_req>
 8007274:	4603      	mov	r3, r0
 8007276:	617b      	str	r3, [r7, #20]
                                                            10  /* interval_min  */,
                                                            10  /* interval_max  */,
                                                            0   /* slave_latency */,
                                                            400 /* timeout_multiplier */);
        /* Go to infinite loop if there is one error */
        if (ret != BLE_STATUS_SUCCESS) {
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d000      	beq.n	8007280 <DebugConsoleCommandParsing+0x218>
          while (1) {
 800727e:	e7fe      	b.n	800727e <DebugConsoleCommandParsing+0x216>
          }
        }
      }

      /* Signal that we are ready sending back the CRV value*/
      BufferToWrite[0] = PointerByte[0];
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	4b1b      	ldr	r3, [pc, #108]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 8007286:	701a      	strb	r2, [r3, #0]
      BufferToWrite[1] = PointerByte[1];
 8007288:	69bb      	ldr	r3, [r7, #24]
 800728a:	785a      	ldrb	r2, [r3, #1]
 800728c:	4b19      	ldr	r3, [pc, #100]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 800728e:	705a      	strb	r2, [r3, #1]
      BufferToWrite[2] = PointerByte[2];
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	789a      	ldrb	r2, [r3, #2]
 8007294:	4b17      	ldr	r3, [pc, #92]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 8007296:	709a      	strb	r2, [r3, #2]
      BufferToWrite[3] = PointerByte[3];
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	78da      	ldrb	r2, [r3, #3]
 800729c:	4b15      	ldr	r3, [pc, #84]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 800729e:	70da      	strb	r2, [r3, #3]
      BytesToWrite = 4;
 80072a0:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 80072a2:	2204      	movs	r2, #4
 80072a4:	601a      	str	r2, [r3, #0]
      Term_Update(BufferToWrite,BytesToWrite);
 80072a6:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <DebugConsoleCommandParsing+0x290>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	4619      	mov	r1, r3
 80072ae:	4811      	ldr	r0, [pc, #68]	; (80072f4 <DebugConsoleCommandParsing+0x28c>)
 80072b0:	f7ff fce2 	bl	8006c78 <Term_Update>
    }

    SendBackData=0;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61fb      	str	r3, [r7, #28]
 80072b8:	e065      	b.n	8007386 <DebugConsoleCommandParsing+0x31e>
  }
  else if (!strncmp("versionBle",(char *)(att_data),10)) {
 80072ba:	220a      	movs	r2, #10
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	481c      	ldr	r0, [pc, #112]	; (8007330 <DebugConsoleCommandParsing+0x2c8>)
 80072c0:	f00a f938 	bl	8011534 <strncmp>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d15d      	bne.n	8007386 <DebugConsoleCommandParsing+0x31e>
    uint8_t  hwVersion = 0x00;
 80072ca:	2300      	movs	r3, #0
 80072cc:	73fb      	strb	r3, [r7, #15]
    uint16_t fwVersion = 0x0000;
 80072ce:	2300      	movs	r3, #0
 80072d0:	81bb      	strh	r3, [r7, #12]
    /* get the BlueNRG HW and FW versions */
    getBlueNRG2_Version(&hwVersion, &fwVersion);
 80072d2:	f107 020c 	add.w	r2, r7, #12
 80072d6:	f107 030f 	add.w	r3, r7, #15
 80072da:	4611      	mov	r1, r2
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 f85f 	bl	80073a0 <getBlueNRG2_Version>
    BytesToWrite = sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
                           (hwVersion > 0x30) ? "BlueNRG-MS" : "BlueNRG",
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
    BytesToWrite = sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 80072e4:	2b30      	cmp	r3, #48	; 0x30
 80072e6:	d927      	bls.n	8007338 <DebugConsoleCommandParsing+0x2d0>
 80072e8:	4912      	ldr	r1, [pc, #72]	; (8007334 <DebugConsoleCommandParsing+0x2cc>)
 80072ea:	e026      	b.n	800733a <DebugConsoleCommandParsing+0x2d2>
 80072ec:	0801273c 	.word	0x0801273c
 80072f0:	08012744 	.word	0x08012744
 80072f4:	200000ec 	.word	0x200000ec
 80072f8:	200001ec 	.word	0x200001ec
 80072fc:	0801279c 	.word	0x0801279c
 8007300:	080127a8 	.word	0x080127a8
 8007304:	080127b4 	.word	0x080127b4
 8007308:	080127bc 	.word	0x080127bc
 800730c:	080127d0 	.word	0x080127d0
 8007310:	080127d8 	.word	0x080127d8
 8007314:	0801285c 	.word	0x0801285c
 8007318:	08012868 	.word	0x08012868
 800731c:	08012824 	.word	0x08012824
 8007320:	08012874 	.word	0x08012874
 8007324:	200000e8 	.word	0x200000e8
 8007328:	0007bff8 	.word	0x0007bff8
 800732c:	20000428 	.word	0x20000428
 8007330:	08012880 	.word	0x08012880
 8007334:	0801288c 	.word	0x0801288c
 8007338:	4915      	ldr	r1, [pc, #84]	; (8007390 <DebugConsoleCommandParsing+0x328>)
 800733a:	89bb      	ldrh	r3, [r7, #12]
 800733c:	0a1b      	lsrs	r3, r3, #8
 800733e:	b29b      	uxth	r3, r3
 8007340:	4618      	mov	r0, r3
 8007342:	89bb      	ldrh	r3, [r7, #12]
 8007344:	091b      	lsrs	r3, r3, #4
 8007346:	b29b      	uxth	r3, r3
 8007348:	f003 020f 	and.w	r2, r3, #15
                           (fwVersion>>8),
                           (fwVersion>>4)&0xF,
                           (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a');
 800734c:	7bfb      	ldrb	r3, [r7, #15]
    BytesToWrite = sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 800734e:	2b30      	cmp	r3, #48	; 0x30
 8007350:	d904      	bls.n	800735c <DebugConsoleCommandParsing+0x2f4>
                           (hwVersion > 0x30) ? ('a'+(fwVersion&0xF)-1) : 'a');
 8007352:	89bb      	ldrh	r3, [r7, #12]
 8007354:	f003 030f 	and.w	r3, r3, #15
    BytesToWrite = sprintf((char *)BufferToWrite,"%s_%d.%d.%c\r\n",
 8007358:	3360      	adds	r3, #96	; 0x60
 800735a:	e000      	b.n	800735e <DebugConsoleCommandParsing+0x2f6>
 800735c:	2361      	movs	r3, #97	; 0x61
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	9200      	str	r2, [sp, #0]
 8007362:	4603      	mov	r3, r0
 8007364:	460a      	mov	r2, r1
 8007366:	490b      	ldr	r1, [pc, #44]	; (8007394 <DebugConsoleCommandParsing+0x32c>)
 8007368:	480b      	ldr	r0, [pc, #44]	; (8007398 <DebugConsoleCommandParsing+0x330>)
 800736a:	f009 ffe3 	bl	8011334 <siprintf>
 800736e:	4603      	mov	r3, r0
 8007370:	4a0a      	ldr	r2, [pc, #40]	; (800739c <DebugConsoleCommandParsing+0x334>)
 8007372:	6013      	str	r3, [r2, #0]
    Term_Update(BufferToWrite,BytesToWrite);
 8007374:	4b09      	ldr	r3, [pc, #36]	; (800739c <DebugConsoleCommandParsing+0x334>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	b2db      	uxtb	r3, r3
 800737a:	4619      	mov	r1, r3
 800737c:	4806      	ldr	r0, [pc, #24]	; (8007398 <DebugConsoleCommandParsing+0x330>)
 800737e:	f7ff fc7b 	bl	8006c78 <Term_Update>
    SendBackData=0;
 8007382:	2300      	movs	r3, #0
 8007384:	61fb      	str	r3, [r7, #28]
  }

  return SendBackData;
 8007386:	69fb      	ldr	r3, [r7, #28]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3724      	adds	r7, #36	; 0x24
 800738c:	46bd      	mov	sp, r7
 800738e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007390:	08012898 	.word	0x08012898
 8007394:	080128a0 	.word	0x080128a0
 8007398:	200000ec 	.word	0x200000ec
 800739c:	200001ec 	.word	0x200001ec

080073a0 <getBlueNRG2_Version>:
 * @param  Hardware version
 * @param  Firmware version
 * @retval Status
 */
static uint8_t getBlueNRG2_Version(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80073a0:	b590      	push	{r4, r7, lr}
 80073a2:	b091      	sub	sp, #68	; 0x44
 80073a4:	af08      	add	r7, sp, #32
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;
  uint8_t DTM_version_major, DTM_version_minor, DTM_version_patch, DTM_variant, BTLE_Stack_version_major, BTLE_Stack_version_minor, BTLE_Stack_version_patch, BTLE_Stack_development;
  uint16_t DTM_Build_Number, BTLE_Stack_variant, BTLE_Stack_Build_Number;

  status = hci_read_local_version_information(&hci_version, &hci_revision, &lmp_pal_version,
 80073aa:	f107 0418 	add.w	r4, r7, #24
 80073ae:	f107 021d 	add.w	r2, r7, #29
 80073b2:	f107 011a 	add.w	r1, r7, #26
 80073b6:	f107 001e 	add.w	r0, r7, #30
 80073ba:	f107 0316 	add.w	r3, r7, #22
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	4623      	mov	r3, r4
 80073c2:	f009 f93a 	bl	801063a <hci_read_local_version_information>
 80073c6:	4603      	mov	r3, r0
 80073c8:	77fb      	strb	r3, [r7, #31]
				              &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80073ca:	7ffb      	ldrb	r3, [r7, #31]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d105      	bne.n	80073dc <getBlueNRG2_Version+0x3c>
    *hwVersion = hci_revision >> 8;
 80073d0:	8b7b      	ldrh	r3, [r7, #26]
 80073d2:	0a1b      	lsrs	r3, r3, #8
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	701a      	strb	r2, [r3, #0]
  }
  else {
    PRINT_DBG("Error= %x \r\n", status);
  }

  status = aci_hal_get_firmware_details(&DTM_version_major,
 80073dc:	f107 0412 	add.w	r4, r7, #18
 80073e0:	f107 0213 	add.w	r2, r7, #19
 80073e4:	f107 0114 	add.w	r1, r7, #20
 80073e8:	f107 0015 	add.w	r0, r7, #21
 80073ec:	f107 0308 	add.w	r3, r7, #8
 80073f0:	9306      	str	r3, [sp, #24]
 80073f2:	f107 030a 	add.w	r3, r7, #10
 80073f6:	9305      	str	r3, [sp, #20]
 80073f8:	f107 030e 	add.w	r3, r7, #14
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	f107 030f 	add.w	r3, r7, #15
 8007402:	9303      	str	r3, [sp, #12]
 8007404:	f107 0310 	add.w	r3, r7, #16
 8007408:	9302      	str	r3, [sp, #8]
 800740a:	f107 0311 	add.w	r3, r7, #17
 800740e:	9301      	str	r3, [sp, #4]
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	4623      	mov	r3, r4
 8007418:	f007 fb6f 	bl	800eafa <aci_hal_get_firmware_details>
 800741c:	4603      	mov	r3, r0
 800741e:	77fb      	strb	r3, [r7, #31]
                                        &BTLE_Stack_version_patch,
                                        &BTLE_Stack_development,
                                        &BTLE_Stack_variant,
                                        &BTLE_Stack_Build_Number);

  if (status == BLE_STATUS_SUCCESS) {
 8007420:	7ffb      	ldrb	r3, [r7, #31]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d118      	bne.n	8007458 <getBlueNRG2_Version+0xb8>
    *fwVersion = BTLE_Stack_version_major  << 8;  // Major Version Number
 8007426:	7c7b      	ldrb	r3, [r7, #17]
 8007428:	b29b      	uxth	r3, r3
 800742a:	021b      	lsls	r3, r3, #8
 800742c:	b29a      	uxth	r2, r3
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	801a      	strh	r2, [r3, #0]
    *fwVersion |= BTLE_Stack_version_minor << 4;  // Minor Version Number
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	881b      	ldrh	r3, [r3, #0]
 8007436:	b21a      	sxth	r2, r3
 8007438:	7c3b      	ldrb	r3, [r7, #16]
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	b21b      	sxth	r3, r3
 800743e:	4313      	orrs	r3, r2
 8007440:	b21b      	sxth	r3, r3
 8007442:	b29a      	uxth	r2, r3
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	801a      	strh	r2, [r3, #0]
    *fwVersion |= BTLE_Stack_version_patch;       // Patch Version Number
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	881a      	ldrh	r2, [r3, #0]
 800744c:	7bfb      	ldrb	r3, [r7, #15]
 800744e:	b29b      	uxth	r3, r3
 8007450:	4313      	orrs	r3, r2
 8007452:	b29a      	uxth	r2, r3
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	801a      	strh	r2, [r3, #0]
  }
  else {
    PRINT_DBG("Error= %x \r\n", status);
  }

  return status;
 8007458:	7ffb      	ldrb	r3, [r7, #31]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3724      	adds	r7, #36	; 0x24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd90      	pop	{r4, r7, pc}

08007462 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8007466:	2006      	movs	r0, #6
 8007468:	f002 ff0b 	bl	800a282 <HAL_NVIC_EnableIRQ>
}
 800746c:	bf00      	nop
 800746e:	bd80      	pop	{r7, pc}

08007470 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 8007474:	2006      	movs	r0, #6
 8007476:	f002 ff12 	bl	800a29e <HAL_NVIC_DisableIRQ>
}
 800747a:	bf00      	nop
 800747c:	bd80      	pop	{r7, pc}
	...

08007480 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b088      	sub	sp, #32
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007488:	4b22      	ldr	r3, [pc, #136]	; (8007514 <HCI_TL_SPI_Init+0x94>)
 800748a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748c:	4a21      	ldr	r2, [pc, #132]	; (8007514 <HCI_TL_SPI_Init+0x94>)
 800748e:	f043 0301 	orr.w	r3, r3, #1
 8007492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007494:	4b1f      	ldr	r3, [pc, #124]	; (8007514 <HCI_TL_SPI_Init+0x94>)
 8007496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	60bb      	str	r3, [r7, #8]
 800749e:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80074a0:	2301      	movs	r3, #1
 80074a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80074a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80074a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80074ae:	f107 030c 	add.w	r3, r7, #12
 80074b2:	4619      	mov	r1, r3
 80074b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074b8:	f003 fc3e 	bl	800ad38 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80074bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074c2:	2301      	movs	r3, #1
 80074c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c6:	2300      	movs	r3, #0
 80074c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074ca:	2300      	movs	r3, #0
 80074cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80074ce:	f107 030c 	add.w	r3, r7, #12
 80074d2:	4619      	mov	r1, r3
 80074d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074d8:	f003 fc2e 	bl	800ad38 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80074dc:	2302      	movs	r3, #2
 80074de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074e0:	2301      	movs	r3, #1
 80074e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074e8:	2300      	movs	r3, #0
 80074ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 80074ec:	f107 030c 	add.w	r3, r7, #12
 80074f0:	4619      	mov	r1, r3
 80074f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074f6:	f003 fc1f 	bl	800ad38 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80074fa:	2201      	movs	r2, #1
 80074fc:	2102      	movs	r1, #2
 80074fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007502:	f003 fecf 	bl	800b2a4 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8007506:	f000 fe27 	bl	8008158 <BSP_SPI1_Init>
 800750a:	4603      	mov	r3, r0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3720      	adds	r7, #32
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	40021000 	.word	0x40021000

08007518 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800751c:	2101      	movs	r1, #1
 800751e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007522:	f003 fdb3 	bl	800b08c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8007526:	2102      	movs	r1, #2
 8007528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800752c:	f003 fdae 	bl	800b08c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8007530:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007538:	f003 fda8 	bl	800b08c <HAL_GPIO_DeInit>
  return 0;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	bd80      	pop	{r7, pc}

08007542 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8007542:	b580      	push	{r7, lr}
 8007544:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8007546:	2201      	movs	r2, #1
 8007548:	2102      	movs	r1, #2
 800754a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800754e:	f003 fea9 	bl	800b2a4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8007552:	2200      	movs	r2, #0
 8007554:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800755c:	f003 fea2 	bl	800b2a4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8007560:	2005      	movs	r0, #5
 8007562:	f001 fb2d 	bl	8008bc0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8007566:	2201      	movs	r2, #1
 8007568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800756c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007570:	f003 fe98 	bl	800b2a4 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8007574:	2005      	movs	r0, #5
 8007576:	f001 fb23 	bl	8008bc0 <HAL_Delay>
  return 0;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	bd80      	pop	{r7, pc}

08007580 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 8007590:	2300      	movs	r3, #0
 8007592:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8007594:	4a32      	ldr	r2, [pc, #200]	; (8007660 <HCI_TL_SPI_Receive+0xe0>)
 8007596:	f107 0310 	add.w	r3, r7, #16
 800759a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800759e:	6018      	str	r0, [r3, #0]
 80075a0:	3304      	adds	r3, #4
 80075a2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80075a4:	f7ff ff64 	bl	8007470 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80075a8:	2200      	movs	r2, #0
 80075aa:	2102      	movs	r1, #2
 80075ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075b0:	f003 fe78 	bl	800b2a4 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	f107 0310 	add.w	r3, r7, #16
 80075bc:	2205      	movs	r2, #5
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fdfa 	bl	80081b8 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80075c4:	7b3b      	ldrb	r3, [r7, #12]
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	b21a      	sxth	r2, r3
 80075ca:	7afb      	ldrb	r3, [r7, #11]
 80075cc:	b21b      	sxth	r3, r3
 80075ce:	4313      	orrs	r3, r2
 80075d0:	b21b      	sxth	r3, r3
 80075d2:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80075d4:	8bfb      	ldrh	r3, [r7, #30]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d01e      	beq.n	8007618 <HCI_TL_SPI_Receive+0x98>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80075da:	8bfa      	ldrh	r2, [r7, #30]
 80075dc:	887b      	ldrh	r3, [r7, #2]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d901      	bls.n	80075e6 <HCI_TL_SPI_Receive+0x66>
    {
      byte_count = size;
 80075e2:	887b      	ldrh	r3, [r7, #2]
 80075e4:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 80075e6:	2300      	movs	r3, #0
 80075e8:	777b      	strb	r3, [r7, #29]
 80075ea:	e010      	b.n	800760e <HCI_TL_SPI_Receive+0x8e>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 80075ec:	f107 0116 	add.w	r1, r7, #22
 80075f0:	f107 0317 	add.w	r3, r7, #23
 80075f4:	2201      	movs	r2, #1
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 fdde 	bl	80081b8 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 80075fc:	7f7b      	ldrb	r3, [r7, #29]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	4413      	add	r3, r2
 8007602:	7dba      	ldrb	r2, [r7, #22]
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8007608:	7f7b      	ldrb	r3, [r7, #29]
 800760a:	3301      	adds	r3, #1
 800760c:	777b      	strb	r3, [r7, #29]
 800760e:	7f7b      	ldrb	r3, [r7, #29]
 8007610:	b29b      	uxth	r3, r3
 8007612:	8bfa      	ldrh	r2, [r7, #30]
 8007614:	429a      	cmp	r2, r3
 8007616:	d8e9      	bhi.n	80075ec <HCI_TL_SPI_Receive+0x6c>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8007618:	f001 fac6 	bl	8008ba8 <HAL_GetTick>
 800761c:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800761e:	e007      	b.n	8007630 <HCI_TL_SPI_Receive+0xb0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8007620:	2101      	movs	r1, #1
 8007622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007626:	f003 fe25 	bl	800b274 <HAL_GPIO_ReadPin>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d008      	beq.n	8007642 <HCI_TL_SPI_Receive+0xc2>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8007630:	f001 faba 	bl	8008ba8 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800763e:	d3ef      	bcc.n	8007620 <HCI_TL_SPI_Receive+0xa0>
 8007640:	e000      	b.n	8007644 <HCI_TL_SPI_Receive+0xc4>
      break;
 8007642:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8007644:	f7ff ff0d 	bl	8007462 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8007648:	2201      	movs	r2, #1
 800764a:	2102      	movs	r1, #2
 800764c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007650:	f003 fe28 	bl	800b2a4 <HAL_GPIO_WritePin>

  return len;
 8007654:	7f7b      	ldrb	r3, [r7, #29]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3720      	adds	r7, #32
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	080128b0 	.word	0x080128b0

08007664 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08a      	sub	sp, #40	; 0x28
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8007670:	4a41      	ldr	r2, [pc, #260]	; (8007778 <HCI_TL_SPI_Send+0x114>)
 8007672:	f107 0314 	add.w	r3, r7, #20
 8007676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800767a:	6018      	str	r0, [r3, #0]
 800767c:	3304      	adds	r3, #4
 800767e:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8007680:	f001 fa92 	bl	8008ba8 <HAL_GetTick>
 8007684:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 8007686:	f7ff fef3 	bl	8007470 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 800768a:	f001 fa8d 	bl	8008ba8 <HAL_GetTick>
 800768e:	61f8      	str	r0, [r7, #28]

    result = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8007694:	2200      	movs	r2, #0
 8007696:	2102      	movs	r1, #2
 8007698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800769c:	f003 fe02 	bl	800b2a4 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80076a0:	e00a      	b.n	80076b8 <HCI_TL_SPI_Send+0x54>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80076a2:	f001 fa81 	bl	8008ba8 <HAL_GetTick>
 80076a6:	4602      	mov	r2, r0
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	1ad3      	subs	r3, r2, r3
 80076ac:	2b64      	cmp	r3, #100	; 0x64
 80076ae:	d903      	bls.n	80076b8 <HCI_TL_SPI_Send+0x54>
      {
        result = -3;
 80076b0:	f06f 0302 	mvn.w	r3, #2
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80076b6:	e004      	b.n	80076c2 <HCI_TL_SPI_Send+0x5e>
    while(!IsDataAvailable())
 80076b8:	f000 f862 	bl	8007780 <IsDataAvailable>
 80076bc:	4603      	mov	r3, r0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0ef      	beq.n	80076a2 <HCI_TL_SPI_Send+0x3e>
      }
    }
    if(result == -3)
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	f113 0f03 	cmn.w	r3, #3
 80076c8:	d106      	bne.n	80076d8 <HCI_TL_SPI_Send+0x74>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80076ca:	2201      	movs	r2, #1
 80076cc:	2102      	movs	r1, #2
 80076ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076d2:	f003 fde7 	bl	800b2a4 <HAL_GPIO_WritePin>
      break;
 80076d6:	e031      	b.n	800773c <HCI_TL_SPI_Send+0xd8>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80076d8:	f107 010c 	add.w	r1, r7, #12
 80076dc:	f107 0314 	add.w	r3, r7, #20
 80076e0:	2205      	movs	r2, #5
 80076e2:	4618      	mov	r0, r3
 80076e4:	f000 fd68 	bl	80081b8 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 80076e8:	7bbb      	ldrb	r3, [r7, #14]
 80076ea:	021b      	lsls	r3, r3, #8
 80076ec:	b21a      	sxth	r2, r3
 80076ee:	7b7b      	ldrb	r3, [r7, #13]
 80076f0:	b21b      	sxth	r3, r3
 80076f2:	4313      	orrs	r3, r2
 80076f4:	b21b      	sxth	r3, r3
 80076f6:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 80076f8:	8b7a      	ldrh	r2, [r7, #26]
 80076fa:	887b      	ldrh	r3, [r7, #2]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d306      	bcc.n	800770e <HCI_TL_SPI_Send+0xaa>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8007700:	887b      	ldrh	r3, [r7, #2]
 8007702:	461a      	mov	r2, r3
 8007704:	491d      	ldr	r1, [pc, #116]	; (800777c <HCI_TL_SPI_Send+0x118>)
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fd56 	bl	80081b8 <BSP_SPI1_SendRecv>
 800770c:	e002      	b.n	8007714 <HCI_TL_SPI_Send+0xb0>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 800770e:	f06f 0301 	mvn.w	r3, #1
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8007714:	2201      	movs	r2, #1
 8007716:	2102      	movs	r1, #2
 8007718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800771c:	f003 fdc2 	bl	800b2a4 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8007720:	f001 fa42 	bl	8008ba8 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	6a3b      	ldr	r3, [r7, #32]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b64      	cmp	r3, #100	; 0x64
 800772c:	d903      	bls.n	8007736 <HCI_TL_SPI_Send+0xd2>
    {
      result = -3;
 800772e:	f06f 0302 	mvn.w	r3, #2
 8007732:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007734:	e002      	b.n	800773c <HCI_TL_SPI_Send+0xd8>
    }
  } while(result < 0);
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	dba6      	blt.n	800768a <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 800773c:	f001 fa34 	bl	8008ba8 <HAL_GetTick>
 8007740:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8007742:	e007      	b.n	8007754 <HCI_TL_SPI_Send+0xf0>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 8007744:	2101      	movs	r1, #1
 8007746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800774a:	f003 fd93 	bl	800b274 <HAL_GPIO_ReadPin>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d008      	beq.n	8007766 <HCI_TL_SPI_Send+0x102>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8007754:	f001 fa28 	bl	8008ba8 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007762:	d3ef      	bcc.n	8007744 <HCI_TL_SPI_Send+0xe0>
 8007764:	e000      	b.n	8007768 <HCI_TL_SPI_Send+0x104>
      break;
 8007766:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8007768:	f7ff fe7b 	bl	8007462 <HCI_TL_SPI_Enable_IRQ>

  return result;
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800776e:	4618      	mov	r0, r3
 8007770:	3728      	adds	r7, #40	; 0x28
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	080128b8 	.word	0x080128b8
 800777c:	20000234 	.word	0x20000234

08007780 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8007784:	2101      	movs	r1, #1
 8007786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800778a:	f003 fd73 	bl	800b274 <HAL_GPIO_ReadPin>
 800778e:	4603      	mov	r3, r0
 8007790:	2b01      	cmp	r3, #1
 8007792:	bf0c      	ite	eq
 8007794:	2301      	moveq	r3, #1
 8007796:	2300      	movne	r3, #0
 8007798:	b2db      	uxtb	r3, r3
}
 800779a:	4618      	mov	r0, r3
 800779c:	bd80      	pop	{r7, pc}
	...

080077a0 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80077a6:	4b13      	ldr	r3, [pc, #76]	; (80077f4 <hci_tl_lowlevel_init+0x54>)
 80077a8:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80077aa:	4b13      	ldr	r3, [pc, #76]	; (80077f8 <hci_tl_lowlevel_init+0x58>)
 80077ac:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80077ae:	4b13      	ldr	r3, [pc, #76]	; (80077fc <hci_tl_lowlevel_init+0x5c>)
 80077b0:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80077b2:	4b13      	ldr	r3, [pc, #76]	; (8007800 <hci_tl_lowlevel_init+0x60>)
 80077b4:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80077b6:	4b13      	ldr	r3, [pc, #76]	; (8007804 <hci_tl_lowlevel_init+0x64>)
 80077b8:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80077ba:	4b13      	ldr	r3, [pc, #76]	; (8007808 <hci_tl_lowlevel_init+0x68>)
 80077bc:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80077be:	1d3b      	adds	r3, r7, #4
 80077c0:	4618      	mov	r0, r3
 80077c2:	f009 f8d5 	bl	8010970 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80077c6:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 80077ca:	4810      	ldr	r0, [pc, #64]	; (800780c <hci_tl_lowlevel_init+0x6c>)
 80077cc:	f002 ffdc 	bl	800a788 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80077d0:	4a0f      	ldr	r2, [pc, #60]	; (8007810 <hci_tl_lowlevel_init+0x70>)
 80077d2:	2100      	movs	r1, #0
 80077d4:	480d      	ldr	r0, [pc, #52]	; (800780c <hci_tl_lowlevel_init+0x6c>)
 80077d6:	f002 ffbd 	bl	800a754 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80077da:	2200      	movs	r2, #0
 80077dc:	2100      	movs	r1, #0
 80077de:	2006      	movs	r0, #6
 80077e0:	f002 fd33 	bl	800a24a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80077e4:	2006      	movs	r0, #6
 80077e6:	f002 fd4c 	bl	800a282 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80077ea:	bf00      	nop
 80077ec:	3720      	adds	r7, #32
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	08007481 	.word	0x08007481
 80077f8:	08007519 	.word	0x08007519
 80077fc:	08007665 	.word	0x08007665
 8007800:	08007581 	.word	0x08007581
 8007804:	08007543 	.word	0x08007543
 8007808:	080081f9 	.word	0x080081f9
 800780c:	2000022c 	.word	0x2000022c
 8007810:	08007815 	.word	0x08007815

08007814 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8007818:	e005      	b.n	8007826 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 800781a:	2000      	movs	r0, #0
 800781c:	f009 fa0c 	bl	8010c38 <hci_notify_asynch_evt>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d105      	bne.n	8007832 <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 8007826:	f7ff ffab 	bl	8007780 <IsDataAvailable>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1f4      	bne.n	800781a <hci_tl_lowlevel_isr+0x6>
 8007830:	e000      	b.n	8007834 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 8007832:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800783c:	f001 f944 	bl	8008ac8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8007840:	f000 f878 	bl	8007934 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8007844:	f000 f8c7 	bl	80079d6 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8007848:	f000 f9ec 	bl	8007c24 <MX_GPIO_Init>
	MX_CRC_Init();
 800784c:	f000 f9c8 	bl	8007be0 <MX_CRC_Init>
	MX_ADC1_Init();
 8007850:	f000 f8ec 	bl	8007a2c <MX_ADC1_Init>
	MX_ADC2_Init();
 8007854:	f000 f960 	bl	8007b18 <MX_ADC2_Init>
	MX_BlueNRG_2_Init();
 8007858:	f7fd fac2 	bl	8004de0 <MX_BlueNRG_2_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Lire la valeur du capteur analogique
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800785c:	4830      	ldr	r0, [pc, #192]	; (8007920 <main+0xe8>)
 800785e:	f001 fd17 	bl	8009290 <HAL_ADC_Start>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <main+0x34>
			Error_Handler();
 8007868:	f000 fa68 	bl	8007d3c <Error_Handler>
		}
		if (HAL_ADC_Start(&hadc2) != HAL_OK) {
 800786c:	482d      	ldr	r0, [pc, #180]	; (8007924 <main+0xec>)
 800786e:	f001 fd0f 	bl	8009290 <HAL_ADC_Start>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <main+0x44>
			Error_Handler();
 8007878:	f000 fa60 	bl	8007d3c <Error_Handler>
		}

		// Attendre la fin de la conversion
		if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) != HAL_OK) {
 800787c:	f04f 31ff 	mov.w	r1, #4294967295
 8007880:	4827      	ldr	r0, [pc, #156]	; (8007920 <main+0xe8>)
 8007882:	f001 fdbf 	bl	8009404 <HAL_ADC_PollForConversion>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <main+0x58>
			Error_Handler();
 800788c:	f000 fa56 	bl	8007d3c <Error_Handler>
		}
		if (HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY) != HAL_OK) {
 8007890:	f04f 31ff 	mov.w	r1, #4294967295
 8007894:	4823      	ldr	r0, [pc, #140]	; (8007924 <main+0xec>)
 8007896:	f001 fdb5 	bl	8009404 <HAL_ADC_PollForConversion>
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <main+0x6c>
			Error_Handler();
 80078a0:	f000 fa4c 	bl	8007d3c <Error_Handler>
		}
		// Lire la valeur convertie
		waterlevel_value = HAL_ADC_GetValue(&hadc1);
 80078a4:	481e      	ldr	r0, [pc, #120]	; (8007920 <main+0xe8>)
 80078a6:	f001 fe85 	bl	80095b4 <HAL_ADC_GetValue>
 80078aa:	4603      	mov	r3, r0
 80078ac:	4a1e      	ldr	r2, [pc, #120]	; (8007928 <main+0xf0>)
 80078ae:	6013      	str	r3, [r2, #0]
		moisture_value = HAL_ADC_GetValue(&hadc2);
 80078b0:	481c      	ldr	r0, [pc, #112]	; (8007924 <main+0xec>)
 80078b2:	f001 fe7f 	bl	80095b4 <HAL_ADC_GetValue>
 80078b6:	4603      	mov	r3, r0
 80078b8:	4a1c      	ldr	r2, [pc, #112]	; (800792c <main+0xf4>)
 80078ba:	6013      	str	r3, [r2, #0]
		if(waterlevel_value < 200)
 80078bc:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <main+0xf0>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2bc7      	cmp	r3, #199	; 0xc7
 80078c2:	d812      	bhi.n	80078ea <main+0xb2>
		{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80078c4:	2200      	movs	r2, #0
 80078c6:	2101      	movs	r1, #1
 80078c8:	4819      	ldr	r0, [pc, #100]	; (8007930 <main+0xf8>)
 80078ca:	f003 fceb 	bl	800b2a4 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80078ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078d2:	f001 f975 	bl	8008bc0 <HAL_Delay>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80078d6:	2201      	movs	r2, #1
 80078d8:	2101      	movs	r1, #1
 80078da:	4815      	ldr	r0, [pc, #84]	; (8007930 <main+0xf8>)
 80078dc:	f003 fce2 	bl	800b2a4 <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80078e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80078e4:	f001 f96c 	bl	8008bc0 <HAL_Delay>
 80078e8:	e004      	b.n	80078f4 <main+0xbc>

		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80078ea:	2200      	movs	r2, #0
 80078ec:	2101      	movs	r1, #1
 80078ee:	4810      	ldr	r0, [pc, #64]	; (8007930 <main+0xf8>)
 80078f0:	f003 fcd8 	bl	800b2a4 <HAL_GPIO_WritePin>
		}

		if (BSP_PB_GetState(BUTTON_KEY) == 1)
 80078f4:	2000      	movs	r0, #0
 80078f6:	f000 ff67 	bl	80087c8 <BSP_PB_GetState>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d106      	bne.n	800790e <main+0xd6>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8007900:	2201      	movs	r2, #1
 8007902:	2110      	movs	r1, #16
 8007904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007908:	f003 fccc 	bl	800b2a4 <HAL_GPIO_WritePin>
 800790c:	e005      	b.n	800791a <main+0xe2>
		} else {
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800790e:	2200      	movs	r2, #0
 8007910:	2110      	movs	r1, #16
 8007912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007916:	f003 fcc5 	bl	800b2a4 <HAL_GPIO_WritePin>
		}


		/* USER CODE END WHILE */

		MX_BlueNRG_2_Process();
 800791a:	f7fd fa87 	bl	8004e2c <MX_BlueNRG_2_Process>
		if (HAL_ADC_Start(&hadc1) != HAL_OK) {
 800791e:	e79d      	b.n	800785c <main+0x24>
 8007920:	20000334 	.word	0x20000334
 8007924:	20000398 	.word	0x20000398
 8007928:	20000424 	.word	0x20000424
 800792c:	20000420 	.word	0x20000420
 8007930:	48000400 	.word	0x48000400

08007934 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b096      	sub	sp, #88	; 0x58
 8007938:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800793a:	f107 0314 	add.w	r3, r7, #20
 800793e:	2244      	movs	r2, #68	; 0x44
 8007940:	2100      	movs	r1, #0
 8007942:	4618      	mov	r0, r3
 8007944:	f009 fdee 	bl	8011524 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007948:	463b      	mov	r3, r7
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	605a      	str	r2, [r3, #4]
 8007950:	609a      	str	r2, [r3, #8]
 8007952:	60da      	str	r2, [r3, #12]
 8007954:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007956:	f44f 7000 	mov.w	r0, #512	; 0x200
 800795a:	f003 fce3 	bl	800b324 <HAL_PWREx_ControlVoltageScaling>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8007964:	f000 f9ea 	bl	8007d3c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007968:	2302      	movs	r3, #2
 800796a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800796c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007970:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007972:	2310      	movs	r3, #16
 8007974:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007976:	2302      	movs	r3, #2
 8007978:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800797a:	2302      	movs	r3, #2
 800797c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800797e:	2301      	movs	r3, #1
 8007980:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 8;
 8007982:	2308      	movs	r3, #8
 8007984:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8007986:	2307      	movs	r3, #7
 8007988:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800798a:	2302      	movs	r3, #2
 800798c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800798e:	2302      	movs	r3, #2
 8007990:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007992:	f107 0314 	add.w	r3, r7, #20
 8007996:	4618      	mov	r0, r3
 8007998:	f003 fd1a 	bl	800b3d0 <HAL_RCC_OscConfig>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d001      	beq.n	80079a6 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80079a2:	f000 f9cb 	bl	8007d3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80079a6:	230f      	movs	r3, #15
 80079a8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80079aa:	2303      	movs	r3, #3
 80079ac:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80079b6:	2300      	movs	r3, #0
 80079b8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80079ba:	463b      	mov	r3, r7
 80079bc:	2103      	movs	r1, #3
 80079be:	4618      	mov	r0, r3
 80079c0:	f004 f8ee 	bl	800bba0 <HAL_RCC_ClockConfig>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80079ca:	f000 f9b7 	bl	8007d3c <Error_Handler>
	}
}
 80079ce:	bf00      	nop
 80079d0:	3758      	adds	r7, #88	; 0x58
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b0a2      	sub	sp, #136	; 0x88
 80079da:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80079dc:	463b      	mov	r3, r7
 80079de:	2288      	movs	r2, #136	; 0x88
 80079e0:	2100      	movs	r1, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f009 fd9e 	bl	8011524 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80079e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079ec:	603b      	str	r3, [r7, #0]
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80079ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80079f2:	67bb      	str	r3, [r7, #120]	; 0x78
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80079f4:	2302      	movs	r3, #2
 80079f6:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80079f8:	2301      	movs	r3, #1
 80079fa:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80079fc:	2308      	movs	r3, #8
 80079fe:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8007a00:	2307      	movs	r3, #7
 8007a02:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8007a04:	2302      	movs	r3, #2
 8007a06:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8007a08:	2302      	movs	r3, #2
 8007a0a:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8007a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a10:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007a12:	463b      	mov	r3, r7
 8007a14:	4618      	mov	r0, r3
 8007a16:	f004 fac9 	bl	800bfac <HAL_RCCEx_PeriphCLKConfig>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <PeriphCommonClock_Config+0x4e>
	{
		Error_Handler();
 8007a20:	f000 f98c 	bl	8007d3c <Error_Handler>
	}
}
 8007a24:	bf00      	nop
 8007a26:	3788      	adds	r7, #136	; 0x88
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08a      	sub	sp, #40	; 0x28
 8007a30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = {0};
 8007a32:	f107 031c 	add.w	r3, r7, #28
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	605a      	str	r2, [r3, #4]
 8007a3c:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = {0};
 8007a3e:	1d3b      	adds	r3, r7, #4
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
 8007a44:	605a      	str	r2, [r3, #4]
 8007a46:	609a      	str	r2, [r3, #8]
 8007a48:	60da      	str	r2, [r3, #12]
 8007a4a:	611a      	str	r2, [r3, #16]
 8007a4c:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8007a4e:	4b2f      	ldr	r3, [pc, #188]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a50:	4a2f      	ldr	r2, [pc, #188]	; (8007b10 <MX_ADC1_Init+0xe4>)
 8007a52:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007a54:	4b2d      	ldr	r3, [pc, #180]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007a5a:	4b2c      	ldr	r3, [pc, #176]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007a60:	4b2a      	ldr	r3, [pc, #168]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007a66:	4b29      	ldr	r3, [pc, #164]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007a6c:	4b27      	ldr	r3, [pc, #156]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a6e:	2204      	movs	r2, #4
 8007a70:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8007a72:	4b26      	ldr	r3, [pc, #152]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8007a78:	4b24      	ldr	r3, [pc, #144]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8007a7e:	4b23      	ldr	r3, [pc, #140]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007a84:	4b21      	ldr	r3, [pc, #132]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007a8c:	4b1f      	ldr	r3, [pc, #124]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007a92:	4b1e      	ldr	r3, [pc, #120]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8007a98:	4b1c      	ldr	r3, [pc, #112]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007aa0:	4b1a      	ldr	r3, [pc, #104]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8007aa6:	4b19      	ldr	r3, [pc, #100]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007aae:	4817      	ldr	r0, [pc, #92]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007ab0:	f001 fa98 	bl	8008fe4 <HAL_ADC_Init>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <MX_ADC1_Init+0x92>
	{
		Error_Handler();
 8007aba:	f000 f93f 	bl	8007d3c <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007ac2:	f107 031c 	add.w	r3, r7, #28
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	4810      	ldr	r0, [pc, #64]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007aca:	f002 f9f9 	bl	8009ec0 <HAL_ADCEx_MultiModeConfigChannel>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8007ad4:	f000 f932 	bl	8007d3c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	; (8007b14 <MX_ADC1_Init+0xe8>)
 8007ada:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8007adc:	2306      	movs	r3, #6
 8007ade:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007ae4:	237f      	movs	r3, #127	; 0x7f
 8007ae6:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007ae8:	2304      	movs	r3, #4
 8007aea:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007af0:	1d3b      	adds	r3, r7, #4
 8007af2:	4619      	mov	r1, r3
 8007af4:	4805      	ldr	r0, [pc, #20]	; (8007b0c <MX_ADC1_Init+0xe0>)
 8007af6:	f001 fd6b 	bl	80095d0 <HAL_ADC_ConfigChannel>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <MX_ADC1_Init+0xd8>
	{
		Error_Handler();
 8007b00:	f000 f91c 	bl	8007d3c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8007b04:	bf00      	nop
 8007b06:	3728      	adds	r7, #40	; 0x28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	20000334 	.word	0x20000334
 8007b10:	50040000 	.word	0x50040000
 8007b14:	04300002 	.word	0x04300002

08007b18 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8007b1e:	463b      	mov	r3, r7
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	605a      	str	r2, [r3, #4]
 8007b26:	609a      	str	r2, [r3, #8]
 8007b28:	60da      	str	r2, [r3, #12]
 8007b2a:	611a      	str	r2, [r3, #16]
 8007b2c:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC2_Init 1 */

	/** Common config
	 */
	hadc2.Instance = ADC2;
 8007b2e:	4b29      	ldr	r3, [pc, #164]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b30:	4a29      	ldr	r2, [pc, #164]	; (8007bd8 <MX_ADC2_Init+0xc0>)
 8007b32:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007b34:	4b27      	ldr	r3, [pc, #156]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8007b3a:	4b26      	ldr	r3, [pc, #152]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	609a      	str	r2, [r3, #8]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007b40:	4b24      	ldr	r3, [pc, #144]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	60da      	str	r2, [r3, #12]
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007b46:	4b23      	ldr	r3, [pc, #140]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	611a      	str	r2, [r3, #16]
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007b4c:	4b21      	ldr	r3, [pc, #132]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b4e:	2204      	movs	r2, #4
 8007b50:	615a      	str	r2, [r3, #20]
	hadc2.Init.LowPowerAutoWait = DISABLE;
 8007b52:	4b20      	ldr	r3, [pc, #128]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	761a      	strb	r2, [r3, #24]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8007b58:	4b1e      	ldr	r3, [pc, #120]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	765a      	strb	r2, [r3, #25]
	hadc2.Init.NbrOfConversion = 1;
 8007b5e:	4b1d      	ldr	r3, [pc, #116]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b60:	2201      	movs	r2, #1
 8007b62:	61da      	str	r2, [r3, #28]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007b64:	4b1b      	ldr	r3, [pc, #108]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007b6c:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b6e:	2200      	movs	r2, #0
 8007b70:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007b72:	4b18      	ldr	r3, [pc, #96]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8007b78:	4b16      	ldr	r3, [pc, #88]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007b80:	4b14      	ldr	r3, [pc, #80]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	635a      	str	r2, [r3, #52]	; 0x34
	hadc2.Init.OversamplingMode = DISABLE;
 8007b86:	4b13      	ldr	r3, [pc, #76]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8007b8e:	4811      	ldr	r0, [pc, #68]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007b90:	f001 fa28 	bl	8008fe4 <HAL_ADC_Init>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d001      	beq.n	8007b9e <MX_ADC2_Init+0x86>
	{
		Error_Handler();
 8007b9a:	f000 f8cf 	bl	8007d3c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8007b9e:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <MX_ADC2_Init+0xc4>)
 8007ba0:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8007ba2:	2306      	movs	r3, #6
 8007ba4:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007baa:	237f      	movs	r3, #127	; 0x7f
 8007bac:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007bae:	2304      	movs	r3, #4
 8007bb0:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007bb6:	463b      	mov	r3, r7
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4806      	ldr	r0, [pc, #24]	; (8007bd4 <MX_ADC2_Init+0xbc>)
 8007bbc:	f001 fd08 	bl	80095d0 <HAL_ADC_ConfigChannel>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d001      	beq.n	8007bca <MX_ADC2_Init+0xb2>
	{
		Error_Handler();
 8007bc6:	f000 f8b9 	bl	8007d3c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8007bca:	bf00      	nop
 8007bcc:	3718      	adds	r7, #24
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	20000398 	.word	0x20000398
 8007bd8:	50040100 	.word	0x50040100
 8007bdc:	08600004 	.word	0x08600004

08007be0 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8007be4:	4b0d      	ldr	r3, [pc, #52]	; (8007c1c <MX_CRC_Init+0x3c>)
 8007be6:	4a0e      	ldr	r2, [pc, #56]	; (8007c20 <MX_CRC_Init+0x40>)
 8007be8:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007bea:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <MX_CRC_Init+0x3c>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8007bf0:	4b0a      	ldr	r3, [pc, #40]	; (8007c1c <MX_CRC_Init+0x3c>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007bf6:	4b09      	ldr	r3, [pc, #36]	; (8007c1c <MX_CRC_Init+0x3c>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007bfc:	4b07      	ldr	r3, [pc, #28]	; (8007c1c <MX_CRC_Init+0x3c>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007c02:	4b06      	ldr	r3, [pc, #24]	; (8007c1c <MX_CRC_Init+0x3c>)
 8007c04:	2201      	movs	r2, #1
 8007c06:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007c08:	4804      	ldr	r0, [pc, #16]	; (8007c1c <MX_CRC_Init+0x3c>)
 8007c0a:	f002 fb67 	bl	800a2dc <HAL_CRC_Init>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8007c14:	f000 f892 	bl	8007d3c <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8007c18:	bf00      	nop
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	200003fc 	.word	0x200003fc
 8007c20:	40023000 	.word	0x40023000

08007c24 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b08a      	sub	sp, #40	; 0x28
 8007c28:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c2a:	f107 0314 	add.w	r3, r7, #20
 8007c2e:	2200      	movs	r2, #0
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	605a      	str	r2, [r3, #4]
 8007c34:	609a      	str	r2, [r3, #8]
 8007c36:	60da      	str	r2, [r3, #12]
 8007c38:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8007c3a:	4b3e      	ldr	r3, [pc, #248]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c3e:	4a3d      	ldr	r2, [pc, #244]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c40:	f043 0304 	orr.w	r3, r3, #4
 8007c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c46:	4b3b      	ldr	r3, [pc, #236]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	613b      	str	r3, [r7, #16]
 8007c50:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8007c52:	4b38      	ldr	r3, [pc, #224]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c56:	4a37      	ldr	r2, [pc, #220]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c5e:	4b35      	ldr	r3, [pc, #212]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8007c6a:	4b32      	ldr	r3, [pc, #200]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c6e:	4a31      	ldr	r2, [pc, #196]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c70:	f043 0301 	orr.w	r3, r3, #1
 8007c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c76:	4b2f      	ldr	r3, [pc, #188]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	60bb      	str	r3, [r7, #8]
 8007c80:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8007c82:	4b2c      	ldr	r3, [pc, #176]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c86:	4a2b      	ldr	r2, [pc, #172]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c88:	f043 0302 	orr.w	r3, r3, #2
 8007c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007c8e:	4b29      	ldr	r3, [pc, #164]	; (8007d34 <MX_GPIO_Init+0x110>)
 8007c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	607b      	str	r3, [r7, #4]
 8007c98:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8, GPIO_PIN_RESET);
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f44f 7189 	mov.w	r1, #274	; 0x112
 8007ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ca4:	f003 fafe 	bl	800b2a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2101      	movs	r1, #1
 8007cac:	4822      	ldr	r0, [pc, #136]	; (8007d38 <MX_GPIO_Init+0x114>)
 8007cae:	f003 faf9 	bl	800b2a4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007cb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007cba:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cc0:	f107 0314 	add.w	r3, r7, #20
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cca:	f003 f835 	bl	800ad38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA4 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8;
 8007cce:	f44f 7389 	mov.w	r3, #274	; 0x112
 8007cd2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce0:	f107 0314 	add.w	r3, r7, #20
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cea:	f003 f825 	bl	800ad38 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cfe:	f107 0314 	add.w	r3, r7, #20
 8007d02:	4619      	mov	r1, r3
 8007d04:	480c      	ldr	r0, [pc, #48]	; (8007d38 <MX_GPIO_Init+0x114>)
 8007d06:	f003 f817 	bl	800ad38 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	2006      	movs	r0, #6
 8007d10:	f002 fa9b 	bl	800a24a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007d14:	2006      	movs	r0, #6
 8007d16:	f002 fab4 	bl	800a282 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	2028      	movs	r0, #40	; 0x28
 8007d20:	f002 fa93 	bl	800a24a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007d24:	2028      	movs	r0, #40	; 0x28
 8007d26:	f002 faac 	bl	800a282 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8007d2a:	bf00      	nop
 8007d2c:	3728      	adds	r7, #40	; 0x28
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	40021000 	.word	0x40021000
 8007d38:	48000400 	.word	0x48000400

08007d3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007d40:	b672      	cpsid	i
}
 8007d42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8007d44:	e7fe      	b.n	8007d44 <Error_Handler+0x8>
	...

08007d48 <Set_DeviceConnectable>:
 * @note   Puts the device in connectable mode
 * @param  None
 * @retval None
 */
void Set_DeviceConnectable(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b092      	sub	sp, #72	; 0x48
 8007d4c:	af08      	add	r7, sp, #32
  uint8_t ret;
  uint8_t local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8007d4e:	4a36      	ldr	r2, [pc, #216]	; (8007e28 <Set_DeviceConnectable+0xe0>)
 8007d50:	f107 031c 	add.w	r3, r7, #28
 8007d54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007d58:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	703b      	strb	r3, [r7, #0]
 8007d60:	230a      	movs	r3, #10
 8007d62:	707b      	strb	r3, [r7, #1]
 8007d64:	2300      	movs	r3, #0
 8007d66:	70bb      	strb	r3, [r7, #2]
 8007d68:	2308      	movs	r3, #8
 8007d6a:	70fb      	strb	r3, [r7, #3]
 8007d6c:	2309      	movs	r3, #9
 8007d6e:	713b      	strb	r3, [r7, #4]
 8007d70:	2342      	movs	r3, #66	; 0x42
 8007d72:	717b      	strb	r3, [r7, #5]
 8007d74:	236c      	movs	r3, #108	; 0x6c
 8007d76:	71bb      	strb	r3, [r7, #6]
 8007d78:	2375      	movs	r3, #117	; 0x75
 8007d7a:	71fb      	strb	r3, [r7, #7]
 8007d7c:	2365      	movs	r3, #101	; 0x65
 8007d7e:	723b      	strb	r3, [r7, #8]
 8007d80:	234e      	movs	r3, #78	; 0x4e
 8007d82:	727b      	strb	r3, [r7, #9]
 8007d84:	2352      	movs	r3, #82	; 0x52
 8007d86:	72bb      	strb	r3, [r7, #10]
 8007d88:	2347      	movs	r3, #71	; 0x47
 8007d8a:	72fb      	strb	r3, [r7, #11]
 8007d8c:	230d      	movs	r3, #13
 8007d8e:	733b      	strb	r3, [r7, #12]
 8007d90:	23ff      	movs	r3, #255	; 0xff
 8007d92:	737b      	strb	r3, [r7, #13]
 8007d94:	2301      	movs	r3, #1
 8007d96:	73bb      	strb	r3, [r7, #14]
 8007d98:	2380      	movs	r3, #128	; 0x80
 8007d9a:	73fb      	strb	r3, [r7, #15]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	743b      	strb	r3, [r7, #16]
 8007da0:	23f4      	movs	r3, #244	; 0xf4
 8007da2:	747b      	strb	r3, [r7, #17]
 8007da4:	2300      	movs	r3, #0
 8007da6:	74bb      	strb	r3, [r7, #18]
 8007da8:	2300      	movs	r3, #0
 8007daa:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8007dac:	4b1f      	ldr	r3, [pc, #124]	; (8007e2c <Set_DeviceConnectable+0xe4>)
 8007dae:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8007db0:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8007db2:	4b1e      	ldr	r3, [pc, #120]	; (8007e2c <Set_DeviceConnectable+0xe4>)
 8007db4:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8007db6:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8007db8:	4b1c      	ldr	r3, [pc, #112]	; (8007e2c <Set_DeviceConnectable+0xe4>)
 8007dba:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8007dbc:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8007dbe:	4b1b      	ldr	r3, [pc, #108]	; (8007e2c <Set_DeviceConnectable+0xe4>)
 8007dc0:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8007dc2:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8007dc4:	4b19      	ldr	r3, [pc, #100]	; (8007e2c <Set_DeviceConnectable+0xe4>)
 8007dc6:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8007dc8:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8007dca:	4b18      	ldr	r3, [pc, #96]	; (8007e2c <Set_DeviceConnectable+0xe4>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8007dce:	767b      	strb	r3, [r7, #25]
  };

  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8007dd0:	7cbb      	ldrb	r3, [r7, #18]
 8007dd2:	f043 0301 	orr.w	r3, r3, #1
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	74bb      	strb	r3, [r7, #18]

  hci_le_set_scan_response_data(0,NULL);
 8007dda:	2100      	movs	r1, #0
 8007ddc:	2000      	movs	r0, #0
 8007dde:	f008 fc72 	bl	80106c6 <hci_le_set_scan_response_data>

  PRINT_DBG("Set General Discoverable Mode.\r\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8007de2:	2300      	movs	r3, #0
 8007de4:	9306      	str	r3, [sp, #24]
 8007de6:	2300      	movs	r3, #0
 8007de8:	9305      	str	r3, [sp, #20]
 8007dea:	2300      	movs	r3, #0
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	2300      	movs	r3, #0
 8007df0:	9303      	str	r3, [sp, #12]
 8007df2:	f107 031c 	add.w	r3, r7, #28
 8007df6:	9302      	str	r3, [sp, #8]
 8007df8:	2308      	movs	r3, #8
 8007dfa:	9301      	str	r3, [sp, #4]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	2300      	movs	r3, #0
 8007e02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007e06:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007e0a:	2000      	movs	r0, #0
 8007e0c:	f005 ff0f 	bl	800dc2e <aci_gap_set_discoverable>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                                 ADV_INTERV_MIN, ADV_INTERV_MAX,
                                 PUBLIC_ADDR,
                                 NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8007e16:	463b      	mov	r3, r7
 8007e18:	4619      	mov	r1, r3
 8007e1a:	201a      	movs	r0, #26
 8007e1c:	f006 fab1 	bl	800e382 <aci_gap_update_adv_data>
    PRINT_DBG("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else {
    PRINT_DBG("aci_gap_set_discoverable() --> SUCCESS\r\n");
  }
}
 8007e20:	bf00      	nop
 8007e22:	3728      	adds	r7, #40	; 0x28
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	080128c0 	.word	0x080128c0
 8007e2c:	200000cc 	.word	0x200000cc

08007e30 <APP_UserEvtRx>:
 *         parsed
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void APP_UserEvtRx(void *pData)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t i;

  hci_spi_pckt *hci_pckt = (hci_spi_pckt *)pData;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	61bb      	str	r3, [r7, #24]

  if(hci_pckt->type == HCI_EVENT_PKT)
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	2b04      	cmp	r3, #4
 8007e42:	d163      	bne.n	8007f0c <APP_UserEvtRx+0xdc>
  {
    hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8007e44:	69bb      	ldr	r3, [r7, #24]
 8007e46:	3301      	adds	r3, #1
 8007e48:	617b      	str	r3, [r7, #20]

    if(event_pckt->evt == EVT_LE_META_EVENT)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	2b3e      	cmp	r3, #62	; 0x3e
 8007e50:	d11e      	bne.n	8007e90 <APP_UserEvtRx+0x60>
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	3302      	adds	r3, #2
 8007e56:	60fb      	str	r3, [r7, #12]

      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8007e58:	2300      	movs	r3, #0
 8007e5a:	61fb      	str	r3, [r7, #28]
 8007e5c:	e014      	b.n	8007e88 <APP_UserEvtRx+0x58>
      {
        if (evt->subevent == hci_le_meta_events_table[i].evt_code)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	492b      	ldr	r1, [pc, #172]	; (8007f14 <APP_UserEvtRx+0xe4>)
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d108      	bne.n	8007e82 <APP_UserEvtRx+0x52>
        {
          hci_le_meta_events_table[i].process((void *)evt->data);
 8007e70:	4a28      	ldr	r2, [pc, #160]	; (8007f14 <APP_UserEvtRx+0xe4>)
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	4413      	add	r3, r2
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	3201      	adds	r2, #1
 8007e7e:	4610      	mov	r0, r2
 8007e80:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type)); i++)
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	3301      	adds	r3, #1
 8007e86:	61fb      	str	r3, [r7, #28]
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	2b09      	cmp	r3, #9
 8007e8c:	d9e7      	bls.n	8007e5e <APP_UserEvtRx+0x2e>
          hci_events_table[i].process((void *)event_pckt->data);
        }
      }
    }
  }
}
 8007e8e:	e03d      	b.n	8007f0c <APP_UserEvtRx+0xdc>
    else if(event_pckt->evt == EVT_VENDOR)
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2bff      	cmp	r3, #255	; 0xff
 8007e96:	d11e      	bne.n	8007ed6 <APP_UserEvtRx+0xa6>
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	3302      	adds	r3, #2
 8007e9c:	613b      	str	r3, [r7, #16]
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
 8007ea2:	e014      	b.n	8007ece <APP_UserEvtRx+0x9e>
        if (blue_evt->ecode == hci_vendor_specific_events_table[i].evt_code)
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	b29a      	uxth	r2, r3
 8007eaa:	491b      	ldr	r1, [pc, #108]	; (8007f18 <APP_UserEvtRx+0xe8>)
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d108      	bne.n	8007ec8 <APP_UserEvtRx+0x98>
          hci_vendor_specific_events_table[i].process((void *)blue_evt->data);
 8007eb6:	4a18      	ldr	r2, [pc, #96]	; (8007f18 <APP_UserEvtRx+0xe8>)
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	4413      	add	r3, r2
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	3202      	adds	r2, #2
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type)); i++)
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	61fb      	str	r3, [r7, #28]
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed2:	d9e7      	bls.n	8007ea4 <APP_UserEvtRx+0x74>
}
 8007ed4:	e01a      	b.n	8007f0c <APP_UserEvtRx+0xdc>
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	61fb      	str	r3, [r7, #28]
 8007eda:	e014      	b.n	8007f06 <APP_UserEvtRx+0xd6>
        if (event_pckt->evt == hci_events_table[i].evt_code)
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	490e      	ldr	r1, [pc, #56]	; (8007f1c <APP_UserEvtRx+0xec>)
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d108      	bne.n	8007f00 <APP_UserEvtRx+0xd0>
          hci_events_table[i].process((void *)event_pckt->data);
 8007eee:	4a0b      	ldr	r2, [pc, #44]	; (8007f1c <APP_UserEvtRx+0xec>)
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	00db      	lsls	r3, r3, #3
 8007ef4:	4413      	add	r3, r2
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	3202      	adds	r2, #2
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
      for (i = 0; i < (sizeof(hci_events_table)/sizeof(hci_events_table_type)); i++)
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	3301      	adds	r3, #1
 8007f04:	61fb      	str	r3, [r7, #28]
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	2b06      	cmp	r3, #6
 8007f0a:	d9e7      	bls.n	8007edc <APP_UserEvtRx+0xac>
}
 8007f0c:	bf00      	nop
 8007f0e:	3720      	adds	r7, #32
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	0801295c 	.word	0x0801295c
 8007f18:	080129ac 	.word	0x080129ac
 8007f1c:	08012924 	.word	0x08012924

08007f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f26:	4b0f      	ldr	r3, [pc, #60]	; (8007f64 <HAL_MspInit+0x44>)
 8007f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f2a:	4a0e      	ldr	r2, [pc, #56]	; (8007f64 <HAL_MspInit+0x44>)
 8007f2c:	f043 0301 	orr.w	r3, r3, #1
 8007f30:	6613      	str	r3, [r2, #96]	; 0x60
 8007f32:	4b0c      	ldr	r3, [pc, #48]	; (8007f64 <HAL_MspInit+0x44>)
 8007f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	607b      	str	r3, [r7, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007f3e:	4b09      	ldr	r3, [pc, #36]	; (8007f64 <HAL_MspInit+0x44>)
 8007f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f42:	4a08      	ldr	r2, [pc, #32]	; (8007f64 <HAL_MspInit+0x44>)
 8007f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f48:	6593      	str	r3, [r2, #88]	; 0x58
 8007f4a:	4b06      	ldr	r3, [pc, #24]	; (8007f64 <HAL_MspInit+0x44>)
 8007f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f56:	bf00      	nop
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40021000 	.word	0x40021000

08007f68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08c      	sub	sp, #48	; 0x30
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f70:	f107 031c 	add.w	r3, r7, #28
 8007f74:	2200      	movs	r2, #0
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	605a      	str	r2, [r3, #4]
 8007f7a:	609a      	str	r2, [r3, #8]
 8007f7c:	60da      	str	r2, [r3, #12]
 8007f7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a33      	ldr	r2, [pc, #204]	; (8008054 <HAL_ADC_MspInit+0xec>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d12d      	bne.n	8007fe6 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8007f8a:	4b33      	ldr	r3, [pc, #204]	; (8008058 <HAL_ADC_MspInit+0xf0>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	4a31      	ldr	r2, [pc, #196]	; (8008058 <HAL_ADC_MspInit+0xf0>)
 8007f92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8007f94:	4b30      	ldr	r3, [pc, #192]	; (8008058 <HAL_ADC_MspInit+0xf0>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d10b      	bne.n	8007fb4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8007f9c:	4b2f      	ldr	r3, [pc, #188]	; (800805c <HAL_ADC_MspInit+0xf4>)
 8007f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fa0:	4a2e      	ldr	r2, [pc, #184]	; (800805c <HAL_ADC_MspInit+0xf4>)
 8007fa2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007fa8:	4b2c      	ldr	r3, [pc, #176]	; (800805c <HAL_ADC_MspInit+0xf4>)
 8007faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fb0:	61bb      	str	r3, [r7, #24]
 8007fb2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fb4:	4b29      	ldr	r3, [pc, #164]	; (800805c <HAL_ADC_MspInit+0xf4>)
 8007fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb8:	4a28      	ldr	r2, [pc, #160]	; (800805c <HAL_ADC_MspInit+0xf4>)
 8007fba:	f043 0304 	orr.w	r3, r3, #4
 8007fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007fc0:	4b26      	ldr	r3, [pc, #152]	; (800805c <HAL_ADC_MspInit+0xf4>)
 8007fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	617b      	str	r3, [r7, #20]
 8007fca:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007fcc:	2303      	movs	r3, #3
 8007fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8007fd0:	230b      	movs	r3, #11
 8007fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fd8:	f107 031c 	add.w	r3, r7, #28
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4820      	ldr	r0, [pc, #128]	; (8008060 <HAL_ADC_MspInit+0xf8>)
 8007fe0:	f002 feaa 	bl	800ad38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007fe4:	e031      	b.n	800804a <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a1e      	ldr	r2, [pc, #120]	; (8008064 <HAL_ADC_MspInit+0xfc>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d12c      	bne.n	800804a <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8007ff0:	4b19      	ldr	r3, [pc, #100]	; (8008058 <HAL_ADC_MspInit+0xf0>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	4a18      	ldr	r2, [pc, #96]	; (8008058 <HAL_ADC_MspInit+0xf0>)
 8007ff8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8007ffa:	4b17      	ldr	r3, [pc, #92]	; (8008058 <HAL_ADC_MspInit+0xf0>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d10b      	bne.n	800801a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8008002:	4b16      	ldr	r3, [pc, #88]	; (800805c <HAL_ADC_MspInit+0xf4>)
 8008004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008006:	4a15      	ldr	r2, [pc, #84]	; (800805c <HAL_ADC_MspInit+0xf4>)
 8008008:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800800c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800800e:	4b13      	ldr	r3, [pc, #76]	; (800805c <HAL_ADC_MspInit+0xf4>)
 8008010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008016:	613b      	str	r3, [r7, #16]
 8008018:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800801a:	4b10      	ldr	r3, [pc, #64]	; (800805c <HAL_ADC_MspInit+0xf4>)
 800801c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801e:	4a0f      	ldr	r2, [pc, #60]	; (800805c <HAL_ADC_MspInit+0xf4>)
 8008020:	f043 0304 	orr.w	r3, r3, #4
 8008024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008026:	4b0d      	ldr	r3, [pc, #52]	; (800805c <HAL_ADC_MspInit+0xf4>)
 8008028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008032:	2302      	movs	r3, #2
 8008034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8008036:	230b      	movs	r3, #11
 8008038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800803a:	2300      	movs	r3, #0
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800803e:	f107 031c 	add.w	r3, r7, #28
 8008042:	4619      	mov	r1, r3
 8008044:	4806      	ldr	r0, [pc, #24]	; (8008060 <HAL_ADC_MspInit+0xf8>)
 8008046:	f002 fe77 	bl	800ad38 <HAL_GPIO_Init>
}
 800804a:	bf00      	nop
 800804c:	3730      	adds	r7, #48	; 0x30
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	50040000 	.word	0x50040000
 8008058:	20000460 	.word	0x20000460
 800805c:	40021000 	.word	0x40021000
 8008060:	48000800 	.word	0x48000800
 8008064:	50040100 	.word	0x50040100

08008068 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a0a      	ldr	r2, [pc, #40]	; (80080a0 <HAL_CRC_MspInit+0x38>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d10b      	bne.n	8008092 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800807a:	4b0a      	ldr	r3, [pc, #40]	; (80080a4 <HAL_CRC_MspInit+0x3c>)
 800807c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800807e:	4a09      	ldr	r2, [pc, #36]	; (80080a4 <HAL_CRC_MspInit+0x3c>)
 8008080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008084:	6493      	str	r3, [r2, #72]	; 0x48
 8008086:	4b07      	ldr	r3, [pc, #28]	; (80080a4 <HAL_CRC_MspInit+0x3c>)
 8008088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800808a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008092:	bf00      	nop
 8008094:	3714      	adds	r7, #20
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	40023000 	.word	0x40023000
 80080a4:	40021000 	.word	0x40021000

080080a8 <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4a07      	ldr	r2, [pc, #28]	; (80080d4 <HAL_CRC_MspDeInit+0x2c>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d105      	bne.n	80080c6 <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80080ba:	4b07      	ldr	r3, [pc, #28]	; (80080d8 <HAL_CRC_MspDeInit+0x30>)
 80080bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080be:	4a06      	ldr	r2, [pc, #24]	; (80080d8 <HAL_CRC_MspDeInit+0x30>)
 80080c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080c4:	6493      	str	r3, [r2, #72]	; 0x48
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	40023000 	.word	0x40023000
 80080d8:	40021000 	.word	0x40021000

080080dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80080dc:	b480      	push	{r7}
 80080de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80080e0:	e7fe      	b.n	80080e0 <NMI_Handler+0x4>

080080e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80080e2:	b480      	push	{r7}
 80080e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80080e6:	e7fe      	b.n	80080e6 <HardFault_Handler+0x4>

080080e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80080e8:	b480      	push	{r7}
 80080ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80080ec:	e7fe      	b.n	80080ec <MemManage_Handler+0x4>

080080ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80080ee:	b480      	push	{r7}
 80080f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80080f2:	e7fe      	b.n	80080f2 <BusFault_Handler+0x4>

080080f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80080f8:	e7fe      	b.n	80080f8 <UsageFault_Handler+0x4>

080080fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80080fa:	b480      	push	{r7}
 80080fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80080fe:	bf00      	nop
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800810c:	bf00      	nop
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008116:	b480      	push	{r7}
 8008118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800811a:	bf00      	nop
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008128:	f000 fd2a 	bl	8008b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800812c:	bf00      	nop
 800812e:	bd80      	pop	{r7, pc}

08008130 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8008134:	4802      	ldr	r0, [pc, #8]	; (8008140 <EXTI0_IRQHandler+0x10>)
 8008136:	f002 fb3b 	bl	800a7b0 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800813a:	bf00      	nop
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	2000022c 	.word	0x2000022c

08008144 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8008148:	4802      	ldr	r0, [pc, #8]	; (8008154 <EXTI15_10_IRQHandler+0x10>)
 800814a:	f002 fb31 	bl	800a7b0 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800814e:	bf00      	nop
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000014 	.word	0x20000014

08008158 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800815e:	2300      	movs	r3, #0
 8008160:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 8008162:	4b12      	ldr	r3, [pc, #72]	; (80081ac <BSP_SPI1_Init+0x54>)
 8008164:	4a12      	ldr	r2, [pc, #72]	; (80081b0 <BSP_SPI1_Init+0x58>)
 8008166:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8008168:	4b12      	ldr	r3, [pc, #72]	; (80081b4 <BSP_SPI1_Init+0x5c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	1c5a      	adds	r2, r3, #1
 800816e:	4911      	ldr	r1, [pc, #68]	; (80081b4 <BSP_SPI1_Init+0x5c>)
 8008170:	600a      	str	r2, [r1, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d114      	bne.n	80081a0 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8008176:	480d      	ldr	r0, [pc, #52]	; (80081ac <BSP_SPI1_Init+0x54>)
 8008178:	f004 fe94 	bl	800cea4 <HAL_SPI_GetState>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d10e      	bne.n	80081a0 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 8008182:	480a      	ldr	r0, [pc, #40]	; (80081ac <BSP_SPI1_Init+0x54>)
 8008184:	f000 f882 	bl	800828c <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d108      	bne.n	80081a0 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800818e:	4807      	ldr	r0, [pc, #28]	; (80081ac <BSP_SPI1_Init+0x54>)
 8008190:	f000 f83a 	bl	8008208 <MX_SPI1_Init>
 8008194:	4603      	mov	r3, r0
 8008196:	2b00      	cmp	r3, #0
 8008198:	d002      	beq.n	80081a0 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 800819a:	f06f 0307 	mvn.w	r3, #7
 800819e:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80081a0:	687b      	ldr	r3, [r7, #4]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	20000464 	.word	0x20000464
 80081b0:	40013000 	.word	0x40013000
 80081b4:	200004c8 	.word	0x200004c8

080081b8 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af02      	add	r7, sp, #8
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	4613      	mov	r3, r2
 80081c4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80081ca:	88fb      	ldrh	r3, [r7, #6]
 80081cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081d0:	9200      	str	r2, [sp, #0]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	68f9      	ldr	r1, [r7, #12]
 80081d6:	4807      	ldr	r0, [pc, #28]	; (80081f4 <BSP_SPI1_SendRecv+0x3c>)
 80081d8:	f004 fc51 	bl	800ca7e <HAL_SPI_TransmitReceive>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d002      	beq.n	80081e8 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80081e2:	f06f 0305 	mvn.w	r3, #5
 80081e6:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80081e8:	697b      	ldr	r3, [r7, #20]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	20000464 	.word	0x20000464

080081f8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80081fc:	f000 fcd4 	bl	8008ba8 <HAL_GetTick>
 8008200:	4603      	mov	r3, r0
}
 8008202:	4618      	mov	r0, r3
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008210:	2300      	movs	r3, #0
 8008212:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a1c      	ldr	r2, [pc, #112]	; (8008288 <MX_SPI1_Init+0x80>)
 8008218:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008220:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800822e:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008242:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2228      	movs	r2, #40	; 0x28
 8008248:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2207      	movs	r2, #7
 8008260:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f004 fb58 	bl	800c924 <HAL_SPI_Init>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d001      	beq.n	800827e <MX_SPI1_Init+0x76>
  {
    ret = HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	40013000 	.word	0x40013000

0800828c <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b08a      	sub	sp, #40	; 0x28
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008294:	4b2c      	ldr	r3, [pc, #176]	; (8008348 <SPI1_MspInit+0xbc>)
 8008296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008298:	4a2b      	ldr	r2, [pc, #172]	; (8008348 <SPI1_MspInit+0xbc>)
 800829a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800829e:	6613      	str	r3, [r2, #96]	; 0x60
 80082a0:	4b29      	ldr	r3, [pc, #164]	; (8008348 <SPI1_MspInit+0xbc>)
 80082a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082a8:	613b      	str	r3, [r7, #16]
 80082aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082ac:	4b26      	ldr	r3, [pc, #152]	; (8008348 <SPI1_MspInit+0xbc>)
 80082ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b0:	4a25      	ldr	r2, [pc, #148]	; (8008348 <SPI1_MspInit+0xbc>)
 80082b2:	f043 0301 	orr.w	r3, r3, #1
 80082b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082b8:	4b23      	ldr	r3, [pc, #140]	; (8008348 <SPI1_MspInit+0xbc>)
 80082ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082c4:	4b20      	ldr	r3, [pc, #128]	; (8008348 <SPI1_MspInit+0xbc>)
 80082c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c8:	4a1f      	ldr	r2, [pc, #124]	; (8008348 <SPI1_MspInit+0xbc>)
 80082ca:	f043 0302 	orr.w	r3, r3, #2
 80082ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80082d0:	4b1d      	ldr	r3, [pc, #116]	; (8008348 <SPI1_MspInit+0xbc>)
 80082d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	60bb      	str	r3, [r7, #8]
 80082da:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80082dc:	2340      	movs	r3, #64	; 0x40
 80082de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e0:	2302      	movs	r3, #2
 80082e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082e8:	2303      	movs	r3, #3
 80082ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80082ec:	2305      	movs	r3, #5
 80082ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80082f0:	f107 0314 	add.w	r3, r7, #20
 80082f4:	4619      	mov	r1, r3
 80082f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082fa:	f002 fd1d 	bl	800ad38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80082fe:	2380      	movs	r3, #128	; 0x80
 8008300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008302:	2302      	movs	r3, #2
 8008304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008306:	2300      	movs	r3, #0
 8008308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800830a:	2303      	movs	r3, #3
 800830c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800830e:	2305      	movs	r3, #5
 8008310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8008312:	f107 0314 	add.w	r3, r7, #20
 8008316:	4619      	mov	r1, r3
 8008318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800831c:	f002 fd0c 	bl	800ad38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8008320:	2308      	movs	r3, #8
 8008322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008324:	2302      	movs	r3, #2
 8008326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008328:	2300      	movs	r3, #0
 800832a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800832c:	2303      	movs	r3, #3
 800832e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8008330:	2305      	movs	r3, #5
 8008332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	4619      	mov	r1, r3
 800833a:	4804      	ldr	r0, [pc, #16]	; (800834c <SPI1_MspInit+0xc0>)
 800833c:	f002 fcfc 	bl	800ad38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8008340:	bf00      	nop
 8008342:	3728      	adds	r7, #40	; 0x28
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	40021000 	.word	0x40021000
 800834c:	48000400 	.word	0x48000400

08008350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
	return 1;
 8008354:	2301      	movs	r3, #1
}
 8008356:	4618      	mov	r0, r3
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <_kill>:

int _kill(int pid, int sig)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800836a:	f009 f93b 	bl	80115e4 <__errno>
 800836e:	4603      	mov	r3, r0
 8008370:	2216      	movs	r2, #22
 8008372:	601a      	str	r2, [r3, #0]
	return -1;
 8008374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008378:	4618      	mov	r0, r3
 800837a:	3708      	adds	r7, #8
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <_exit>:

void _exit (int status)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008388:	f04f 31ff 	mov.w	r1, #4294967295
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff ffe7 	bl	8008360 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008392:	e7fe      	b.n	8008392 <_exit+0x12>

08008394 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b086      	sub	sp, #24
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083a0:	2300      	movs	r3, #0
 80083a2:	617b      	str	r3, [r7, #20]
 80083a4:	e00a      	b.n	80083bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80083a6:	f3af 8000 	nop.w
 80083aa:	4601      	mov	r1, r0
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	60ba      	str	r2, [r7, #8]
 80083b2:	b2ca      	uxtb	r2, r1
 80083b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	3301      	adds	r3, #1
 80083ba:	617b      	str	r3, [r7, #20]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	dbf0      	blt.n	80083a6 <_read+0x12>
	}

return len;
 80083c4:	687b      	ldr	r3, [r7, #4]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80083ce:	b580      	push	{r7, lr}
 80083d0:	b086      	sub	sp, #24
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	60f8      	str	r0, [r7, #12]
 80083d6:	60b9      	str	r1, [r7, #8]
 80083d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]
 80083de:	e009      	b.n	80083f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	60ba      	str	r2, [r7, #8]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 fabd 	bl	8008968 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	3301      	adds	r3, #1
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	429a      	cmp	r2, r3
 80083fa:	dbf1      	blt.n	80083e0 <_write+0x12>
	}
	return len;
 80083fc:	687b      	ldr	r3, [r7, #4]
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3718      	adds	r7, #24
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <_close>:

int _close(int file)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
	return -1;
 800840e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008412:	4618      	mov	r0, r3
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800842e:	605a      	str	r2, [r3, #4]
	return 0;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <_isatty>:

int _isatty(int file)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
	return 1;
 8008446:	2301      	movs	r3, #1
}
 8008448:	4618      	mov	r0, r3
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
	return 0;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3714      	adds	r7, #20
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
	...

08008470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b086      	sub	sp, #24
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008478:	4a14      	ldr	r2, [pc, #80]	; (80084cc <_sbrk+0x5c>)
 800847a:	4b15      	ldr	r3, [pc, #84]	; (80084d0 <_sbrk+0x60>)
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008484:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <_sbrk+0x64>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d102      	bne.n	8008492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800848c:	4b11      	ldr	r3, [pc, #68]	; (80084d4 <_sbrk+0x64>)
 800848e:	4a12      	ldr	r2, [pc, #72]	; (80084d8 <_sbrk+0x68>)
 8008490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008492:	4b10      	ldr	r3, [pc, #64]	; (80084d4 <_sbrk+0x64>)
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4413      	add	r3, r2
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	429a      	cmp	r2, r3
 800849e:	d207      	bcs.n	80084b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80084a0:	f009 f8a0 	bl	80115e4 <__errno>
 80084a4:	4603      	mov	r3, r0
 80084a6:	220c      	movs	r2, #12
 80084a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80084aa:	f04f 33ff 	mov.w	r3, #4294967295
 80084ae:	e009      	b.n	80084c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80084b0:	4b08      	ldr	r3, [pc, #32]	; (80084d4 <_sbrk+0x64>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80084b6:	4b07      	ldr	r3, [pc, #28]	; (80084d4 <_sbrk+0x64>)
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4413      	add	r3, r2
 80084be:	4a05      	ldr	r2, [pc, #20]	; (80084d4 <_sbrk+0x64>)
 80084c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80084c2:	68fb      	ldr	r3, [r7, #12]
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	20018000 	.word	0x20018000
 80084d0:	00000400 	.word	0x00000400
 80084d4:	200004cc 	.word	0x200004cc
 80084d8:	20000c50 	.word	0x20000c50

080084dc <GetPage>:
 * @brief  Gets the page of a given address
 * @param  Addr: Address of the FLASH Memory
 * @retval The page of a given address
 */
uint32_t GetPage(uint32_t Addr)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t page = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80084e8:	4b1a      	ldr	r3, [pc, #104]	; (8008554 <GetPage+0x78>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d008      	beq.n	8008508 <GetPage+0x2c>
 80084f6:	4b17      	ldr	r3, [pc, #92]	; (8008554 <GetPage+0x78>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	029b      	lsls	r3, r3, #10
 80084fc:	085a      	lsrs	r2, r3, #1
 80084fe:	4b16      	ldr	r3, [pc, #88]	; (8008558 <GetPage+0x7c>)
 8008500:	4013      	ands	r3, r2
 8008502:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8008506:	e000      	b.n	800850a <GetPage+0x2e>
 8008508:	4b14      	ldr	r3, [pc, #80]	; (800855c <GetPage+0x80>)
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	4293      	cmp	r3, r2
 800850e:	d905      	bls.n	800851c <GetPage+0x40>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8008516:	0adb      	lsrs	r3, r3, #11
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e014      	b.n	8008546 <GetPage+0x6a>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 800851c:	4b0d      	ldr	r3, [pc, #52]	; (8008554 <GetPage+0x78>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	b29b      	uxth	r3, r3
 8008522:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008526:	4293      	cmp	r3, r2
 8008528:	d008      	beq.n	800853c <GetPage+0x60>
 800852a:	4b0a      	ldr	r3, [pc, #40]	; (8008554 <GetPage+0x78>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	029b      	lsls	r3, r3, #10
 8008530:	085a      	lsrs	r2, r3, #1
 8008532:	4b09      	ldr	r3, [pc, #36]	; (8008558 <GetPage+0x7c>)
 8008534:	4013      	ands	r3, r2
 8008536:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800853a:	e000      	b.n	800853e <GetPage+0x62>
 800853c:	4b07      	ldr	r3, [pc, #28]	; (800855c <GetPage+0x80>)
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	0adb      	lsrs	r3, r3, #11
 8008544:	60fb      	str	r3, [r7, #12]
  }

  return page;
 8008546:	68fb      	ldr	r3, [r7, #12]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3714      	adds	r7, #20
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	1fff75e0 	.word	0x1fff75e0
 8008558:	01fffe00 	.word	0x01fffe00
 800855c:	08080000 	.word	0x08080000

08008560 <GetBank>:
 * @brief  Gets the bank of a given address
 * @param  Addr: Address of the FLASH Memory
 * @retval The bank of a given address
 */
uint32_t GetBank(uint32_t Addr)
{
 8008560:	b480      	push	{r7}
 8008562:	b085      	sub	sp, #20
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  uint32_t bank = 0;
 8008568:	2300      	movs	r3, #0
 800856a:	60fb      	str	r3, [r7, #12]

  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0)
 800856c:	4b1f      	ldr	r3, [pc, #124]	; (80085ec <GetBank+0x8c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008574:	2b00      	cmp	r3, #0
 8008576:	d119      	bne.n	80085ac <GetBank+0x4c>
  {
    /* No Bank swap */
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 8008578:	4b1d      	ldr	r3, [pc, #116]	; (80085f0 <GetBank+0x90>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	b29b      	uxth	r3, r3
 800857e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008582:	4293      	cmp	r3, r2
 8008584:	d008      	beq.n	8008598 <GetBank+0x38>
 8008586:	4b1a      	ldr	r3, [pc, #104]	; (80085f0 <GetBank+0x90>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	029b      	lsls	r3, r3, #10
 800858c:	085a      	lsrs	r2, r3, #1
 800858e:	4b19      	ldr	r3, [pc, #100]	; (80085f4 <GetBank+0x94>)
 8008590:	4013      	ands	r3, r2
 8008592:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8008596:	e000      	b.n	800859a <GetBank+0x3a>
 8008598:	4b17      	ldr	r3, [pc, #92]	; (80085f8 <GetBank+0x98>)
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	4293      	cmp	r3, r2
 800859e:	d902      	bls.n	80085a6 <GetBank+0x46>
    {
      bank = FLASH_BANK_1;
 80085a0:	2301      	movs	r3, #1
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e01b      	b.n	80085de <GetBank+0x7e>
    }
    else
    {
      bank = FLASH_BANK_2;
 80085a6:	2302      	movs	r3, #2
 80085a8:	60fb      	str	r3, [r7, #12]
 80085aa:	e018      	b.n	80085de <GetBank+0x7e>
    }
  }
  else
  {
    /* Bank swap */
    if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80085ac:	4b10      	ldr	r3, [pc, #64]	; (80085f0 <GetBank+0x90>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d008      	beq.n	80085cc <GetBank+0x6c>
 80085ba:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <GetBank+0x90>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	029b      	lsls	r3, r3, #10
 80085c0:	085a      	lsrs	r2, r3, #1
 80085c2:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <GetBank+0x94>)
 80085c4:	4013      	ands	r3, r2
 80085c6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80085ca:	e000      	b.n	80085ce <GetBank+0x6e>
 80085cc:	4b0a      	ldr	r3, [pc, #40]	; (80085f8 <GetBank+0x98>)
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d902      	bls.n	80085da <GetBank+0x7a>
    {
      bank = FLASH_BANK_2;
 80085d4:	2302      	movs	r3, #2
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e001      	b.n	80085de <GetBank+0x7e>
    }
    else
    {
      bank = FLASH_BANK_1;
 80085da:	2301      	movs	r3, #1
 80085dc:	60fb      	str	r3, [r7, #12]
    }
  }

  return bank;
 80085de:	68fb      	ldr	r3, [r7, #12]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3714      	adds	r7, #20
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	40010000 	.word	0x40010000
 80085f0:	1fff75e0 	.word	0x1fff75e0
 80085f4:	01fffe00 	.word	0x01fffe00
 80085f8:	08080000 	.word	0x08080000

080085fc <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	4a04      	ldr	r2, [pc, #16]	; (800861c <BSP_LED_Init+0x20>)
 800860a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800860e:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3708      	adds	r7, #8
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	080128c8 	.word	0x080128c8

08008620 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	4a06      	ldr	r2, [pc, #24]	; (8008648 <BSP_LED_On+0x28>)
 800862e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008632:	2120      	movs	r1, #32
 8008634:	2201      	movs	r2, #1
 8008636:	4618      	mov	r0, r3
 8008638:	f002 fe34 	bl	800b2a4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	2000000c 	.word	0x2000000c

0800864c <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	4603      	mov	r3, r0
 8008654:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8008656:	79fb      	ldrb	r3, [r7, #7]
 8008658:	4a06      	ldr	r2, [pc, #24]	; (8008674 <BSP_LED_Off+0x28>)
 800865a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800865e:	2120      	movs	r1, #32
 8008660:	2200      	movs	r2, #0
 8008662:	4618      	mov	r0, r3
 8008664:	f002 fe1e 	bl	800b2a4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	2000000c 	.word	0x2000000c

08008678 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8008682:	79fb      	ldrb	r3, [r7, #7]
 8008684:	4a06      	ldr	r2, [pc, #24]	; (80086a0 <BSP_LED_Toggle+0x28>)
 8008686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800868a:	2220      	movs	r2, #32
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f002 fe20 	bl	800b2d4 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	2000000c 	.word	0x2000000c

080086a4 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80086aa:	4b1c      	ldr	r3, [pc, #112]	; (800871c <LED_USER_GPIO_Init+0x78>)
 80086ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ae:	4a1b      	ldr	r2, [pc, #108]	; (800871c <LED_USER_GPIO_Init+0x78>)
 80086b0:	f043 0301 	orr.w	r3, r3, #1
 80086b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086b6:	4b19      	ldr	r3, [pc, #100]	; (800871c <LED_USER_GPIO_Init+0x78>)
 80086b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ba:	f003 0301 	and.w	r3, r3, #1
 80086be:	60bb      	str	r3, [r7, #8]
 80086c0:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086c2:	f107 030c 	add.w	r3, r7, #12
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	605a      	str	r2, [r3, #4]
 80086cc:	609a      	str	r2, [r3, #8]
 80086ce:	60da      	str	r2, [r3, #12]
 80086d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80086d2:	4b12      	ldr	r3, [pc, #72]	; (800871c <LED_USER_GPIO_Init+0x78>)
 80086d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086d6:	4a11      	ldr	r2, [pc, #68]	; (800871c <LED_USER_GPIO_Init+0x78>)
 80086d8:	f043 0301 	orr.w	r3, r3, #1
 80086dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086de:	4b0f      	ldr	r3, [pc, #60]	; (800871c <LED_USER_GPIO_Init+0x78>)
 80086e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086e2:	f003 0301 	and.w	r3, r3, #1
 80086e6:	607b      	str	r3, [r7, #4]
 80086e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80086ea:	2200      	movs	r2, #0
 80086ec:	2120      	movs	r1, #32
 80086ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80086f2:	f002 fdd7 	bl	800b2a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80086f6:	2320      	movs	r3, #32
 80086f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086fa:	2301      	movs	r3, #1
 80086fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008702:	2300      	movs	r3, #0
 8008704:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8008706:	f107 030c 	add.w	r3, r7, #12
 800870a:	4619      	mov	r1, r3
 800870c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008710:	f002 fb12 	bl	800ad38 <HAL_GPIO_Init>

}
 8008714:	bf00      	nop
 8008716:	3720      	adds	r7, #32
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	40021000 	.word	0x40021000

08008720 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	460a      	mov	r2, r1
 800872a:	71fb      	strb	r3, [r7, #7]
 800872c:	4613      	mov	r3, r2
 800872e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008730:	2300      	movs	r3, #0
 8008732:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	4a1f      	ldr	r2, [pc, #124]	; (80087b4 <BSP_PB_Init+0x94>)
 8008738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800873c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800873e:	79bb      	ldrb	r3, [r7, #6]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d132      	bne.n	80087aa <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	00db      	lsls	r3, r3, #3
 8008748:	4a1b      	ldr	r2, [pc, #108]	; (80087b8 <BSP_PB_Init+0x98>)
 800874a:	441a      	add	r2, r3
 800874c:	79fb      	ldrb	r3, [r7, #7]
 800874e:	491b      	ldr	r1, [pc, #108]	; (80087bc <BSP_PB_Init+0x9c>)
 8008750:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f002 f816 	bl	800a788 <HAL_EXTI_GetHandle>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008762:	f06f 0303 	mvn.w	r3, #3
 8008766:	60fb      	str	r3, [r7, #12]
 8008768:	e01f      	b.n	80087aa <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 800876a:	79fb      	ldrb	r3, [r7, #7]
 800876c:	00db      	lsls	r3, r3, #3
 800876e:	4a12      	ldr	r2, [pc, #72]	; (80087b8 <BSP_PB_Init+0x98>)
 8008770:	1898      	adds	r0, r3, r2
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	4a12      	ldr	r2, [pc, #72]	; (80087c0 <BSP_PB_Init+0xa0>)
 8008776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800877a:	461a      	mov	r2, r3
 800877c:	2100      	movs	r1, #0
 800877e:	f001 ffe9 	bl	800a754 <HAL_EXTI_RegisterCallback>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d003      	beq.n	8008790 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8008788:	f06f 0303 	mvn.w	r3, #3
 800878c:	60fb      	str	r3, [r7, #12]
 800878e:	e00c      	b.n	80087aa <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8008790:	2028      	movs	r0, #40	; 0x28
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	4a0b      	ldr	r2, [pc, #44]	; (80087c4 <BSP_PB_Init+0xa4>)
 8008796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800879a:	2200      	movs	r2, #0
 800879c:	4619      	mov	r1, r3
 800879e:	f001 fd54 	bl	800a24a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80087a2:	2328      	movs	r3, #40	; 0x28
 80087a4:	4618      	mov	r0, r3
 80087a6:	f001 fd6c 	bl	800a282 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80087aa:	68fb      	ldr	r3, [r7, #12]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	080128cc 	.word	0x080128cc
 80087b8:	20000014 	.word	0x20000014
 80087bc:	080128d0 	.word	0x080128d0
 80087c0:	080128d4 	.word	0x080128d4
 80087c4:	080128d8 	.word	0x080128d8

080087c8 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	4a09      	ldr	r2, [pc, #36]	; (80087fc <BSP_PB_GetState+0x34>)
 80087d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f002 fd47 	bl	800b274 <HAL_GPIO_ReadPin>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	bf0c      	ite	eq
 80087ec:	2301      	moveq	r3, #1
 80087ee:	2300      	movne	r3, #0
 80087f0:	b2db      	uxtb	r3, r3
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	20000010 	.word	0x20000010

08008800 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8008804:	2000      	movs	r0, #0
 8008806:	f7fd fe25 	bl	8006454 <BSP_PB_Callback>
}
 800880a:	bf00      	nop
 800880c:	bd80      	pop	{r7, pc}
	...

08008810 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8008810:	b580      	push	{r7, lr}
 8008812:	b088      	sub	sp, #32
 8008814:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008816:	4b19      	ldr	r3, [pc, #100]	; (800887c <BUTTON_USER_GPIO_Init+0x6c>)
 8008818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881a:	4a18      	ldr	r2, [pc, #96]	; (800887c <BUTTON_USER_GPIO_Init+0x6c>)
 800881c:	f043 0304 	orr.w	r3, r3, #4
 8008820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008822:	4b16      	ldr	r3, [pc, #88]	; (800887c <BUTTON_USER_GPIO_Init+0x6c>)
 8008824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008826:	f003 0304 	and.w	r3, r3, #4
 800882a:	60bb      	str	r3, [r7, #8]
 800882c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800882e:	f107 030c 	add.w	r3, r7, #12
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	605a      	str	r2, [r3, #4]
 8008838:	609a      	str	r2, [r3, #8]
 800883a:	60da      	str	r2, [r3, #12]
 800883c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800883e:	4b0f      	ldr	r3, [pc, #60]	; (800887c <BUTTON_USER_GPIO_Init+0x6c>)
 8008840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008842:	4a0e      	ldr	r2, [pc, #56]	; (800887c <BUTTON_USER_GPIO_Init+0x6c>)
 8008844:	f043 0304 	orr.w	r3, r3, #4
 8008848:	64d3      	str	r3, [r2, #76]	; 0x4c
 800884a:	4b0c      	ldr	r3, [pc, #48]	; (800887c <BUTTON_USER_GPIO_Init+0x6c>)
 800884c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800884e:	f003 0304 	and.w	r3, r3, #4
 8008852:	607b      	str	r3, [r7, #4]
 8008854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8008856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800885a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800885c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8008860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008862:	2300      	movs	r3, #0
 8008864:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8008866:	f107 030c 	add.w	r3, r7, #12
 800886a:	4619      	mov	r1, r3
 800886c:	4804      	ldr	r0, [pc, #16]	; (8008880 <BUTTON_USER_GPIO_Init+0x70>)
 800886e:	f002 fa63 	bl	800ad38 <HAL_GPIO_Init>

}
 8008872:	bf00      	nop
 8008874:	3720      	adds	r7, #32
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	40021000 	.word	0x40021000
 8008880:	48000800 	.word	0x48000800

08008884 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800888e:	2300      	movs	r3, #0
 8008890:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d903      	bls.n	80088a0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008898:	f06f 0301 	mvn.w	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]
 800889e:	e025      	b.n	80088ec <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	79fa      	ldrb	r2, [r7, #7]
 80088a4:	4914      	ldr	r1, [pc, #80]	; (80088f8 <BSP_COM_Init+0x74>)
 80088a6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80088aa:	4814      	ldr	r0, [pc, #80]	; (80088fc <BSP_COM_Init+0x78>)
 80088ac:	4613      	mov	r3, r2
 80088ae:	015b      	lsls	r3, r3, #5
 80088b0:	4413      	add	r3, r2
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4403      	add	r3, r0
 80088b6:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 80088b8:	79fa      	ldrb	r2, [r7, #7]
 80088ba:	4613      	mov	r3, r2
 80088bc:	015b      	lsls	r3, r3, #5
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4a0e      	ldr	r2, [pc, #56]	; (80088fc <BSP_COM_Init+0x78>)
 80088c4:	4413      	add	r3, r2
 80088c6:	4618      	mov	r0, r3
 80088c8:	f000 f86a 	bl	80089a0 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80088cc:	79fa      	ldrb	r2, [r7, #7]
 80088ce:	4613      	mov	r3, r2
 80088d0:	015b      	lsls	r3, r3, #5
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4a09      	ldr	r2, [pc, #36]	; (80088fc <BSP_COM_Init+0x78>)
 80088d8:	4413      	add	r3, r2
 80088da:	4618      	mov	r0, r3
 80088dc:	f000 f810 	bl	8008900 <MX_USART2_UART_Init>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80088e6:	f06f 0303 	mvn.w	r3, #3
 80088ea:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80088ec:	68fb      	ldr	r3, [r7, #12]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	2000001c 	.word	0x2000001c
 80088fc:	200004d0 	.word	0x200004d0

08008900 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008908:	2300      	movs	r3, #0
 800890a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a15      	ldr	r2, [pc, #84]	; (8008964 <MX_USART2_UART_Init+0x64>)
 8008910:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008918:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	220c      	movs	r2, #12
 8008930:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2200      	movs	r2, #0
 8008948:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f004 fc1c 	bl	800d188 <HAL_UART_Init>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <MX_USART2_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800895a:	7bfb      	ldrb	r3, [r7, #15]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3710      	adds	r7, #16
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	40004400 	.word	0x40004400

08008968 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8008970:	4b09      	ldr	r3, [pc, #36]	; (8008998 <__io_putchar+0x30>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	461a      	mov	r2, r3
 8008976:	4613      	mov	r3, r2
 8008978:	015b      	lsls	r3, r3, #5
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	4a07      	ldr	r2, [pc, #28]	; (800899c <__io_putchar+0x34>)
 8008980:	1898      	adds	r0, r3, r2
 8008982:	1d39      	adds	r1, r7, #4
 8008984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008988:	2201      	movs	r2, #1
 800898a:	f004 fc55 	bl	800d238 <HAL_UART_Transmit>
  return ch;
 800898e:	687b      	ldr	r3, [r7, #4]
}
 8008990:	4618      	mov	r0, r3
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20000554 	.word	0x20000554
 800899c:	200004d0 	.word	0x200004d0

080089a0 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b0ac      	sub	sp, #176	; 0xb0
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80089a8:	f107 0314 	add.w	r3, r7, #20
 80089ac:	2288      	movs	r2, #136	; 0x88
 80089ae:	2100      	movs	r1, #0
 80089b0:	4618      	mov	r0, r3
 80089b2:	f008 fdb7 	bl	8011524 <memset>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80089b6:	2302      	movs	r3, #2
 80089b8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80089ba:	2300      	movs	r3, #0
 80089bc:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80089be:	f107 0314 	add.w	r3, r7, #20
 80089c2:	4618      	mov	r0, r3
 80089c4:	f003 faf2 	bl	800bfac <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80089c8:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <USART2_MspInit+0xb8>)
 80089ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089cc:	4a22      	ldr	r2, [pc, #136]	; (8008a58 <USART2_MspInit+0xb8>)
 80089ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089d2:	6593      	str	r3, [r2, #88]	; 0x58
 80089d4:	4b20      	ldr	r3, [pc, #128]	; (8008a58 <USART2_MspInit+0xb8>)
 80089d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089dc:	613b      	str	r3, [r7, #16]
 80089de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089e0:	4b1d      	ldr	r3, [pc, #116]	; (8008a58 <USART2_MspInit+0xb8>)
 80089e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e4:	4a1c      	ldr	r2, [pc, #112]	; (8008a58 <USART2_MspInit+0xb8>)
 80089e6:	f043 0301 	orr.w	r3, r3, #1
 80089ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089ec:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <USART2_MspInit+0xb8>)
 80089ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089f0:	f003 0301 	and.w	r3, r3, #1
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 80089f8:	2304      	movs	r3, #4
 80089fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089fe:	2302      	movs	r3, #2
 8008a00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a04:	2300      	movs	r3, #0
 8008a06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8008a10:	2307      	movs	r3, #7
 8008a12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8008a16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a20:	f002 f98a 	bl	800ad38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8008a24:	2308      	movs	r3, #8
 8008a26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a30:	2300      	movs	r3, #0
 8008a32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a36:	2300      	movs	r3, #0
 8008a38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8008a3c:	2307      	movs	r3, #7
 8008a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8008a42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008a46:	4619      	mov	r1, r3
 8008a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a4c:	f002 f974 	bl	800ad38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8008a50:	bf00      	nop
 8008a52:	37b0      	adds	r7, #176	; 0xb0
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	40021000 	.word	0x40021000

08008a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	af00      	add	r7, sp, #0
#if defined(USER_VECT_TAB_ADDRESS)
  /* Configure the Vector Table location -------------------------------------*/
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
 8008a60:	4b16      	ldr	r3, [pc, #88]	; (8008abc <SystemInit+0x60>)
 8008a62:	4a17      	ldr	r2, [pc, #92]	; (8008ac0 <SystemInit+0x64>)
 8008a64:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008a66:	4b15      	ldr	r3, [pc, #84]	; (8008abc <SystemInit+0x60>)
 8008a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a6c:	4a13      	ldr	r2, [pc, #76]	; (8008abc <SystemInit+0x60>)
 8008a6e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a72:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8008a76:	4b13      	ldr	r3, [pc, #76]	; (8008ac4 <SystemInit+0x68>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a12      	ldr	r2, [pc, #72]	; (8008ac4 <SystemInit+0x68>)
 8008a7c:	f043 0301 	orr.w	r3, r3, #1
 8008a80:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8008a82:	4b10      	ldr	r3, [pc, #64]	; (8008ac4 <SystemInit+0x68>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8008a88:	4b0e      	ldr	r3, [pc, #56]	; (8008ac4 <SystemInit+0x68>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a0d      	ldr	r2, [pc, #52]	; (8008ac4 <SystemInit+0x68>)
 8008a8e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008a92:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008a96:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8008a98:	4b0a      	ldr	r3, [pc, #40]	; (8008ac4 <SystemInit+0x68>)
 8008a9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008a9e:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008aa0:	4b08      	ldr	r3, [pc, #32]	; (8008ac4 <SystemInit+0x68>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a07      	ldr	r2, [pc, #28]	; (8008ac4 <SystemInit+0x68>)
 8008aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008aaa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8008aac:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <SystemInit+0x68>)
 8008aae:	2200      	movs	r2, #0
 8008ab0:	619a      	str	r2, [r3, #24]
}
 8008ab2:	bf00      	nop
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	e000ed00 	.word	0xe000ed00
 8008ac0:	08004000 	.word	0x08004000
 8008ac4:	40021000 	.word	0x40021000

08008ac8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ad2:	4b0c      	ldr	r3, [pc, #48]	; (8008b04 <HAL_Init+0x3c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a0b      	ldr	r2, [pc, #44]	; (8008b04 <HAL_Init+0x3c>)
 8008ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008adc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008ade:	2003      	movs	r0, #3
 8008ae0:	f001 fba8 	bl	800a234 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f000 f80f 	bl	8008b08 <HAL_InitTick>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d002      	beq.n	8008af6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	71fb      	strb	r3, [r7, #7]
 8008af4:	e001      	b.n	8008afa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008af6:	f7ff fa13 	bl	8007f20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008afa:	79fb      	ldrb	r3, [r7, #7]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	40022000 	.word	0x40022000

08008b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008b14:	4b17      	ldr	r3, [pc, #92]	; (8008b74 <HAL_InitTick+0x6c>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d023      	beq.n	8008b64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008b1c:	4b16      	ldr	r3, [pc, #88]	; (8008b78 <HAL_InitTick+0x70>)
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	4b14      	ldr	r3, [pc, #80]	; (8008b74 <HAL_InitTick+0x6c>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	4619      	mov	r1, r3
 8008b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b32:	4618      	mov	r0, r3
 8008b34:	f001 fbc5 	bl	800a2c2 <HAL_SYSTICK_Config>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d10f      	bne.n	8008b5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b0f      	cmp	r3, #15
 8008b42:	d809      	bhi.n	8008b58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008b44:	2200      	movs	r2, #0
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	f001 fb7d 	bl	800a24a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008b50:	4a0a      	ldr	r2, [pc, #40]	; (8008b7c <HAL_InitTick+0x74>)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6013      	str	r3, [r2, #0]
 8008b56:	e007      	b.n	8008b68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	73fb      	strb	r3, [r7, #15]
 8008b5c:	e004      	b.n	8008b68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	73fb      	strb	r3, [r7, #15]
 8008b62:	e001      	b.n	8008b68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20000028 	.word	0x20000028
 8008b78:	20000020 	.word	0x20000020
 8008b7c:	20000024 	.word	0x20000024

08008b80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008b80:	b480      	push	{r7}
 8008b82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008b84:	4b06      	ldr	r3, [pc, #24]	; (8008ba0 <HAL_IncTick+0x20>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	461a      	mov	r2, r3
 8008b8a:	4b06      	ldr	r3, [pc, #24]	; (8008ba4 <HAL_IncTick+0x24>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4413      	add	r3, r2
 8008b90:	4a04      	ldr	r2, [pc, #16]	; (8008ba4 <HAL_IncTick+0x24>)
 8008b92:	6013      	str	r3, [r2, #0]
}
 8008b94:	bf00      	nop
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20000028 	.word	0x20000028
 8008ba4:	20000558 	.word	0x20000558

08008ba8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	af00      	add	r7, sp, #0
  return uwTick;
 8008bac:	4b03      	ldr	r3, [pc, #12]	; (8008bbc <HAL_GetTick+0x14>)
 8008bae:	681b      	ldr	r3, [r3, #0]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	20000558 	.word	0x20000558

08008bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008bc8:	f7ff ffee 	bl	8008ba8 <HAL_GetTick>
 8008bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd8:	d005      	beq.n	8008be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008bda:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <HAL_Delay+0x44>)
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	4413      	add	r3, r2
 8008be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008be6:	bf00      	nop
 8008be8:	f7ff ffde 	bl	8008ba8 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d8f7      	bhi.n	8008be8 <HAL_Delay+0x28>
  {
  }
}
 8008bf8:	bf00      	nop
 8008bfa:	bf00      	nop
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000028 	.word	0x20000028

08008c08 <HAL_GetHalVersion>:
/**
  * @brief  Return the HAL revision.
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
  return STM32L4XX_HAL_VERSION;
 8008c0c:	4b02      	ldr	r3, [pc, #8]	; (8008c18 <HAL_GetHalVersion+0x10>)
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	010d0200 	.word	0x010d0200

08008c1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	431a      	orrs	r2, r3
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	609a      	str	r2, [r3, #8]
}
 8008c36:	bf00      	nop
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b083      	sub	sp, #12
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	431a      	orrs	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	609a      	str	r2, [r3, #8]
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
 8008c90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	3360      	adds	r3, #96	; 0x60
 8008c96:	461a      	mov	r2, r3
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	681a      	ldr	r2, [r3, #0]
 8008ca4:	4b08      	ldr	r3, [pc, #32]	; (8008cc8 <LL_ADC_SetOffset+0x44>)
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008cbc:	bf00      	nop
 8008cbe:	371c      	adds	r7, #28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	03fff000 	.word	0x03fff000

08008ccc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3360      	adds	r3, #96	; 0x60
 8008cda:	461a      	mov	r2, r3
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	4413      	add	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b087      	sub	sp, #28
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	3360      	adds	r3, #96	; 0x60
 8008d08:	461a      	mov	r2, r3
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	4413      	add	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	431a      	orrs	r2, r3
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008d22:	bf00      	nop
 8008d24:	371c      	adds	r7, #28
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008d42:	2301      	movs	r3, #1
 8008d44:	e000      	b.n	8008d48 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3330      	adds	r3, #48	; 0x30
 8008d64:	461a      	mov	r2, r3
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	0a1b      	lsrs	r3, r3, #8
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	f003 030c 	and.w	r3, r3, #12
 8008d70:	4413      	add	r3, r2
 8008d72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f003 031f 	and.w	r3, r3, #31
 8008d7e:	211f      	movs	r1, #31
 8008d80:	fa01 f303 	lsl.w	r3, r1, r3
 8008d84:	43db      	mvns	r3, r3
 8008d86:	401a      	ands	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	0e9b      	lsrs	r3, r3, #26
 8008d8c:	f003 011f 	and.w	r1, r3, #31
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f003 031f 	and.w	r3, r3, #31
 8008d96:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008da0:	bf00      	nop
 8008da2:	371c      	adds	r7, #28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3314      	adds	r3, #20
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	0e5b      	lsrs	r3, r3, #25
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	f003 0304 	and.w	r3, r3, #4
 8008dc8:	4413      	add	r3, r2
 8008dca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	0d1b      	lsrs	r3, r3, #20
 8008dd4:	f003 031f 	and.w	r3, r3, #31
 8008dd8:	2107      	movs	r1, #7
 8008dda:	fa01 f303 	lsl.w	r3, r1, r3
 8008dde:	43db      	mvns	r3, r3
 8008de0:	401a      	ands	r2, r3
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	0d1b      	lsrs	r3, r3, #20
 8008de6:	f003 031f 	and.w	r3, r3, #31
 8008dea:	6879      	ldr	r1, [r7, #4]
 8008dec:	fa01 f303 	lsl.w	r3, r1, r3
 8008df0:	431a      	orrs	r2, r3
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008df6:	bf00      	nop
 8008df8:	371c      	adds	r7, #28
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr
	...

08008e04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e1c:	43db      	mvns	r3, r3
 8008e1e:	401a      	ands	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f003 0318 	and.w	r3, r3, #24
 8008e26:	4908      	ldr	r1, [pc, #32]	; (8008e48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008e28:	40d9      	lsrs	r1, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	400b      	ands	r3, r1
 8008e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e32:	431a      	orrs	r2, r3
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008e3a:	bf00      	nop
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	0007ffff 	.word	0x0007ffff

08008e4c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f003 031f 	and.w	r3, r3, #31
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	370c      	adds	r7, #12
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr

08008e68 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b083      	sub	sp, #12
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008e94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	6093      	str	r3, [r2, #8]
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b083      	sub	sp, #12
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ebc:	d101      	bne.n	8008ec2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008ebe:	2301      	movs	r3, #1
 8008ec0:	e000      	b.n	8008ec4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008ec2:	2300      	movs	r3, #0
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008ee0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ee4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f0c:	d101      	bne.n	8008f12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e000      	b.n	8008f14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008f12:	2300      	movs	r3, #0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f34:	f043 0201 	orr.w	r2, r3, #1
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d101      	bne.n	8008f60 <LL_ADC_IsEnabled+0x18>
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e000      	b.n	8008f62 <LL_ADC_IsEnabled+0x1a>
 8008f60:	2300      	movs	r3, #0
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	370c      	adds	r7, #12
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b083      	sub	sp, #12
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	689b      	ldr	r3, [r3, #8]
 8008f7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008f7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f82:	f043 0204 	orr.w	r2, r3, #4
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008f8a:	bf00      	nop
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f003 0304 	and.w	r3, r3, #4
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	d101      	bne.n	8008fae <LL_ADC_REG_IsConversionOngoing+0x18>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e000      	b.n	8008fb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f003 0308 	and.w	r3, r3, #8
 8008fcc:	2b08      	cmp	r3, #8
 8008fce:	d101      	bne.n	8008fd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e000      	b.n	8008fd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
	...

08008fe4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008fe4:	b590      	push	{r4, r7, lr}
 8008fe6:	b089      	sub	sp, #36	; 0x24
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d101      	bne.n	8008ffe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e136      	b.n	800926c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009008:	2b00      	cmp	r3, #0
 800900a:	d109      	bne.n	8009020 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7fe ffab 	bl	8007f68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4618      	mov	r0, r3
 8009026:	f7ff ff3f 	bl	8008ea8 <LL_ADC_IsDeepPowerDownEnabled>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d004      	beq.n	800903a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4618      	mov	r0, r3
 8009036:	f7ff ff25 	bl	8008e84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4618      	mov	r0, r3
 8009040:	f7ff ff5a 	bl	8008ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d115      	bne.n	8009076 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff ff3e 	bl	8008ed0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009054:	4b87      	ldr	r3, [pc, #540]	; (8009274 <HAL_ADC_Init+0x290>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	099b      	lsrs	r3, r3, #6
 800905a:	4a87      	ldr	r2, [pc, #540]	; (8009278 <HAL_ADC_Init+0x294>)
 800905c:	fba2 2303 	umull	r2, r3, r2, r3
 8009060:	099b      	lsrs	r3, r3, #6
 8009062:	3301      	adds	r3, #1
 8009064:	005b      	lsls	r3, r3, #1
 8009066:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009068:	e002      	b.n	8009070 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	3b01      	subs	r3, #1
 800906e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1f9      	bne.n	800906a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff ff3c 	bl	8008ef8 <LL_ADC_IsInternalRegulatorEnabled>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10d      	bne.n	80090a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800908a:	f043 0210 	orr.w	r2, r3, #16
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009096:	f043 0201 	orr.w	r2, r3, #1
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff ff75 	bl	8008f96 <LL_ADC_REG_IsConversionOngoing>
 80090ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b2:	f003 0310 	and.w	r3, r3, #16
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f040 80cf 	bne.w	800925a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f040 80cb 	bne.w	800925a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80090cc:	f043 0202 	orr.w	r2, r3, #2
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4618      	mov	r0, r3
 80090da:	f7ff ff35 	bl	8008f48 <LL_ADC_IsEnabled>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d115      	bne.n	8009110 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80090e4:	4865      	ldr	r0, [pc, #404]	; (800927c <HAL_ADC_Init+0x298>)
 80090e6:	f7ff ff2f 	bl	8008f48 <LL_ADC_IsEnabled>
 80090ea:	4604      	mov	r4, r0
 80090ec:	4864      	ldr	r0, [pc, #400]	; (8009280 <HAL_ADC_Init+0x29c>)
 80090ee:	f7ff ff2b 	bl	8008f48 <LL_ADC_IsEnabled>
 80090f2:	4603      	mov	r3, r0
 80090f4:	431c      	orrs	r4, r3
 80090f6:	4863      	ldr	r0, [pc, #396]	; (8009284 <HAL_ADC_Init+0x2a0>)
 80090f8:	f7ff ff26 	bl	8008f48 <LL_ADC_IsEnabled>
 80090fc:	4603      	mov	r3, r0
 80090fe:	4323      	orrs	r3, r4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d105      	bne.n	8009110 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	4619      	mov	r1, r3
 800910a:	485f      	ldr	r0, [pc, #380]	; (8009288 <HAL_ADC_Init+0x2a4>)
 800910c:	f7ff fd86 	bl	8008c1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	7e5b      	ldrb	r3, [r3, #25]
 8009114:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800911a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8009120:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8009126:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800912e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009130:	4313      	orrs	r3, r2
 8009132:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f893 3020 	ldrb.w	r3, [r3, #32]
 800913a:	2b01      	cmp	r3, #1
 800913c:	d106      	bne.n	800914c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	3b01      	subs	r3, #1
 8009144:	045b      	lsls	r3, r3, #17
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	4313      	orrs	r3, r2
 800914a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009150:	2b00      	cmp	r3, #0
 8009152:	d009      	beq.n	8009168 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009158:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	4313      	orrs	r3, r2
 8009166:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	68da      	ldr	r2, [r3, #12]
 800916e:	4b47      	ldr	r3, [pc, #284]	; (800928c <HAL_ADC_Init+0x2a8>)
 8009170:	4013      	ands	r3, r2
 8009172:	687a      	ldr	r2, [r7, #4]
 8009174:	6812      	ldr	r2, [r2, #0]
 8009176:	69b9      	ldr	r1, [r7, #24]
 8009178:	430b      	orrs	r3, r1
 800917a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4618      	mov	r0, r3
 8009182:	f7ff ff08 	bl	8008f96 <LL_ADC_REG_IsConversionOngoing>
 8009186:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f7ff ff15 	bl	8008fbc <LL_ADC_INJ_IsConversionOngoing>
 8009192:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d13d      	bne.n	8009216 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d13a      	bne.n	8009216 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80091a4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80091ac:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80091ae:	4313      	orrs	r3, r2
 80091b0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091bc:	f023 0302 	bic.w	r3, r3, #2
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	6812      	ldr	r2, [r2, #0]
 80091c4:	69b9      	ldr	r1, [r7, #24]
 80091c6:	430b      	orrs	r3, r1
 80091c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d118      	bne.n	8009206 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	691b      	ldr	r3, [r3, #16]
 80091da:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80091de:	f023 0304 	bic.w	r3, r3, #4
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80091ea:	4311      	orrs	r1, r2
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80091f0:	4311      	orrs	r1, r2
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80091f6:	430a      	orrs	r2, r1
 80091f8:	431a      	orrs	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f042 0201 	orr.w	r2, r2, #1
 8009202:	611a      	str	r2, [r3, #16]
 8009204:	e007      	b.n	8009216 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	691a      	ldr	r2, [r3, #16]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0201 	bic.w	r2, r2, #1
 8009214:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d10c      	bne.n	8009238 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009224:	f023 010f 	bic.w	r1, r3, #15
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	69db      	ldr	r3, [r3, #28]
 800922c:	1e5a      	subs	r2, r3, #1
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	631a      	str	r2, [r3, #48]	; 0x30
 8009236:	e007      	b.n	8009248 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f022 020f 	bic.w	r2, r2, #15
 8009246:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800924c:	f023 0303 	bic.w	r3, r3, #3
 8009250:	f043 0201 	orr.w	r2, r3, #1
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	655a      	str	r2, [r3, #84]	; 0x54
 8009258:	e007      	b.n	800926a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800925e:	f043 0210 	orr.w	r2, r3, #16
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800926a:	7ffb      	ldrb	r3, [r7, #31]
}
 800926c:	4618      	mov	r0, r3
 800926e:	3724      	adds	r7, #36	; 0x24
 8009270:	46bd      	mov	sp, r7
 8009272:	bd90      	pop	{r4, r7, pc}
 8009274:	20000020 	.word	0x20000020
 8009278:	053e2d63 	.word	0x053e2d63
 800927c:	50040000 	.word	0x50040000
 8009280:	50040100 	.word	0x50040100
 8009284:	50040200 	.word	0x50040200
 8009288:	50040300 	.word	0x50040300
 800928c:	fff0c007 	.word	0xfff0c007

08009290 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009298:	4857      	ldr	r0, [pc, #348]	; (80093f8 <HAL_ADC_Start+0x168>)
 800929a:	f7ff fdd7 	bl	8008e4c <LL_ADC_GetMultimode>
 800929e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff fe76 	bl	8008f96 <LL_ADC_REG_IsConversionOngoing>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f040 809c 	bne.w	80093ea <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d101      	bne.n	80092c0 <HAL_ADC_Start+0x30>
 80092bc:	2302      	movs	r3, #2
 80092be:	e097      	b.n	80093f0 <HAL_ADC_Start+0x160>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fd71 	bl	8009db0 <ADC_Enable>
 80092ce:	4603      	mov	r3, r0
 80092d0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80092d2:	7dfb      	ldrb	r3, [r7, #23]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f040 8083 	bne.w	80093e0 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80092e2:	f023 0301 	bic.w	r3, r3, #1
 80092e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a42      	ldr	r2, [pc, #264]	; (80093fc <HAL_ADC_Start+0x16c>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d002      	beq.n	80092fe <HAL_ADC_Start+0x6e>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	e000      	b.n	8009300 <HAL_ADC_Start+0x70>
 80092fe:	4b40      	ldr	r3, [pc, #256]	; (8009400 <HAL_ADC_Start+0x170>)
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	6812      	ldr	r2, [r2, #0]
 8009304:	4293      	cmp	r3, r2
 8009306:	d002      	beq.n	800930e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d105      	bne.n	800931a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009312:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800931e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009326:	d106      	bne.n	8009336 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800932c:	f023 0206 	bic.w	r2, r3, #6
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	659a      	str	r2, [r3, #88]	; 0x58
 8009334:	e002      	b.n	800933c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	221c      	movs	r2, #28
 8009342:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a2a      	ldr	r2, [pc, #168]	; (80093fc <HAL_ADC_Start+0x16c>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d002      	beq.n	800935c <HAL_ADC_Start+0xcc>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	e000      	b.n	800935e <HAL_ADC_Start+0xce>
 800935c:	4b28      	ldr	r3, [pc, #160]	; (8009400 <HAL_ADC_Start+0x170>)
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	6812      	ldr	r2, [r2, #0]
 8009362:	4293      	cmp	r3, r2
 8009364:	d008      	beq.n	8009378 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2b05      	cmp	r3, #5
 8009370:	d002      	beq.n	8009378 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	2b09      	cmp	r3, #9
 8009376:	d114      	bne.n	80093a2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009382:	2b00      	cmp	r3, #0
 8009384:	d007      	beq.n	8009396 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800938a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800938e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f7ff fde7 	bl	8008f6e <LL_ADC_REG_StartConversion>
 80093a0:	e025      	b.n	80093ee <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a12      	ldr	r2, [pc, #72]	; (80093fc <HAL_ADC_Start+0x16c>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d002      	beq.n	80093be <HAL_ADC_Start+0x12e>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	e000      	b.n	80093c0 <HAL_ADC_Start+0x130>
 80093be:	4b10      	ldr	r3, [pc, #64]	; (8009400 <HAL_ADC_Start+0x170>)
 80093c0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00f      	beq.n	80093ee <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80093d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	655a      	str	r2, [r3, #84]	; 0x54
 80093de:	e006      	b.n	80093ee <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80093e8:	e001      	b.n	80093ee <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80093ea:	2302      	movs	r3, #2
 80093ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	50040300 	.word	0x50040300
 80093fc:	50040100 	.word	0x50040100
 8009400:	50040000 	.word	0x50040000

08009404 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b088      	sub	sp, #32
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800940e:	4866      	ldr	r0, [pc, #408]	; (80095a8 <HAL_ADC_PollForConversion+0x1a4>)
 8009410:	f7ff fd1c 	bl	8008e4c <LL_ADC_GetMultimode>
 8009414:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	695b      	ldr	r3, [r3, #20]
 800941a:	2b08      	cmp	r3, #8
 800941c:	d102      	bne.n	8009424 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800941e:	2308      	movs	r3, #8
 8009420:	61fb      	str	r3, [r7, #28]
 8009422:	e02a      	b.n	800947a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b05      	cmp	r3, #5
 800942e:	d002      	beq.n	8009436 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	2b09      	cmp	r3, #9
 8009434:	d111      	bne.n	800945a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	f003 0301 	and.w	r3, r3, #1
 8009440:	2b00      	cmp	r3, #0
 8009442:	d007      	beq.n	8009454 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009448:	f043 0220 	orr.w	r2, r3, #32
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e0a4      	b.n	800959e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8009454:	2304      	movs	r3, #4
 8009456:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8009458:	e00f      	b.n	800947a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800945a:	4853      	ldr	r0, [pc, #332]	; (80095a8 <HAL_ADC_PollForConversion+0x1a4>)
 800945c:	f7ff fd04 	bl	8008e68 <LL_ADC_GetMultiDMATransfer>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d007      	beq.n	8009476 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800946a:	f043 0220 	orr.w	r2, r3, #32
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e093      	b.n	800959e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8009476:	2304      	movs	r3, #4
 8009478:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800947a:	f7ff fb95 	bl	8008ba8 <HAL_GetTick>
 800947e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8009480:	e021      	b.n	80094c6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009488:	d01d      	beq.n	80094c6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800948a:	f7ff fb8d 	bl	8008ba8 <HAL_GetTick>
 800948e:	4602      	mov	r2, r0
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	1ad3      	subs	r3, r2, r3
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	429a      	cmp	r2, r3
 8009498:	d302      	bcc.n	80094a0 <HAL_ADC_PollForConversion+0x9c>
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d112      	bne.n	80094c6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	4013      	ands	r3, r2
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10b      	bne.n	80094c6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b2:	f043 0204 	orr.w	r2, r3, #4
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e06b      	b.n	800959e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4013      	ands	r3, r2
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0d6      	beq.n	8009482 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff fc22 	bl	8008d2e <LL_ADC_REG_IsTriggerSourceSWStart>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01c      	beq.n	800952a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	7e5b      	ldrb	r3, [r3, #25]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d118      	bne.n	800952a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0308 	and.w	r3, r3, #8
 8009502:	2b08      	cmp	r3, #8
 8009504:	d111      	bne.n	800952a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800951a:	2b00      	cmp	r3, #0
 800951c:	d105      	bne.n	800952a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009522:	f043 0201 	orr.w	r2, r3, #1
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4a1f      	ldr	r2, [pc, #124]	; (80095ac <HAL_ADC_PollForConversion+0x1a8>)
 8009530:	4293      	cmp	r3, r2
 8009532:	d002      	beq.n	800953a <HAL_ADC_PollForConversion+0x136>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	e000      	b.n	800953c <HAL_ADC_PollForConversion+0x138>
 800953a:	4b1d      	ldr	r3, [pc, #116]	; (80095b0 <HAL_ADC_PollForConversion+0x1ac>)
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	6812      	ldr	r2, [r2, #0]
 8009540:	4293      	cmp	r3, r2
 8009542:	d008      	beq.n	8009556 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d005      	beq.n	8009556 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b05      	cmp	r3, #5
 800954e:	d002      	beq.n	8009556 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	2b09      	cmp	r3, #9
 8009554:	d104      	bne.n	8009560 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	61bb      	str	r3, [r7, #24]
 800955e:	e00c      	b.n	800957a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a11      	ldr	r2, [pc, #68]	; (80095ac <HAL_ADC_PollForConversion+0x1a8>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d002      	beq.n	8009570 <HAL_ADC_PollForConversion+0x16c>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	e000      	b.n	8009572 <HAL_ADC_PollForConversion+0x16e>
 8009570:	4b0f      	ldr	r3, [pc, #60]	; (80095b0 <HAL_ADC_PollForConversion+0x1ac>)
 8009572:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	2b08      	cmp	r3, #8
 800957e:	d104      	bne.n	800958a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2208      	movs	r2, #8
 8009586:	601a      	str	r2, [r3, #0]
 8009588:	e008      	b.n	800959c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d103      	bne.n	800959c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	220c      	movs	r2, #12
 800959a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3720      	adds	r7, #32
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	50040300 	.word	0x50040300
 80095ac:	50040100 	.word	0x50040100
 80095b0:	50040000 	.word	0x50040000

080095b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
	...

080095d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b0b6      	sub	sp, #216	; 0xd8
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80095da:	2300      	movs	r3, #0
 80095dc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80095e0:	2300      	movs	r3, #0
 80095e2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d101      	bne.n	80095f2 <HAL_ADC_ConfigChannel+0x22>
 80095ee:	2302      	movs	r3, #2
 80095f0:	e3c7      	b.n	8009d82 <HAL_ADC_ConfigChannel+0x7b2>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff fcc9 	bl	8008f96 <LL_ADC_REG_IsConversionOngoing>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	f040 83a8 	bne.w	8009d5c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	2b05      	cmp	r3, #5
 8009612:	d824      	bhi.n	800965e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	3b02      	subs	r3, #2
 800961a:	2b03      	cmp	r3, #3
 800961c:	d81b      	bhi.n	8009656 <HAL_ADC_ConfigChannel+0x86>
 800961e:	a201      	add	r2, pc, #4	; (adr r2, 8009624 <HAL_ADC_ConfigChannel+0x54>)
 8009620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009624:	08009635 	.word	0x08009635
 8009628:	0800963d 	.word	0x0800963d
 800962c:	08009645 	.word	0x08009645
 8009630:	0800964d 	.word	0x0800964d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	220c      	movs	r2, #12
 8009638:	605a      	str	r2, [r3, #4]
          break;
 800963a:	e010      	b.n	800965e <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2212      	movs	r2, #18
 8009640:	605a      	str	r2, [r3, #4]
          break;
 8009642:	e00c      	b.n	800965e <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	2218      	movs	r2, #24
 8009648:	605a      	str	r2, [r3, #4]
          break;
 800964a:	e008      	b.n	800965e <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009652:	605a      	str	r2, [r3, #4]
          break;
 8009654:	e003      	b.n	800965e <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2206      	movs	r2, #6
 800965a:	605a      	str	r2, [r3, #4]
          break;
 800965c:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6818      	ldr	r0, [r3, #0]
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	6859      	ldr	r1, [r3, #4]
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	f7ff fb72 	bl	8008d54 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4618      	mov	r0, r3
 8009676:	f7ff fc8e 	bl	8008f96 <LL_ADC_REG_IsConversionOngoing>
 800967a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff fc9a 	bl	8008fbc <LL_ADC_INJ_IsConversionOngoing>
 8009688:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800968c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009690:	2b00      	cmp	r3, #0
 8009692:	f040 81a6 	bne.w	80099e2 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800969a:	2b00      	cmp	r3, #0
 800969c:	f040 81a1 	bne.w	80099e2 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	6819      	ldr	r1, [r3, #0]
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	461a      	mov	r2, r3
 80096ae:	f7ff fb7d 	bl	8008dac <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	695a      	ldr	r2, [r3, #20]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	08db      	lsrs	r3, r3, #3
 80096be:	f003 0303 	and.w	r3, r3, #3
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	fa02 f303 	lsl.w	r3, r2, r3
 80096c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d00a      	beq.n	80096ea <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6818      	ldr	r0, [r3, #0]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	6919      	ldr	r1, [r3, #16]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096e4:	f7ff face 	bl	8008c84 <LL_ADC_SetOffset>
 80096e8:	e17b      	b.n	80099e2 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	2100      	movs	r1, #0
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff faeb 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10a      	bne.n	8009716 <HAL_ADC_ConfigChannel+0x146>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2100      	movs	r1, #0
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff fae0 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 800970c:	4603      	mov	r3, r0
 800970e:	0e9b      	lsrs	r3, r3, #26
 8009710:	f003 021f 	and.w	r2, r3, #31
 8009714:	e01e      	b.n	8009754 <HAL_ADC_ConfigChannel+0x184>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2100      	movs	r1, #0
 800971c:	4618      	mov	r0, r3
 800971e:	f7ff fad5 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 8009722:	4603      	mov	r3, r0
 8009724:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009728:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800972c:	fa93 f3a3 	rbit	r3, r3
 8009730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009734:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009738:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800973c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8009744:	2320      	movs	r3, #32
 8009746:	e004      	b.n	8009752 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8009748:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800974c:	fab3 f383 	clz	r3, r3
 8009750:	b2db      	uxtb	r3, r3
 8009752:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800975c:	2b00      	cmp	r3, #0
 800975e:	d105      	bne.n	800976c <HAL_ADC_ConfigChannel+0x19c>
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	0e9b      	lsrs	r3, r3, #26
 8009766:	f003 031f 	and.w	r3, r3, #31
 800976a:	e018      	b.n	800979e <HAL_ADC_ConfigChannel+0x1ce>
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009774:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009778:	fa93 f3a3 	rbit	r3, r3
 800977c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8009780:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009784:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8009788:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800978c:	2b00      	cmp	r3, #0
 800978e:	d101      	bne.n	8009794 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8009790:	2320      	movs	r3, #32
 8009792:	e004      	b.n	800979e <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8009794:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009798:	fab3 f383 	clz	r3, r3
 800979c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800979e:	429a      	cmp	r2, r3
 80097a0:	d106      	bne.n	80097b0 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2200      	movs	r2, #0
 80097a8:	2100      	movs	r1, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff faa4 	bl	8008cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2101      	movs	r1, #1
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff fa88 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 80097bc:	4603      	mov	r3, r0
 80097be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d10a      	bne.n	80097dc <HAL_ADC_ConfigChannel+0x20c>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2101      	movs	r1, #1
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff fa7d 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 80097d2:	4603      	mov	r3, r0
 80097d4:	0e9b      	lsrs	r3, r3, #26
 80097d6:	f003 021f 	and.w	r2, r3, #31
 80097da:	e01e      	b.n	800981a <HAL_ADC_ConfigChannel+0x24a>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2101      	movs	r1, #1
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7ff fa72 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80097ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80097f2:	fa93 f3a3 	rbit	r3, r3
 80097f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80097fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8009802:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009806:	2b00      	cmp	r3, #0
 8009808:	d101      	bne.n	800980e <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 800980a:	2320      	movs	r3, #32
 800980c:	e004      	b.n	8009818 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 800980e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009812:	fab3 f383 	clz	r3, r3
 8009816:	b2db      	uxtb	r3, r3
 8009818:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009822:	2b00      	cmp	r3, #0
 8009824:	d105      	bne.n	8009832 <HAL_ADC_ConfigChannel+0x262>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	0e9b      	lsrs	r3, r3, #26
 800982c:	f003 031f 	and.w	r3, r3, #31
 8009830:	e018      	b.n	8009864 <HAL_ADC_ConfigChannel+0x294>
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800983a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800983e:	fa93 f3a3 	rbit	r3, r3
 8009842:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8009846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800984a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800984e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009852:	2b00      	cmp	r3, #0
 8009854:	d101      	bne.n	800985a <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8009856:	2320      	movs	r3, #32
 8009858:	e004      	b.n	8009864 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 800985a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800985e:	fab3 f383 	clz	r3, r3
 8009862:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009864:	429a      	cmp	r2, r3
 8009866:	d106      	bne.n	8009876 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2200      	movs	r2, #0
 800986e:	2101      	movs	r1, #1
 8009870:	4618      	mov	r0, r3
 8009872:	f7ff fa41 	bl	8008cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	2102      	movs	r1, #2
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff fa25 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 8009882:	4603      	mov	r3, r0
 8009884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009888:	2b00      	cmp	r3, #0
 800988a:	d10a      	bne.n	80098a2 <HAL_ADC_ConfigChannel+0x2d2>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2102      	movs	r1, #2
 8009892:	4618      	mov	r0, r3
 8009894:	f7ff fa1a 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 8009898:	4603      	mov	r3, r0
 800989a:	0e9b      	lsrs	r3, r3, #26
 800989c:	f003 021f 	and.w	r2, r3, #31
 80098a0:	e01e      	b.n	80098e0 <HAL_ADC_ConfigChannel+0x310>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2102      	movs	r1, #2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff fa0f 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 80098ae:	4603      	mov	r3, r0
 80098b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098b8:	fa93 f3a3 	rbit	r3, r3
 80098bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80098c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80098c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d101      	bne.n	80098d4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80098d0:	2320      	movs	r3, #32
 80098d2:	e004      	b.n	80098de <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80098d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80098d8:	fab3 f383 	clz	r3, r3
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d105      	bne.n	80098f8 <HAL_ADC_ConfigChannel+0x328>
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	0e9b      	lsrs	r3, r3, #26
 80098f2:	f003 031f 	and.w	r3, r3, #31
 80098f6:	e016      	b.n	8009926 <HAL_ADC_ConfigChannel+0x356>
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009904:	fa93 f3a3 	rbit	r3, r3
 8009908:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800990a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800990c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8009910:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009914:	2b00      	cmp	r3, #0
 8009916:	d101      	bne.n	800991c <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8009918:	2320      	movs	r3, #32
 800991a:	e004      	b.n	8009926 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 800991c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009920:	fab3 f383 	clz	r3, r3
 8009924:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009926:	429a      	cmp	r2, r3
 8009928:	d106      	bne.n	8009938 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2200      	movs	r2, #0
 8009930:	2102      	movs	r1, #2
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff f9e0 	bl	8008cf8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2103      	movs	r1, #3
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff f9c4 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 8009944:	4603      	mov	r3, r0
 8009946:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10a      	bne.n	8009964 <HAL_ADC_ConfigChannel+0x394>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2103      	movs	r1, #3
 8009954:	4618      	mov	r0, r3
 8009956:	f7ff f9b9 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 800995a:	4603      	mov	r3, r0
 800995c:	0e9b      	lsrs	r3, r3, #26
 800995e:	f003 021f 	and.w	r2, r3, #31
 8009962:	e017      	b.n	8009994 <HAL_ADC_ConfigChannel+0x3c4>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2103      	movs	r1, #3
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff f9ae 	bl	8008ccc <LL_ADC_GetOffsetChannel>
 8009970:	4603      	mov	r3, r0
 8009972:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009976:	fa93 f3a3 	rbit	r3, r3
 800997a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800997c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800997e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8009980:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8009986:	2320      	movs	r3, #32
 8009988:	e003      	b.n	8009992 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 800998a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800998c:	fab3 f383 	clz	r3, r3
 8009990:	b2db      	uxtb	r3, r3
 8009992:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800999c:	2b00      	cmp	r3, #0
 800999e:	d105      	bne.n	80099ac <HAL_ADC_ConfigChannel+0x3dc>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	0e9b      	lsrs	r3, r3, #26
 80099a6:	f003 031f 	and.w	r3, r3, #31
 80099aa:	e011      	b.n	80099d0 <HAL_ADC_ConfigChannel+0x400>
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80099b4:	fa93 f3a3 	rbit	r3, r3
 80099b8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80099ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80099be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d101      	bne.n	80099c8 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 80099c4:	2320      	movs	r3, #32
 80099c6:	e003      	b.n	80099d0 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 80099c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099ca:	fab3 f383 	clz	r3, r3
 80099ce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d106      	bne.n	80099e2 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2200      	movs	r2, #0
 80099da:	2103      	movs	r1, #3
 80099dc:	4618      	mov	r0, r3
 80099de:	f7ff f98b 	bl	8008cf8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7ff faae 	bl	8008f48 <LL_ADC_IsEnabled>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f040 8140 	bne.w	8009c74 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	6818      	ldr	r0, [r3, #0]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	6819      	ldr	r1, [r3, #0]
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	68db      	ldr	r3, [r3, #12]
 8009a00:	461a      	mov	r2, r3
 8009a02:	f7ff f9ff 	bl	8008e04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	4a8f      	ldr	r2, [pc, #572]	; (8009c48 <HAL_ADC_ConfigChannel+0x678>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	f040 8131 	bne.w	8009c74 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10b      	bne.n	8009a3a <HAL_ADC_ConfigChannel+0x46a>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	0e9b      	lsrs	r3, r3, #26
 8009a28:	3301      	adds	r3, #1
 8009a2a:	f003 031f 	and.w	r3, r3, #31
 8009a2e:	2b09      	cmp	r3, #9
 8009a30:	bf94      	ite	ls
 8009a32:	2301      	movls	r3, #1
 8009a34:	2300      	movhi	r3, #0
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	e019      	b.n	8009a6e <HAL_ADC_ConfigChannel+0x49e>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a42:	fa93 f3a3 	rbit	r3, r3
 8009a46:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8009a48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a4a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8009a4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d101      	bne.n	8009a56 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8009a52:	2320      	movs	r3, #32
 8009a54:	e003      	b.n	8009a5e <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8009a56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a58:	fab3 f383 	clz	r3, r3
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	3301      	adds	r3, #1
 8009a60:	f003 031f 	and.w	r3, r3, #31
 8009a64:	2b09      	cmp	r3, #9
 8009a66:	bf94      	ite	ls
 8009a68:	2301      	movls	r3, #1
 8009a6a:	2300      	movhi	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d079      	beq.n	8009b66 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d107      	bne.n	8009a8e <HAL_ADC_ConfigChannel+0x4be>
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	0e9b      	lsrs	r3, r3, #26
 8009a84:	3301      	adds	r3, #1
 8009a86:	069b      	lsls	r3, r3, #26
 8009a88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009a8c:	e015      	b.n	8009aba <HAL_ADC_ConfigChannel+0x4ea>
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a96:	fa93 f3a3 	rbit	r3, r3
 8009a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8009aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d101      	bne.n	8009aaa <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8009aa6:	2320      	movs	r3, #32
 8009aa8:	e003      	b.n	8009ab2 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8009aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009aac:	fab3 f383 	clz	r3, r3
 8009ab0:	b2db      	uxtb	r3, r3
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	069b      	lsls	r3, r3, #26
 8009ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d109      	bne.n	8009ada <HAL_ADC_ConfigChannel+0x50a>
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	0e9b      	lsrs	r3, r3, #26
 8009acc:	3301      	adds	r3, #1
 8009ace:	f003 031f 	and.w	r3, r3, #31
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad8:	e017      	b.n	8009b0a <HAL_ADC_ConfigChannel+0x53a>
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ae2:	fa93 f3a3 	rbit	r3, r3
 8009ae6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8009ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8009aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d101      	bne.n	8009af6 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8009af2:	2320      	movs	r3, #32
 8009af4:	e003      	b.n	8009afe <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8009af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009af8:	fab3 f383 	clz	r3, r3
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	3301      	adds	r3, #1
 8009b00:	f003 031f 	and.w	r3, r3, #31
 8009b04:	2101      	movs	r1, #1
 8009b06:	fa01 f303 	lsl.w	r3, r1, r3
 8009b0a:	ea42 0103 	orr.w	r1, r2, r3
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d10a      	bne.n	8009b30 <HAL_ADC_ConfigChannel+0x560>
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	0e9b      	lsrs	r3, r3, #26
 8009b20:	3301      	adds	r3, #1
 8009b22:	f003 021f 	and.w	r2, r3, #31
 8009b26:	4613      	mov	r3, r2
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	4413      	add	r3, r2
 8009b2c:	051b      	lsls	r3, r3, #20
 8009b2e:	e018      	b.n	8009b62 <HAL_ADC_ConfigChannel+0x592>
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b38:	fa93 f3a3 	rbit	r3, r3
 8009b3c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8009b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d101      	bne.n	8009b4c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8009b48:	2320      	movs	r3, #32
 8009b4a:	e003      	b.n	8009b54 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8009b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4e:	fab3 f383 	clz	r3, r3
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	3301      	adds	r3, #1
 8009b56:	f003 021f 	and.w	r2, r3, #31
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	005b      	lsls	r3, r3, #1
 8009b5e:	4413      	add	r3, r2
 8009b60:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009b62:	430b      	orrs	r3, r1
 8009b64:	e081      	b.n	8009c6a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d107      	bne.n	8009b82 <HAL_ADC_ConfigChannel+0x5b2>
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	0e9b      	lsrs	r3, r3, #26
 8009b78:	3301      	adds	r3, #1
 8009b7a:	069b      	lsls	r3, r3, #26
 8009b7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009b80:	e015      	b.n	8009bae <HAL_ADC_ConfigChannel+0x5de>
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	fa93 f3a3 	rbit	r3, r3
 8009b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8009b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b92:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8009b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8009b9a:	2320      	movs	r3, #32
 8009b9c:	e003      	b.n	8009ba6 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba0:	fab3 f383 	clz	r3, r3
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	3301      	adds	r3, #1
 8009ba8:	069b      	lsls	r3, r3, #26
 8009baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d109      	bne.n	8009bce <HAL_ADC_ConfigChannel+0x5fe>
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	0e9b      	lsrs	r3, r3, #26
 8009bc0:	3301      	adds	r3, #1
 8009bc2:	f003 031f 	and.w	r3, r3, #31
 8009bc6:	2101      	movs	r1, #1
 8009bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009bcc:	e017      	b.n	8009bfe <HAL_ADC_ConfigChannel+0x62e>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	fa93 f3a3 	rbit	r3, r3
 8009bda:	61fb      	str	r3, [r7, #28]
  return result;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8009be6:	2320      	movs	r3, #32
 8009be8:	e003      	b.n	8009bf2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	fab3 f383 	clz	r3, r3
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	f003 031f 	and.w	r3, r3, #31
 8009bf8:	2101      	movs	r1, #1
 8009bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8009bfe:	ea42 0103 	orr.w	r1, r2, r3
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d10d      	bne.n	8009c2a <HAL_ADC_ConfigChannel+0x65a>
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	0e9b      	lsrs	r3, r3, #26
 8009c14:	3301      	adds	r3, #1
 8009c16:	f003 021f 	and.w	r2, r3, #31
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	005b      	lsls	r3, r3, #1
 8009c1e:	4413      	add	r3, r2
 8009c20:	3b1e      	subs	r3, #30
 8009c22:	051b      	lsls	r3, r3, #20
 8009c24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009c28:	e01e      	b.n	8009c68 <HAL_ADC_ConfigChannel+0x698>
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	fa93 f3a3 	rbit	r3, r3
 8009c36:	613b      	str	r3, [r7, #16]
  return result;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d104      	bne.n	8009c4c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8009c42:	2320      	movs	r3, #32
 8009c44:	e006      	b.n	8009c54 <HAL_ADC_ConfigChannel+0x684>
 8009c46:	bf00      	nop
 8009c48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	fab3 f383 	clz	r3, r3
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	3301      	adds	r3, #1
 8009c56:	f003 021f 	and.w	r2, r3, #31
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	005b      	lsls	r3, r3, #1
 8009c5e:	4413      	add	r3, r2
 8009c60:	3b1e      	subs	r3, #30
 8009c62:	051b      	lsls	r3, r3, #20
 8009c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009c68:	430b      	orrs	r3, r1
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	6892      	ldr	r2, [r2, #8]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	f7ff f89c 	bl	8008dac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	4b44      	ldr	r3, [pc, #272]	; (8009d8c <HAL_ADC_ConfigChannel+0x7bc>)
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d07a      	beq.n	8009d76 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009c80:	4843      	ldr	r0, [pc, #268]	; (8009d90 <HAL_ADC_ConfigChannel+0x7c0>)
 8009c82:	f7fe fff1 	bl	8008c68 <LL_ADC_GetCommonPathInternalCh>
 8009c86:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a41      	ldr	r2, [pc, #260]	; (8009d94 <HAL_ADC_ConfigChannel+0x7c4>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d12c      	bne.n	8009cee <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d126      	bne.n	8009cee <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a3c      	ldr	r2, [pc, #240]	; (8009d98 <HAL_ADC_ConfigChannel+0x7c8>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d004      	beq.n	8009cb4 <HAL_ADC_ConfigChannel+0x6e4>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	4a3b      	ldr	r2, [pc, #236]	; (8009d9c <HAL_ADC_ConfigChannel+0x7cc>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d15d      	bne.n	8009d70 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009cb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009cb8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	4834      	ldr	r0, [pc, #208]	; (8009d90 <HAL_ADC_ConfigChannel+0x7c0>)
 8009cc0:	f7fe ffbf 	bl	8008c42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009cc4:	4b36      	ldr	r3, [pc, #216]	; (8009da0 <HAL_ADC_ConfigChannel+0x7d0>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	099b      	lsrs	r3, r3, #6
 8009cca:	4a36      	ldr	r2, [pc, #216]	; (8009da4 <HAL_ADC_ConfigChannel+0x7d4>)
 8009ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd0:	099b      	lsrs	r3, r3, #6
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	005b      	lsls	r3, r3, #1
 8009cd8:	4413      	add	r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009cde:	e002      	b.n	8009ce6 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d1f9      	bne.n	8009ce0 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009cec:	e040      	b.n	8009d70 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a2d      	ldr	r2, [pc, #180]	; (8009da8 <HAL_ADC_ConfigChannel+0x7d8>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d118      	bne.n	8009d2a <HAL_ADC_ConfigChannel+0x75a>
 8009cf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009cfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d112      	bne.n	8009d2a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a23      	ldr	r2, [pc, #140]	; (8009d98 <HAL_ADC_ConfigChannel+0x7c8>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <HAL_ADC_ConfigChannel+0x748>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a22      	ldr	r2, [pc, #136]	; (8009d9c <HAL_ADC_ConfigChannel+0x7cc>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d12d      	bne.n	8009d74 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009d18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009d1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d20:	4619      	mov	r1, r3
 8009d22:	481b      	ldr	r0, [pc, #108]	; (8009d90 <HAL_ADC_ConfigChannel+0x7c0>)
 8009d24:	f7fe ff8d 	bl	8008c42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009d28:	e024      	b.n	8009d74 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a1f      	ldr	r2, [pc, #124]	; (8009dac <HAL_ADC_ConfigChannel+0x7dc>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d120      	bne.n	8009d76 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009d34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009d38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d11a      	bne.n	8009d76 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a14      	ldr	r2, [pc, #80]	; (8009d98 <HAL_ADC_ConfigChannel+0x7c8>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d115      	bne.n	8009d76 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009d4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d52:	4619      	mov	r1, r3
 8009d54:	480e      	ldr	r0, [pc, #56]	; (8009d90 <HAL_ADC_ConfigChannel+0x7c0>)
 8009d56:	f7fe ff74 	bl	8008c42 <LL_ADC_SetCommonPathInternalCh>
 8009d5a:	e00c      	b.n	8009d76 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d60:	f043 0220 	orr.w	r2, r3, #32
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8009d68:	2301      	movs	r3, #1
 8009d6a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8009d6e:	e002      	b.n	8009d76 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009d70:	bf00      	nop
 8009d72:	e000      	b.n	8009d76 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009d74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8009d7e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	37d8      	adds	r7, #216	; 0xd8
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	80080000 	.word	0x80080000
 8009d90:	50040300 	.word	0x50040300
 8009d94:	c7520000 	.word	0xc7520000
 8009d98:	50040000 	.word	0x50040000
 8009d9c:	50040200 	.word	0x50040200
 8009da0:	20000020 	.word	0x20000020
 8009da4:	053e2d63 	.word	0x053e2d63
 8009da8:	cb840000 	.word	0xcb840000
 8009dac:	80000001 	.word	0x80000001

08009db0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff f8c3 	bl	8008f48 <LL_ADC_IsEnabled>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d14d      	bne.n	8009e64 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	689a      	ldr	r2, [r3, #8]
 8009dce:	4b28      	ldr	r3, [pc, #160]	; (8009e70 <ADC_Enable+0xc0>)
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00d      	beq.n	8009df2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dda:	f043 0210 	orr.w	r2, r3, #16
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009de6:	f043 0201 	orr.w	r2, r3, #1
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	e039      	b.n	8009e66 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7ff f892 	bl	8008f20 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009dfc:	f7fe fed4 	bl	8008ba8 <HAL_GetTick>
 8009e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009e02:	e028      	b.n	8009e56 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7ff f89d 	bl	8008f48 <LL_ADC_IsEnabled>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d104      	bne.n	8009e1e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7ff f881 	bl	8008f20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009e1e:	f7fe fec3 	bl	8008ba8 <HAL_GetTick>
 8009e22:	4602      	mov	r2, r0
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d914      	bls.n	8009e56 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d00d      	beq.n	8009e56 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e3e:	f043 0210 	orr.w	r2, r3, #16
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e4a:	f043 0201 	orr.w	r2, r3, #1
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e007      	b.n	8009e66 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d1cf      	bne.n	8009e04 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	8000003f 	.word	0x8000003f

08009e74 <LL_ADC_IsEnabled>:
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	2b01      	cmp	r3, #1
 8009e86:	d101      	bne.n	8009e8c <LL_ADC_IsEnabled+0x18>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e000      	b.n	8009e8e <LL_ADC_IsEnabled+0x1a>
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e98:	4770      	bx	lr

08009e9a <LL_ADC_REG_IsConversionOngoing>:
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	689b      	ldr	r3, [r3, #8]
 8009ea6:	f003 0304 	and.w	r3, r3, #4
 8009eaa:	2b04      	cmp	r3, #4
 8009eac:	d101      	bne.n	8009eb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009eb2:	2300      	movs	r3, #0
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009ec0:	b590      	push	{r4, r7, lr}
 8009ec2:	b09f      	sub	sp, #124	; 0x7c
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
 8009ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d101      	bne.n	8009ede <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009eda:	2302      	movs	r3, #2
 8009edc:	e093      	b.n	800a006 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8009eea:	2300      	movs	r3, #0
 8009eec:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a47      	ldr	r2, [pc, #284]	; (800a010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d102      	bne.n	8009efe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8009ef8:	4b46      	ldr	r3, [pc, #280]	; (800a014 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009efa:	60bb      	str	r3, [r7, #8]
 8009efc:	e001      	b.n	8009f02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8009efe:	2300      	movs	r3, #0
 8009f00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10b      	bne.n	8009f20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f0c:	f043 0220 	orr.w	r2, r3, #32
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e072      	b.n	800a006 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7ff ffb9 	bl	8009e9a <LL_ADC_REG_IsConversionOngoing>
 8009f28:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7ff ffb3 	bl	8009e9a <LL_ADC_REG_IsConversionOngoing>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d154      	bne.n	8009fe4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009f3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d151      	bne.n	8009fe4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009f40:	4b35      	ldr	r3, [pc, #212]	; (800a018 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8009f42:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d02c      	beq.n	8009fa6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	6859      	ldr	r1, [r3, #4]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f5e:	035b      	lsls	r3, r3, #13
 8009f60:	430b      	orrs	r3, r1
 8009f62:	431a      	orrs	r2, r3
 8009f64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009f68:	4829      	ldr	r0, [pc, #164]	; (800a010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009f6a:	f7ff ff83 	bl	8009e74 <LL_ADC_IsEnabled>
 8009f6e:	4604      	mov	r4, r0
 8009f70:	4828      	ldr	r0, [pc, #160]	; (800a014 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009f72:	f7ff ff7f 	bl	8009e74 <LL_ADC_IsEnabled>
 8009f76:	4603      	mov	r3, r0
 8009f78:	431c      	orrs	r4, r3
 8009f7a:	4828      	ldr	r0, [pc, #160]	; (800a01c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8009f7c:	f7ff ff7a 	bl	8009e74 <LL_ADC_IsEnabled>
 8009f80:	4603      	mov	r3, r0
 8009f82:	4323      	orrs	r3, r4
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d137      	bne.n	8009ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009f90:	f023 030f 	bic.w	r3, r3, #15
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	6811      	ldr	r1, [r2, #0]
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	6892      	ldr	r2, [r2, #8]
 8009f9c:	430a      	orrs	r2, r1
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009fa4:	e028      	b.n	8009ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8009fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fa8:	689b      	ldr	r3, [r3, #8]
 8009faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fb0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009fb2:	4817      	ldr	r0, [pc, #92]	; (800a010 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8009fb4:	f7ff ff5e 	bl	8009e74 <LL_ADC_IsEnabled>
 8009fb8:	4604      	mov	r4, r0
 8009fba:	4816      	ldr	r0, [pc, #88]	; (800a014 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8009fbc:	f7ff ff5a 	bl	8009e74 <LL_ADC_IsEnabled>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	431c      	orrs	r4, r3
 8009fc4:	4815      	ldr	r0, [pc, #84]	; (800a01c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8009fc6:	f7ff ff55 	bl	8009e74 <LL_ADC_IsEnabled>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	4323      	orrs	r3, r4
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d112      	bne.n	8009ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8009fda:	f023 030f 	bic.w	r3, r3, #15
 8009fde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009fe0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009fe2:	e009      	b.n	8009ff8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe8:	f043 0220 	orr.w	r2, r3, #32
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8009ff6:	e000      	b.n	8009ffa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009ff8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800a002:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800a006:	4618      	mov	r0, r3
 800a008:	377c      	adds	r7, #124	; 0x7c
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd90      	pop	{r4, r7, pc}
 800a00e:	bf00      	nop
 800a010:	50040000 	.word	0x50040000
 800a014:	50040100 	.word	0x50040100
 800a018:	50040300 	.word	0x50040300
 800a01c:	50040200 	.word	0x50040200

0800a020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f003 0307 	and.w	r3, r3, #7
 800a02e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a030:	4b0c      	ldr	r3, [pc, #48]	; (800a064 <__NVIC_SetPriorityGrouping+0x44>)
 800a032:	68db      	ldr	r3, [r3, #12]
 800a034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a03c:	4013      	ands	r3, r2
 800a03e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a048:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a04c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a052:	4a04      	ldr	r2, [pc, #16]	; (800a064 <__NVIC_SetPriorityGrouping+0x44>)
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	60d3      	str	r3, [r2, #12]
}
 800a058:	bf00      	nop
 800a05a:	3714      	adds	r7, #20
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	e000ed00 	.word	0xe000ed00

0800a068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a068:	b480      	push	{r7}
 800a06a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a06c:	4b04      	ldr	r3, [pc, #16]	; (800a080 <__NVIC_GetPriorityGrouping+0x18>)
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	0a1b      	lsrs	r3, r3, #8
 800a072:	f003 0307 	and.w	r3, r3, #7
}
 800a076:	4618      	mov	r0, r3
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	e000ed00 	.word	0xe000ed00

0800a084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	4603      	mov	r3, r0
 800a08c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a08e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a092:	2b00      	cmp	r3, #0
 800a094:	db0b      	blt.n	800a0ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a096:	79fb      	ldrb	r3, [r7, #7]
 800a098:	f003 021f 	and.w	r2, r3, #31
 800a09c:	4907      	ldr	r1, [pc, #28]	; (800a0bc <__NVIC_EnableIRQ+0x38>)
 800a09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0a2:	095b      	lsrs	r3, r3, #5
 800a0a4:	2001      	movs	r0, #1
 800a0a6:	fa00 f202 	lsl.w	r2, r0, r2
 800a0aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	e000e100 	.word	0xe000e100

0800a0c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a0ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	db12      	blt.n	800a0f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a0d2:	79fb      	ldrb	r3, [r7, #7]
 800a0d4:	f003 021f 	and.w	r2, r3, #31
 800a0d8:	490a      	ldr	r1, [pc, #40]	; (800a104 <__NVIC_DisableIRQ+0x44>)
 800a0da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0de:	095b      	lsrs	r3, r3, #5
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	fa00 f202 	lsl.w	r2, r0, r2
 800a0e6:	3320      	adds	r3, #32
 800a0e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a0ec:	f3bf 8f4f 	dsb	sy
}
 800a0f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a0f2:	f3bf 8f6f 	isb	sy
}
 800a0f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	e000e100 	.word	0xe000e100

0800a108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	4603      	mov	r3, r0
 800a110:	6039      	str	r1, [r7, #0]
 800a112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	db0a      	blt.n	800a132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	b2da      	uxtb	r2, r3
 800a120:	490c      	ldr	r1, [pc, #48]	; (800a154 <__NVIC_SetPriority+0x4c>)
 800a122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a126:	0112      	lsls	r2, r2, #4
 800a128:	b2d2      	uxtb	r2, r2
 800a12a:	440b      	add	r3, r1
 800a12c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a130:	e00a      	b.n	800a148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	b2da      	uxtb	r2, r3
 800a136:	4908      	ldr	r1, [pc, #32]	; (800a158 <__NVIC_SetPriority+0x50>)
 800a138:	79fb      	ldrb	r3, [r7, #7]
 800a13a:	f003 030f 	and.w	r3, r3, #15
 800a13e:	3b04      	subs	r3, #4
 800a140:	0112      	lsls	r2, r2, #4
 800a142:	b2d2      	uxtb	r2, r2
 800a144:	440b      	add	r3, r1
 800a146:	761a      	strb	r2, [r3, #24]
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	e000e100 	.word	0xe000e100
 800a158:	e000ed00 	.word	0xe000ed00

0800a15c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a15c:	b480      	push	{r7}
 800a15e:	b089      	sub	sp, #36	; 0x24
 800a160:	af00      	add	r7, sp, #0
 800a162:	60f8      	str	r0, [r7, #12]
 800a164:	60b9      	str	r1, [r7, #8]
 800a166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f003 0307 	and.w	r3, r3, #7
 800a16e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	f1c3 0307 	rsb	r3, r3, #7
 800a176:	2b04      	cmp	r3, #4
 800a178:	bf28      	it	cs
 800a17a:	2304      	movcs	r3, #4
 800a17c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	3304      	adds	r3, #4
 800a182:	2b06      	cmp	r3, #6
 800a184:	d902      	bls.n	800a18c <NVIC_EncodePriority+0x30>
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	3b03      	subs	r3, #3
 800a18a:	e000      	b.n	800a18e <NVIC_EncodePriority+0x32>
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a190:	f04f 32ff 	mov.w	r2, #4294967295
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	fa02 f303 	lsl.w	r3, r2, r3
 800a19a:	43da      	mvns	r2, r3
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	401a      	ands	r2, r3
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a1a4:	f04f 31ff 	mov.w	r1, #4294967295
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ae:	43d9      	mvns	r1, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a1b4:	4313      	orrs	r3, r2
         );
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3724      	adds	r7, #36	; 0x24
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800a1c8:	f3bf 8f4f 	dsb	sy
}
 800a1cc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800a1ce:	4b06      	ldr	r3, [pc, #24]	; (800a1e8 <__NVIC_SystemReset+0x24>)
 800a1d0:	68db      	ldr	r3, [r3, #12]
 800a1d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800a1d6:	4904      	ldr	r1, [pc, #16]	; (800a1e8 <__NVIC_SystemReset+0x24>)
 800a1d8:	4b04      	ldr	r3, [pc, #16]	; (800a1ec <__NVIC_SystemReset+0x28>)
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800a1de:	f3bf 8f4f 	dsb	sy
}
 800a1e2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800a1e4:	bf00      	nop
 800a1e6:	e7fd      	b.n	800a1e4 <__NVIC_SystemReset+0x20>
 800a1e8:	e000ed00 	.word	0xe000ed00
 800a1ec:	05fa0004 	.word	0x05fa0004

0800a1f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a200:	d301      	bcc.n	800a206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a202:	2301      	movs	r3, #1
 800a204:	e00f      	b.n	800a226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a206:	4a0a      	ldr	r2, [pc, #40]	; (800a230 <SysTick_Config+0x40>)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a20e:	210f      	movs	r1, #15
 800a210:	f04f 30ff 	mov.w	r0, #4294967295
 800a214:	f7ff ff78 	bl	800a108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a218:	4b05      	ldr	r3, [pc, #20]	; (800a230 <SysTick_Config+0x40>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a21e:	4b04      	ldr	r3, [pc, #16]	; (800a230 <SysTick_Config+0x40>)
 800a220:	2207      	movs	r2, #7
 800a222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a224:	2300      	movs	r3, #0
}
 800a226:	4618      	mov	r0, r3
 800a228:	3708      	adds	r7, #8
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}
 800a22e:	bf00      	nop
 800a230:	e000e010 	.word	0xe000e010

0800a234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b082      	sub	sp, #8
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f7ff feef 	bl	800a020 <__NVIC_SetPriorityGrouping>
}
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b086      	sub	sp, #24
 800a24e:	af00      	add	r7, sp, #0
 800a250:	4603      	mov	r3, r0
 800a252:	60b9      	str	r1, [r7, #8]
 800a254:	607a      	str	r2, [r7, #4]
 800a256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a258:	2300      	movs	r3, #0
 800a25a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a25c:	f7ff ff04 	bl	800a068 <__NVIC_GetPriorityGrouping>
 800a260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	68b9      	ldr	r1, [r7, #8]
 800a266:	6978      	ldr	r0, [r7, #20]
 800a268:	f7ff ff78 	bl	800a15c <NVIC_EncodePriority>
 800a26c:	4602      	mov	r2, r0
 800a26e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a272:	4611      	mov	r1, r2
 800a274:	4618      	mov	r0, r3
 800a276:	f7ff ff47 	bl	800a108 <__NVIC_SetPriority>
}
 800a27a:	bf00      	nop
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b082      	sub	sp, #8
 800a286:	af00      	add	r7, sp, #0
 800a288:	4603      	mov	r3, r0
 800a28a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a28c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a290:	4618      	mov	r0, r3
 800a292:	f7ff fef7 	bl	800a084 <__NVIC_EnableIRQ>
}
 800a296:	bf00      	nop
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a2a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7ff ff07 	bl	800a0c0 <__NVIC_DisableIRQ>
}
 800a2b2:	bf00      	nop
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800a2be:	f7ff ff81 	bl	800a1c4 <__NVIC_SystemReset>

0800a2c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b082      	sub	sp, #8
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f7ff ff90 	bl	800a1f0 <SysTick_Config>
 800a2d0:	4603      	mov	r3, r0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e054      	b.n	800a398 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	7f5b      	ldrb	r3, [r3, #29]
 800a2f2:	b2db      	uxtb	r3, r3
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d105      	bne.n	800a304 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7fd feb2 	bl	8008068 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	2202      	movs	r2, #2
 800a308:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	791b      	ldrb	r3, [r3, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10c      	bne.n	800a32c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a22      	ldr	r2, [pc, #136]	; (800a3a0 <HAL_CRC_Init+0xc4>)
 800a318:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	689a      	ldr	r2, [r3, #8]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f022 0218 	bic.w	r2, r2, #24
 800a328:	609a      	str	r2, [r3, #8]
 800a32a:	e00c      	b.n	800a346 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6899      	ldr	r1, [r3, #8]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	461a      	mov	r2, r3
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 f986 	bl	800a648 <HAL_CRCEx_Polynomial_Set>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d001      	beq.n	800a346 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	e028      	b.n	800a398 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	795b      	ldrb	r3, [r3, #5]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d105      	bne.n	800a35a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f04f 32ff 	mov.w	r2, #4294967295
 800a356:	611a      	str	r2, [r3, #16]
 800a358:	e004      	b.n	800a364 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	6912      	ldr	r2, [r2, #16]
 800a362:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	695a      	ldr	r2, [r3, #20]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	430a      	orrs	r2, r1
 800a378:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	699a      	ldr	r2, [r3, #24]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	430a      	orrs	r2, r1
 800a38e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	04c11db7 	.word	0x04c11db7

0800a3a4 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e022      	b.n	800a3fc <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	7f5b      	ldrb	r3, [r3, #29]
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d101      	bne.n	800a3c4 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	e01b      	b.n	800a3fc <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	689a      	ldr	r2, [r3, #8]
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f042 0201 	orr.w	r2, r2, #1
 800a3d8:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	791b      	ldrb	r3, [r3, #4]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f7fd fe5d 	bl	80080a8 <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b086      	sub	sp, #24
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800a410:	2300      	movs	r3, #0
 800a412:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2202      	movs	r2, #2
 800a418:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689a      	ldr	r2, [r3, #8]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f042 0201 	orr.w	r2, r2, #1
 800a428:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	2b03      	cmp	r3, #3
 800a430:	d006      	beq.n	800a440 <HAL_CRC_Calculate+0x3c>
 800a432:	2b03      	cmp	r3, #3
 800a434:	d829      	bhi.n	800a48a <HAL_CRC_Calculate+0x86>
 800a436:	2b01      	cmp	r3, #1
 800a438:	d019      	beq.n	800a46e <HAL_CRC_Calculate+0x6a>
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d01e      	beq.n	800a47c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800a43e:	e024      	b.n	800a48a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800a440:	2300      	movs	r3, #0
 800a442:	617b      	str	r3, [r7, #20]
 800a444:	e00a      	b.n	800a45c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	441a      	add	r2, r3
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	6812      	ldr	r2, [r2, #0]
 800a454:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	3301      	adds	r3, #1
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	429a      	cmp	r2, r3
 800a462:	d3f0      	bcc.n	800a446 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	613b      	str	r3, [r7, #16]
      break;
 800a46c:	e00e      	b.n	800a48c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	68b9      	ldr	r1, [r7, #8]
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f000 f81f 	bl	800a4b6 <CRC_Handle_8>
 800a478:	6138      	str	r0, [r7, #16]
      break;
 800a47a:	e007      	b.n	800a48c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	68b9      	ldr	r1, [r7, #8]
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f000 f8a6 	bl	800a5d2 <CRC_Handle_16>
 800a486:	6138      	str	r0, [r7, #16]
      break;
 800a488:	e000      	b.n	800a48c <HAL_CRC_Calculate+0x88>
      break;
 800a48a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800a492:	693b      	ldr	r3, [r7, #16]
}
 800a494:	4618      	mov	r0, r3
 800a496:	3718      	adds	r7, #24
 800a498:	46bd      	mov	sp, r7
 800a49a:	bd80      	pop	{r7, pc}

0800a49c <HAL_CRC_GetState>:
  * @brief  Return the CRC handle state.
  * @param  hcrc CRC handle
  * @retval HAL state
  */
HAL_CRC_StateTypeDef HAL_CRC_GetState(CRC_HandleTypeDef *hcrc)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Return CRC handle state */
  return hcrc->State;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	7f5b      	ldrb	r3, [r3, #29]
 800a4a8:	b2db      	uxtb	r3, r3
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b089      	sub	sp, #36	; 0x24
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	61fb      	str	r3, [r7, #28]
 800a4c6:	e023      	b.n	800a510 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	68ba      	ldr	r2, [r7, #8]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	781b      	ldrb	r3, [r3, #0]
 800a4d2:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800a4d4:	69fb      	ldr	r3, [r7, #28]
 800a4d6:	009b      	lsls	r3, r3, #2
 800a4d8:	3301      	adds	r3, #1
 800a4da:	68b9      	ldr	r1, [r7, #8]
 800a4dc:	440b      	add	r3, r1
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a4e2:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800a4e4:	69fb      	ldr	r3, [r7, #28]
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	3302      	adds	r3, #2
 800a4ea:	68b9      	ldr	r1, [r7, #8]
 800a4ec:	440b      	add	r3, r1
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800a4f2:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	009b      	lsls	r3, r3, #2
 800a4f8:	3303      	adds	r3, #3
 800a4fa:	68b9      	ldr	r1, [r7, #8]
 800a4fc:	440b      	add	r3, r1
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800a506:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800a508:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	3301      	adds	r3, #1
 800a50e:	61fb      	str	r3, [r7, #28]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	089b      	lsrs	r3, r3, #2
 800a514:	69fa      	ldr	r2, [r7, #28]
 800a516:	429a      	cmp	r2, r3
 800a518:	d3d6      	bcc.n	800a4c8 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f003 0303 	and.w	r3, r3, #3
 800a520:	2b00      	cmp	r3, #0
 800a522:	d04d      	beq.n	800a5c0 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f003 0303 	and.w	r3, r3, #3
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d107      	bne.n	800a53e <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	4413      	add	r3, r2
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	6812      	ldr	r2, [r2, #0]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f003 0303 	and.w	r3, r3, #3
 800a544:	2b02      	cmp	r3, #2
 800a546:	d116      	bne.n	800a576 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	4413      	add	r3, r2
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	021b      	lsls	r3, r3, #8
 800a554:	b21a      	sxth	r2, r3
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	3301      	adds	r3, #1
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	440b      	add	r3, r1
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	b21b      	sxth	r3, r3
 800a564:	4313      	orrs	r3, r2
 800a566:	b21b      	sxth	r3, r3
 800a568:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	8b7a      	ldrh	r2, [r7, #26]
 800a574:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f003 0303 	and.w	r3, r3, #3
 800a57c:	2b03      	cmp	r3, #3
 800a57e:	d11f      	bne.n	800a5c0 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	009b      	lsls	r3, r3, #2
 800a584:	68ba      	ldr	r2, [r7, #8]
 800a586:	4413      	add	r3, r2
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	021b      	lsls	r3, r3, #8
 800a58c:	b21a      	sxth	r2, r3
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	009b      	lsls	r3, r3, #2
 800a592:	3301      	adds	r3, #1
 800a594:	68b9      	ldr	r1, [r7, #8]
 800a596:	440b      	add	r3, r1
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	b21b      	sxth	r3, r3
 800a59c:	4313      	orrs	r3, r2
 800a59e:	b21b      	sxth	r3, r3
 800a5a0:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	8b7a      	ldrh	r2, [r7, #26]
 800a5ac:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800a5ae:	69fb      	ldr	r3, [r7, #28]
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	3302      	adds	r3, #2
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	4413      	add	r3, r2
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	6812      	ldr	r2, [r2, #0]
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	681b      	ldr	r3, [r3, #0]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3724      	adds	r7, #36	; 0x24
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b087      	sub	sp, #28
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a5de:	2300      	movs	r3, #0
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	e013      	b.n	800a60c <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	68ba      	ldr	r2, [r7, #8]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	881b      	ldrh	r3, [r3, #0]
 800a5ee:	041a      	lsls	r2, r3, #16
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	3302      	adds	r3, #2
 800a5f6:	68b9      	ldr	r1, [r7, #8]
 800a5f8:	440b      	add	r3, r1
 800a5fa:	881b      	ldrh	r3, [r3, #0]
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	430a      	orrs	r2, r1
 800a604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	3301      	adds	r3, #1
 800a60a:	617b      	str	r3, [r7, #20]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	085b      	lsrs	r3, r3, #1
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	429a      	cmp	r2, r3
 800a614:	d3e6      	bcc.n	800a5e4 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d009      	beq.n	800a634 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	4413      	add	r3, r2
 800a62e:	881a      	ldrh	r2, [r3, #0]
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	681b      	ldr	r3, [r3, #0]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	371c      	adds	r7, #28
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
	...

0800a648 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a654:	2300      	movs	r3, #0
 800a656:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a658:	231f      	movs	r3, #31
 800a65a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a65c:	bf00      	nop
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	1e5a      	subs	r2, r3, #1
 800a662:	613a      	str	r2, [r7, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d009      	beq.n	800a67c <HAL_CRCEx_Polynomial_Set+0x34>
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	f003 031f 	and.w	r3, r3, #31
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	fa22 f303 	lsr.w	r3, r2, r3
 800a674:	f003 0301 	and.w	r3, r3, #1
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0f0      	beq.n	800a65e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b18      	cmp	r3, #24
 800a680:	d846      	bhi.n	800a710 <HAL_CRCEx_Polynomial_Set+0xc8>
 800a682:	a201      	add	r2, pc, #4	; (adr r2, 800a688 <HAL_CRCEx_Polynomial_Set+0x40>)
 800a684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a688:	0800a717 	.word	0x0800a717
 800a68c:	0800a711 	.word	0x0800a711
 800a690:	0800a711 	.word	0x0800a711
 800a694:	0800a711 	.word	0x0800a711
 800a698:	0800a711 	.word	0x0800a711
 800a69c:	0800a711 	.word	0x0800a711
 800a6a0:	0800a711 	.word	0x0800a711
 800a6a4:	0800a711 	.word	0x0800a711
 800a6a8:	0800a705 	.word	0x0800a705
 800a6ac:	0800a711 	.word	0x0800a711
 800a6b0:	0800a711 	.word	0x0800a711
 800a6b4:	0800a711 	.word	0x0800a711
 800a6b8:	0800a711 	.word	0x0800a711
 800a6bc:	0800a711 	.word	0x0800a711
 800a6c0:	0800a711 	.word	0x0800a711
 800a6c4:	0800a711 	.word	0x0800a711
 800a6c8:	0800a6f9 	.word	0x0800a6f9
 800a6cc:	0800a711 	.word	0x0800a711
 800a6d0:	0800a711 	.word	0x0800a711
 800a6d4:	0800a711 	.word	0x0800a711
 800a6d8:	0800a711 	.word	0x0800a711
 800a6dc:	0800a711 	.word	0x0800a711
 800a6e0:	0800a711 	.word	0x0800a711
 800a6e4:	0800a711 	.word	0x0800a711
 800a6e8:	0800a6ed 	.word	0x0800a6ed
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	2b06      	cmp	r3, #6
 800a6f0:	d913      	bls.n	800a71a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a6f6:	e010      	b.n	800a71a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	2b07      	cmp	r3, #7
 800a6fc:	d90f      	bls.n	800a71e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a702:	e00c      	b.n	800a71e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	2b0f      	cmp	r3, #15
 800a708:	d90b      	bls.n	800a722 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a70e:	e008      	b.n	800a722 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	75fb      	strb	r3, [r7, #23]
      break;
 800a714:	e006      	b.n	800a724 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a716:	bf00      	nop
 800a718:	e004      	b.n	800a724 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a71a:	bf00      	nop
 800a71c:	e002      	b.n	800a724 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a71e:	bf00      	nop
 800a720:	e000      	b.n	800a724 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800a722:	bf00      	nop
  }
  if (status == HAL_OK)
 800a724:	7dfb      	ldrb	r3, [r7, #23]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d10d      	bne.n	800a746 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f023 0118 	bic.w	r1, r3, #24
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	430a      	orrs	r2, r1
 800a744:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a746:	7dfb      	ldrb	r3, [r7, #23]
}
 800a748:	4618      	mov	r0, r3
 800a74a:	371c      	adds	r7, #28
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr

0800a754 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	460b      	mov	r3, r1
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800a766:	7afb      	ldrb	r3, [r7, #11]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d103      	bne.n	800a774 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	687a      	ldr	r2, [r7, #4]
 800a770:	605a      	str	r2, [r3, #4]
      break;
 800a772:	e002      	b.n	800a77a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	75fb      	strb	r3, [r7, #23]
      break;
 800a778:	bf00      	nop
  }

  return status;
 800a77a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	371c      	adds	r7, #28
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d101      	bne.n	800a79c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	e003      	b.n	800a7a4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
  }
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	0c1b      	lsrs	r3, r3, #16
 800a7be:	f003 0301 	and.w	r3, r3, #1
 800a7c2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 031f 	and.w	r3, r3, #31
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	4b0c      	ldr	r3, [pc, #48]	; (800a80c <HAL_EXTI_IRQHandler+0x5c>)
 800a7da:	4413      	add	r3, r2
 800a7dc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d009      	beq.n	800a802 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	693a      	ldr	r2, [r7, #16]
 800a7f2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	4798      	blx	r3
    }
  }
}
 800a802:	bf00      	nop
 800a804:	3718      	adds	r7, #24
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}
 800a80a:	bf00      	nop
 800a80c:	40010414 	.word	0x40010414

0800a810 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800a81e:	2300      	movs	r3, #0
 800a820:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a822:	4b2f      	ldr	r3, [pc, #188]	; (800a8e0 <HAL_FLASH_Program+0xd0>)
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d101      	bne.n	800a82e <HAL_FLASH_Program+0x1e>
 800a82a:	2302      	movs	r3, #2
 800a82c:	e053      	b.n	800a8d6 <HAL_FLASH_Program+0xc6>
 800a82e:	4b2c      	ldr	r3, [pc, #176]	; (800a8e0 <HAL_FLASH_Program+0xd0>)
 800a830:	2201      	movs	r2, #1
 800a832:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a834:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a838:	f000 f888 	bl	800a94c <FLASH_WaitForLastOperation>
 800a83c:	4603      	mov	r3, r0
 800a83e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d143      	bne.n	800a8ce <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a846:	4b26      	ldr	r3, [pc, #152]	; (800a8e0 <HAL_FLASH_Program+0xd0>)
 800a848:	2200      	movs	r2, #0
 800a84a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800a84c:	4b25      	ldr	r3, [pc, #148]	; (800a8e4 <HAL_FLASH_Program+0xd4>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a854:	2b00      	cmp	r3, #0
 800a856:	d009      	beq.n	800a86c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800a858:	4b22      	ldr	r3, [pc, #136]	; (800a8e4 <HAL_FLASH_Program+0xd4>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a21      	ldr	r2, [pc, #132]	; (800a8e4 <HAL_FLASH_Program+0xd4>)
 800a85e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a862:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800a864:	4b1e      	ldr	r3, [pc, #120]	; (800a8e0 <HAL_FLASH_Program+0xd0>)
 800a866:	2202      	movs	r2, #2
 800a868:	771a      	strb	r2, [r3, #28]
 800a86a:	e002      	b.n	800a872 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a86c:	4b1c      	ldr	r3, [pc, #112]	; (800a8e0 <HAL_FLASH_Program+0xd0>)
 800a86e:	2200      	movs	r2, #0
 800a870:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d107      	bne.n	800a888 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800a878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a87c:	68b8      	ldr	r0, [r7, #8]
 800a87e:	f000 f8bb 	bl	800a9f8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800a882:	2301      	movs	r3, #1
 800a884:	613b      	str	r3, [r7, #16]
 800a886:	e010      	b.n	800a8aa <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d002      	beq.n	800a894 <HAL_FLASH_Program+0x84>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d10a      	bne.n	800a8aa <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	4619      	mov	r1, r3
 800a898:	68b8      	ldr	r0, [r7, #8]
 800a89a:	f000 f8d3 	bl	800aa44 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d102      	bne.n	800a8aa <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800a8a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a8a8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a8aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a8ae:	f000 f84d 	bl	800a94c <FLASH_WaitForLastOperation>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d006      	beq.n	800a8ca <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800a8bc:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <HAL_FLASH_Program+0xd4>)
 800a8be:	695a      	ldr	r2, [r3, #20]
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	43db      	mvns	r3, r3
 800a8c4:	4907      	ldr	r1, [pc, #28]	; (800a8e4 <HAL_FLASH_Program+0xd4>)
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a8ca:	f000 f9eb 	bl	800aca4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a8ce:	4b04      	ldr	r3, [pc, #16]	; (800a8e0 <HAL_FLASH_Program+0xd0>)
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	701a      	strb	r2, [r3, #0]

  return status;
 800a8d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	2000002c 	.word	0x2000002c
 800a8e4:	40022000 	.word	0x40022000

0800a8e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800a8f2:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <HAL_FLASH_Unlock+0x38>)
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	da0b      	bge.n	800a912 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a8fa:	4b09      	ldr	r3, [pc, #36]	; (800a920 <HAL_FLASH_Unlock+0x38>)
 800a8fc:	4a09      	ldr	r2, [pc, #36]	; (800a924 <HAL_FLASH_Unlock+0x3c>)
 800a8fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a900:	4b07      	ldr	r3, [pc, #28]	; (800a920 <HAL_FLASH_Unlock+0x38>)
 800a902:	4a09      	ldr	r2, [pc, #36]	; (800a928 <HAL_FLASH_Unlock+0x40>)
 800a904:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800a906:	4b06      	ldr	r3, [pc, #24]	; (800a920 <HAL_FLASH_Unlock+0x38>)
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	da01      	bge.n	800a912 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a90e:	2301      	movs	r3, #1
 800a910:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a912:	79fb      	ldrb	r3, [r7, #7]
}
 800a914:	4618      	mov	r0, r3
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr
 800a920:	40022000 	.word	0x40022000
 800a924:	45670123 	.word	0x45670123
 800a928:	cdef89ab 	.word	0xcdef89ab

0800a92c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a92c:	b480      	push	{r7}
 800a92e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a930:	4b05      	ldr	r3, [pc, #20]	; (800a948 <HAL_FLASH_Lock+0x1c>)
 800a932:	695b      	ldr	r3, [r3, #20]
 800a934:	4a04      	ldr	r2, [pc, #16]	; (800a948 <HAL_FLASH_Lock+0x1c>)
 800a936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a93a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	40022000 	.word	0x40022000

0800a94c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800a954:	f7fe f928 	bl	8008ba8 <HAL_GetTick>
 800a958:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800a95a:	e00d      	b.n	800a978 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a962:	d009      	beq.n	800a978 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800a964:	f7fe f920 	bl	8008ba8 <HAL_GetTick>
 800a968:	4602      	mov	r2, r0
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	1ad3      	subs	r3, r2, r3
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	429a      	cmp	r2, r3
 800a972:	d801      	bhi.n	800a978 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800a974:	2303      	movs	r3, #3
 800a976:	e037      	b.n	800a9e8 <FLASH_WaitForLastOperation+0x9c>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800a978:	4b1d      	ldr	r3, [pc, #116]	; (800a9f0 <FLASH_WaitForLastOperation+0xa4>)
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1eb      	bne.n	800a95c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800a984:	4b1a      	ldr	r3, [pc, #104]	; (800a9f0 <FLASH_WaitForLastOperation+0xa4>)
 800a986:	691a      	ldr	r2, [r3, #16]
 800a988:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800a98c:	4013      	ands	r3, r2
 800a98e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d01e      	beq.n	800a9d4 <FLASH_WaitForLastOperation+0x88>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800a996:	4b17      	ldr	r3, [pc, #92]	; (800a9f4 <FLASH_WaitForLastOperation+0xa8>)
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	4a15      	ldr	r2, [pc, #84]	; (800a9f4 <FLASH_WaitForLastOperation+0xa8>)
 800a9a0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d007      	beq.n	800a9bc <FLASH_WaitForLastOperation+0x70>
 800a9ac:	4b10      	ldr	r3, [pc, #64]	; (800a9f0 <FLASH_WaitForLastOperation+0xa4>)
 800a9ae:	699a      	ldr	r2, [r3, #24]
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a9b6:	490e      	ldr	r1, [pc, #56]	; (800a9f0 <FLASH_WaitForLastOperation+0xa4>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	618b      	str	r3, [r1, #24]
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d004      	beq.n	800a9d0 <FLASH_WaitForLastOperation+0x84>
 800a9c6:	4a0a      	ldr	r2, [pc, #40]	; (800a9f0 <FLASH_WaitForLastOperation+0xa4>)
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800a9ce:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e009      	b.n	800a9e8 <FLASH_WaitForLastOperation+0x9c>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a9d4:	4b06      	ldr	r3, [pc, #24]	; (800a9f0 <FLASH_WaitForLastOperation+0xa4>)
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	f003 0301 	and.w	r3, r3, #1
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <FLASH_WaitForLastOperation+0x9a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a9e0:	4b03      	ldr	r3, [pc, #12]	; (800a9f0 <FLASH_WaitForLastOperation+0xa4>)
 800a9e2:	2201      	movs	r2, #1
 800a9e4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	40022000 	.word	0x40022000
 800a9f4:	2000002c 	.word	0x2000002c

0800a9f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800aa04:	4b0e      	ldr	r3, [pc, #56]	; (800aa40 <FLASH_Program_DoubleWord+0x48>)
 800aa06:	695b      	ldr	r3, [r3, #20]
 800aa08:	4a0d      	ldr	r2, [pc, #52]	; (800aa40 <FLASH_Program_DoubleWord+0x48>)
 800aa0a:	f043 0301 	orr.w	r3, r3, #1
 800aa0e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800aa16:	f3bf 8f6f 	isb	sy
}
 800aa1a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800aa1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aa20:	f04f 0200 	mov.w	r2, #0
 800aa24:	f04f 0300 	mov.w	r3, #0
 800aa28:	000a      	movs	r2, r1
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	68f9      	ldr	r1, [r7, #12]
 800aa2e:	3104      	adds	r1, #4
 800aa30:	4613      	mov	r3, r2
 800aa32:	600b      	str	r3, [r1, #0]
}
 800aa34:	bf00      	nop
 800aa36:	3714      	adds	r7, #20
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	40022000 	.word	0x40022000

0800aa44 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b089      	sub	sp, #36	; 0x24
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800aa4e:	2340      	movs	r3, #64	; 0x40
 800aa50:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800aa5a:	4b14      	ldr	r3, [pc, #80]	; (800aaac <FLASH_Program_Fast+0x68>)
 800aa5c:	695b      	ldr	r3, [r3, #20]
 800aa5e:	4a13      	ldr	r2, [pc, #76]	; (800aaac <FLASH_Program_Fast+0x68>)
 800aa60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa64:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa66:	f3ef 8310 	mrs	r3, PRIMASK
 800aa6a:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa6c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800aa6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa70:	b672      	cpsid	i
}
 800aa72:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	681a      	ldr	r2, [r3, #0]
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	3304      	adds	r3, #4
 800aa80:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	3304      	adds	r3, #4
 800aa86:	617b      	str	r3, [r7, #20]
    row_index--;
 800aa88:	7ffb      	ldrb	r3, [r7, #31]
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800aa8e:	7ffb      	ldrb	r3, [r7, #31]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d1ef      	bne.n	800aa74 <FLASH_Program_Fast+0x30>
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	f383 8810 	msr	PRIMASK, r3
}
 800aa9e:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800aaa0:	bf00      	nop
 800aaa2:	3724      	adds	r7, #36	; 0x24
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaaa:	4770      	bx	lr
 800aaac:	40022000 	.word	0x40022000

0800aab0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aaba:	4b49      	ldr	r3, [pc, #292]	; (800abe0 <HAL_FLASHEx_Erase+0x130>)
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d101      	bne.n	800aac6 <HAL_FLASHEx_Erase+0x16>
 800aac2:	2302      	movs	r3, #2
 800aac4:	e087      	b.n	800abd6 <HAL_FLASHEx_Erase+0x126>
 800aac6:	4b46      	ldr	r3, [pc, #280]	; (800abe0 <HAL_FLASHEx_Erase+0x130>)
 800aac8:	2201      	movs	r2, #1
 800aaca:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aacc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aad0:	f7ff ff3c 	bl	800a94c <FLASH_WaitForLastOperation>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800aad8:	7bfb      	ldrb	r3, [r7, #15]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d177      	bne.n	800abce <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800aade:	4b40      	ldr	r3, [pc, #256]	; (800abe0 <HAL_FLASHEx_Erase+0x130>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800aae4:	4b3f      	ldr	r3, [pc, #252]	; (800abe4 <HAL_FLASHEx_Erase+0x134>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d013      	beq.n	800ab18 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800aaf0:	4b3c      	ldr	r3, [pc, #240]	; (800abe4 <HAL_FLASHEx_Erase+0x134>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d009      	beq.n	800ab10 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800aafc:	4b39      	ldr	r3, [pc, #228]	; (800abe4 <HAL_FLASHEx_Erase+0x134>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a38      	ldr	r2, [pc, #224]	; (800abe4 <HAL_FLASHEx_Erase+0x134>)
 800ab02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab06:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800ab08:	4b35      	ldr	r3, [pc, #212]	; (800abe0 <HAL_FLASHEx_Erase+0x130>)
 800ab0a:	2203      	movs	r2, #3
 800ab0c:	771a      	strb	r2, [r3, #28]
 800ab0e:	e016      	b.n	800ab3e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800ab10:	4b33      	ldr	r3, [pc, #204]	; (800abe0 <HAL_FLASHEx_Erase+0x130>)
 800ab12:	2201      	movs	r2, #1
 800ab14:	771a      	strb	r2, [r3, #28]
 800ab16:	e012      	b.n	800ab3e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800ab18:	4b32      	ldr	r3, [pc, #200]	; (800abe4 <HAL_FLASHEx_Erase+0x134>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d009      	beq.n	800ab38 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800ab24:	4b2f      	ldr	r3, [pc, #188]	; (800abe4 <HAL_FLASHEx_Erase+0x134>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a2e      	ldr	r2, [pc, #184]	; (800abe4 <HAL_FLASHEx_Erase+0x134>)
 800ab2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab2e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800ab30:	4b2b      	ldr	r3, [pc, #172]	; (800abe0 <HAL_FLASHEx_Erase+0x130>)
 800ab32:	2202      	movs	r2, #2
 800ab34:	771a      	strb	r2, [r3, #28]
 800ab36:	e002      	b.n	800ab3e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800ab38:	4b29      	ldr	r3, [pc, #164]	; (800abe0 <HAL_FLASHEx_Erase+0x130>)
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d113      	bne.n	800ab6e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f000 f84c 	bl	800abe8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ab50:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab54:	f7ff fefa 	bl	800a94c <FLASH_WaitForLastOperation>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800ab5c:	4b21      	ldr	r3, [pc, #132]	; (800abe4 <HAL_FLASHEx_Erase+0x134>)
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	4a20      	ldr	r2, [pc, #128]	; (800abe4 <HAL_FLASHEx_Erase+0x134>)
 800ab62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab66:	f023 0304 	bic.w	r3, r3, #4
 800ab6a:	6153      	str	r3, [r2, #20]
 800ab6c:	e02d      	b.n	800abca <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	f04f 32ff 	mov.w	r2, #4294967295
 800ab74:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	60bb      	str	r3, [r7, #8]
 800ab7c:	e01d      	b.n	800abba <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	685b      	ldr	r3, [r3, #4]
 800ab82:	4619      	mov	r1, r3
 800ab84:	68b8      	ldr	r0, [r7, #8]
 800ab86:	f000 f857 	bl	800ac38 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ab8a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab8e:	f7ff fedd 	bl	800a94c <FLASH_WaitForLastOperation>
 800ab92:	4603      	mov	r3, r0
 800ab94:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800ab96:	4b13      	ldr	r3, [pc, #76]	; (800abe4 <HAL_FLASHEx_Erase+0x134>)
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	4a12      	ldr	r2, [pc, #72]	; (800abe4 <HAL_FLASHEx_Erase+0x134>)
 800ab9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aba0:	f023 0302 	bic.w	r3, r3, #2
 800aba4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d003      	beq.n	800abb4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	68ba      	ldr	r2, [r7, #8]
 800abb0:	601a      	str	r2, [r3, #0]
          break;
 800abb2:	e00a      	b.n	800abca <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	3301      	adds	r3, #1
 800abb8:	60bb      	str	r3, [r7, #8]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	689a      	ldr	r2, [r3, #8]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	4413      	add	r3, r2
 800abc4:	68ba      	ldr	r2, [r7, #8]
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d3d9      	bcc.n	800ab7e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800abca:	f000 f86b 	bl	800aca4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800abce:	4b04      	ldr	r3, [pc, #16]	; (800abe0 <HAL_FLASHEx_Erase+0x130>)
 800abd0:	2200      	movs	r2, #0
 800abd2:	701a      	strb	r2, [r3, #0]

  return status;
 800abd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	2000002c 	.word	0x2000002c
 800abe4:	40022000 	.word	0x40022000

0800abe8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d005      	beq.n	800ac06 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800abfa:	4b0e      	ldr	r3, [pc, #56]	; (800ac34 <FLASH_MassErase+0x4c>)
 800abfc:	695b      	ldr	r3, [r3, #20]
 800abfe:	4a0d      	ldr	r2, [pc, #52]	; (800ac34 <FLASH_MassErase+0x4c>)
 800ac00:	f043 0304 	orr.w	r3, r3, #4
 800ac04:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f003 0302 	and.w	r3, r3, #2
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d005      	beq.n	800ac1c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 800ac10:	4b08      	ldr	r3, [pc, #32]	; (800ac34 <FLASH_MassErase+0x4c>)
 800ac12:	695b      	ldr	r3, [r3, #20]
 800ac14:	4a07      	ldr	r2, [pc, #28]	; (800ac34 <FLASH_MassErase+0x4c>)
 800ac16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac1a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800ac1c:	4b05      	ldr	r3, [pc, #20]	; (800ac34 <FLASH_MassErase+0x4c>)
 800ac1e:	695b      	ldr	r3, [r3, #20]
 800ac20:	4a04      	ldr	r2, [pc, #16]	; (800ac34 <FLASH_MassErase+0x4c>)
 800ac22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac26:	6153      	str	r3, [r2, #20]
}
 800ac28:	bf00      	nop
 800ac2a:	370c      	adds	r7, #12
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	40022000 	.word	0x40022000

0800ac38 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d006      	beq.n	800ac5a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800ac4c:	4b14      	ldr	r3, [pc, #80]	; (800aca0 <FLASH_PageErase+0x68>)
 800ac4e:	695b      	ldr	r3, [r3, #20]
 800ac50:	4a13      	ldr	r2, [pc, #76]	; (800aca0 <FLASH_PageErase+0x68>)
 800ac52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac56:	6153      	str	r3, [r2, #20]
 800ac58:	e005      	b.n	800ac66 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800ac5a:	4b11      	ldr	r3, [pc, #68]	; (800aca0 <FLASH_PageErase+0x68>)
 800ac5c:	695b      	ldr	r3, [r3, #20]
 800ac5e:	4a10      	ldr	r2, [pc, #64]	; (800aca0 <FLASH_PageErase+0x68>)
 800ac60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ac64:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800ac66:	4b0e      	ldr	r3, [pc, #56]	; (800aca0 <FLASH_PageErase+0x68>)
 800ac68:	695b      	ldr	r3, [r3, #20]
 800ac6a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	00db      	lsls	r3, r3, #3
 800ac72:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800ac76:	490a      	ldr	r1, [pc, #40]	; (800aca0 <FLASH_PageErase+0x68>)
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800ac7c:	4b08      	ldr	r3, [pc, #32]	; (800aca0 <FLASH_PageErase+0x68>)
 800ac7e:	695b      	ldr	r3, [r3, #20]
 800ac80:	4a07      	ldr	r2, [pc, #28]	; (800aca0 <FLASH_PageErase+0x68>)
 800ac82:	f043 0302 	orr.w	r3, r3, #2
 800ac86:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800ac88:	4b05      	ldr	r3, [pc, #20]	; (800aca0 <FLASH_PageErase+0x68>)
 800ac8a:	695b      	ldr	r3, [r3, #20]
 800ac8c:	4a04      	ldr	r2, [pc, #16]	; (800aca0 <FLASH_PageErase+0x68>)
 800ac8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac92:	6153      	str	r3, [r2, #20]
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	40022000 	.word	0x40022000

0800aca4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800acaa:	4b21      	ldr	r3, [pc, #132]	; (800ad30 <FLASH_FlushCaches+0x8c>)
 800acac:	7f1b      	ldrb	r3, [r3, #28]
 800acae:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800acb0:	79fb      	ldrb	r3, [r7, #7]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d002      	beq.n	800acbc <FLASH_FlushCaches+0x18>
 800acb6:	79fb      	ldrb	r3, [r7, #7]
 800acb8:	2b03      	cmp	r3, #3
 800acba:	d117      	bne.n	800acec <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800acbc:	4b1d      	ldr	r3, [pc, #116]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a1c      	ldr	r2, [pc, #112]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800acc2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800acc6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800acc8:	4b1a      	ldr	r3, [pc, #104]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a19      	ldr	r2, [pc, #100]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800acce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800acd2:	6013      	str	r3, [r2, #0]
 800acd4:	4b17      	ldr	r3, [pc, #92]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4a16      	ldr	r2, [pc, #88]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800acda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800acde:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ace0:	4b14      	ldr	r3, [pc, #80]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a13      	ldr	r2, [pc, #76]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800ace6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acea:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800acec:	79fb      	ldrb	r3, [r7, #7]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d002      	beq.n	800acf8 <FLASH_FlushCaches+0x54>
 800acf2:	79fb      	ldrb	r3, [r7, #7]
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	d111      	bne.n	800ad1c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800acf8:	4b0e      	ldr	r3, [pc, #56]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a0d      	ldr	r2, [pc, #52]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800acfe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ad02:	6013      	str	r3, [r2, #0]
 800ad04:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a0a      	ldr	r2, [pc, #40]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800ad0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad0e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800ad10:	4b08      	ldr	r3, [pc, #32]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a07      	ldr	r2, [pc, #28]	; (800ad34 <FLASH_FlushCaches+0x90>)
 800ad16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ad1a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800ad1c:	4b04      	ldr	r3, [pc, #16]	; (800ad30 <FLASH_FlushCaches+0x8c>)
 800ad1e:	2200      	movs	r2, #0
 800ad20:	771a      	strb	r2, [r3, #28]
}
 800ad22:	bf00      	nop
 800ad24:	370c      	adds	r7, #12
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	2000002c 	.word	0x2000002c
 800ad34:	40022000 	.word	0x40022000

0800ad38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b087      	sub	sp, #28
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ad42:	2300      	movs	r3, #0
 800ad44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ad46:	e17f      	b.n	800b048 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681a      	ldr	r2, [r3, #0]
 800ad4c:	2101      	movs	r1, #1
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	fa01 f303 	lsl.w	r3, r1, r3
 800ad54:	4013      	ands	r3, r2
 800ad56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f000 8171 	beq.w	800b042 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	f003 0303 	and.w	r3, r3, #3
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d005      	beq.n	800ad78 <HAL_GPIO_Init+0x40>
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f003 0303 	and.w	r3, r3, #3
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d130      	bne.n	800adda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	005b      	lsls	r3, r3, #1
 800ad82:	2203      	movs	r2, #3
 800ad84:	fa02 f303 	lsl.w	r3, r2, r3
 800ad88:	43db      	mvns	r3, r3
 800ad8a:	693a      	ldr	r2, [r7, #16]
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	68da      	ldr	r2, [r3, #12]
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	005b      	lsls	r3, r3, #1
 800ad98:	fa02 f303 	lsl.w	r3, r2, r3
 800ad9c:	693a      	ldr	r2, [r7, #16]
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	693a      	ldr	r2, [r7, #16]
 800ada6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800adae:	2201      	movs	r2, #1
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	fa02 f303 	lsl.w	r3, r2, r3
 800adb6:	43db      	mvns	r3, r3
 800adb8:	693a      	ldr	r2, [r7, #16]
 800adba:	4013      	ands	r3, r2
 800adbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	091b      	lsrs	r3, r3, #4
 800adc4:	f003 0201 	and.w	r2, r3, #1
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	fa02 f303 	lsl.w	r3, r2, r3
 800adce:	693a      	ldr	r2, [r7, #16]
 800add0:	4313      	orrs	r3, r2
 800add2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	f003 0303 	and.w	r3, r3, #3
 800ade2:	2b03      	cmp	r3, #3
 800ade4:	d118      	bne.n	800ae18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800adec:	2201      	movs	r2, #1
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	fa02 f303 	lsl.w	r3, r2, r3
 800adf4:	43db      	mvns	r3, r3
 800adf6:	693a      	ldr	r2, [r7, #16]
 800adf8:	4013      	ands	r3, r2
 800adfa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	08db      	lsrs	r3, r3, #3
 800ae02:	f003 0201 	and.w	r2, r3, #1
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0c:	693a      	ldr	r2, [r7, #16]
 800ae0e:	4313      	orrs	r3, r2
 800ae10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	f003 0303 	and.w	r3, r3, #3
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d017      	beq.n	800ae54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	005b      	lsls	r3, r3, #1
 800ae2e:	2203      	movs	r2, #3
 800ae30:	fa02 f303 	lsl.w	r3, r2, r3
 800ae34:	43db      	mvns	r3, r3
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	4013      	ands	r3, r2
 800ae3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	689a      	ldr	r2, [r3, #8]
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	005b      	lsls	r3, r3, #1
 800ae44:	fa02 f303 	lsl.w	r3, r2, r3
 800ae48:	693a      	ldr	r2, [r7, #16]
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	f003 0303 	and.w	r3, r3, #3
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d123      	bne.n	800aea8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	08da      	lsrs	r2, r3, #3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	3208      	adds	r2, #8
 800ae68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f003 0307 	and.w	r3, r3, #7
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	220f      	movs	r2, #15
 800ae78:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7c:	43db      	mvns	r3, r3
 800ae7e:	693a      	ldr	r2, [r7, #16]
 800ae80:	4013      	ands	r3, r2
 800ae82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	691a      	ldr	r2, [r3, #16]
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	f003 0307 	and.w	r3, r3, #7
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	fa02 f303 	lsl.w	r3, r2, r3
 800ae94:	693a      	ldr	r2, [r7, #16]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	08da      	lsrs	r2, r3, #3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	3208      	adds	r2, #8
 800aea2:	6939      	ldr	r1, [r7, #16]
 800aea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	005b      	lsls	r3, r3, #1
 800aeb2:	2203      	movs	r2, #3
 800aeb4:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb8:	43db      	mvns	r3, r3
 800aeba:	693a      	ldr	r2, [r7, #16]
 800aebc:	4013      	ands	r3, r2
 800aebe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f003 0203 	and.w	r2, r3, #3
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	fa02 f303 	lsl.w	r3, r2, r3
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	693a      	ldr	r2, [r7, #16]
 800aeda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f000 80ac 	beq.w	800b042 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aeea:	4b5f      	ldr	r3, [pc, #380]	; (800b068 <HAL_GPIO_Init+0x330>)
 800aeec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aeee:	4a5e      	ldr	r2, [pc, #376]	; (800b068 <HAL_GPIO_Init+0x330>)
 800aef0:	f043 0301 	orr.w	r3, r3, #1
 800aef4:	6613      	str	r3, [r2, #96]	; 0x60
 800aef6:	4b5c      	ldr	r3, [pc, #368]	; (800b068 <HAL_GPIO_Init+0x330>)
 800aef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	60bb      	str	r3, [r7, #8]
 800af00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800af02:	4a5a      	ldr	r2, [pc, #360]	; (800b06c <HAL_GPIO_Init+0x334>)
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	089b      	lsrs	r3, r3, #2
 800af08:	3302      	adds	r3, #2
 800af0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f003 0303 	and.w	r3, r3, #3
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	220f      	movs	r2, #15
 800af1a:	fa02 f303 	lsl.w	r3, r2, r3
 800af1e:	43db      	mvns	r3, r3
 800af20:	693a      	ldr	r2, [r7, #16]
 800af22:	4013      	ands	r3, r2
 800af24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800af2c:	d025      	beq.n	800af7a <HAL_GPIO_Init+0x242>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a4f      	ldr	r2, [pc, #316]	; (800b070 <HAL_GPIO_Init+0x338>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d01f      	beq.n	800af76 <HAL_GPIO_Init+0x23e>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4a4e      	ldr	r2, [pc, #312]	; (800b074 <HAL_GPIO_Init+0x33c>)
 800af3a:	4293      	cmp	r3, r2
 800af3c:	d019      	beq.n	800af72 <HAL_GPIO_Init+0x23a>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a4d      	ldr	r2, [pc, #308]	; (800b078 <HAL_GPIO_Init+0x340>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d013      	beq.n	800af6e <HAL_GPIO_Init+0x236>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	4a4c      	ldr	r2, [pc, #304]	; (800b07c <HAL_GPIO_Init+0x344>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d00d      	beq.n	800af6a <HAL_GPIO_Init+0x232>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a4b      	ldr	r2, [pc, #300]	; (800b080 <HAL_GPIO_Init+0x348>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d007      	beq.n	800af66 <HAL_GPIO_Init+0x22e>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a4a      	ldr	r2, [pc, #296]	; (800b084 <HAL_GPIO_Init+0x34c>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d101      	bne.n	800af62 <HAL_GPIO_Init+0x22a>
 800af5e:	2306      	movs	r3, #6
 800af60:	e00c      	b.n	800af7c <HAL_GPIO_Init+0x244>
 800af62:	2307      	movs	r3, #7
 800af64:	e00a      	b.n	800af7c <HAL_GPIO_Init+0x244>
 800af66:	2305      	movs	r3, #5
 800af68:	e008      	b.n	800af7c <HAL_GPIO_Init+0x244>
 800af6a:	2304      	movs	r3, #4
 800af6c:	e006      	b.n	800af7c <HAL_GPIO_Init+0x244>
 800af6e:	2303      	movs	r3, #3
 800af70:	e004      	b.n	800af7c <HAL_GPIO_Init+0x244>
 800af72:	2302      	movs	r3, #2
 800af74:	e002      	b.n	800af7c <HAL_GPIO_Init+0x244>
 800af76:	2301      	movs	r3, #1
 800af78:	e000      	b.n	800af7c <HAL_GPIO_Init+0x244>
 800af7a:	2300      	movs	r3, #0
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	f002 0203 	and.w	r2, r2, #3
 800af82:	0092      	lsls	r2, r2, #2
 800af84:	4093      	lsls	r3, r2
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	4313      	orrs	r3, r2
 800af8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800af8c:	4937      	ldr	r1, [pc, #220]	; (800b06c <HAL_GPIO_Init+0x334>)
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	089b      	lsrs	r3, r3, #2
 800af92:	3302      	adds	r3, #2
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800af9a:	4b3b      	ldr	r3, [pc, #236]	; (800b088 <HAL_GPIO_Init+0x350>)
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	43db      	mvns	r3, r3
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	4013      	ands	r3, r2
 800afa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	685b      	ldr	r3, [r3, #4]
 800afae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d003      	beq.n	800afbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	4313      	orrs	r3, r2
 800afbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800afbe:	4a32      	ldr	r2, [pc, #200]	; (800b088 <HAL_GPIO_Init+0x350>)
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800afc4:	4b30      	ldr	r3, [pc, #192]	; (800b088 <HAL_GPIO_Init+0x350>)
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	43db      	mvns	r3, r3
 800afce:	693a      	ldr	r2, [r7, #16]
 800afd0:	4013      	ands	r3, r2
 800afd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d003      	beq.n	800afe8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800afe8:	4a27      	ldr	r2, [pc, #156]	; (800b088 <HAL_GPIO_Init+0x350>)
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800afee:	4b26      	ldr	r3, [pc, #152]	; (800b088 <HAL_GPIO_Init+0x350>)
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	43db      	mvns	r3, r3
 800aff8:	693a      	ldr	r2, [r7, #16]
 800affa:	4013      	ands	r3, r2
 800affc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d003      	beq.n	800b012 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800b00a:	693a      	ldr	r2, [r7, #16]
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	4313      	orrs	r3, r2
 800b010:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b012:	4a1d      	ldr	r2, [pc, #116]	; (800b088 <HAL_GPIO_Init+0x350>)
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800b018:	4b1b      	ldr	r3, [pc, #108]	; (800b088 <HAL_GPIO_Init+0x350>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	43db      	mvns	r3, r3
 800b022:	693a      	ldr	r2, [r7, #16]
 800b024:	4013      	ands	r3, r2
 800b026:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b030:	2b00      	cmp	r3, #0
 800b032:	d003      	beq.n	800b03c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	4313      	orrs	r3, r2
 800b03a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b03c:	4a12      	ldr	r2, [pc, #72]	; (800b088 <HAL_GPIO_Init+0x350>)
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	3301      	adds	r3, #1
 800b046:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	fa22 f303 	lsr.w	r3, r2, r3
 800b052:	2b00      	cmp	r3, #0
 800b054:	f47f ae78 	bne.w	800ad48 <HAL_GPIO_Init+0x10>
  }
}
 800b058:	bf00      	nop
 800b05a:	bf00      	nop
 800b05c:	371c      	adds	r7, #28
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	40021000 	.word	0x40021000
 800b06c:	40010000 	.word	0x40010000
 800b070:	48000400 	.word	0x48000400
 800b074:	48000800 	.word	0x48000800
 800b078:	48000c00 	.word	0x48000c00
 800b07c:	48001000 	.word	0x48001000
 800b080:	48001400 	.word	0x48001400
 800b084:	48001800 	.word	0x48001800
 800b088:	40010400 	.word	0x40010400

0800b08c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b087      	sub	sp, #28
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b096:	2300      	movs	r3, #0
 800b098:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800b09a:	e0cd      	b.n	800b238 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800b09c:	2201      	movs	r2, #1
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a4:	683a      	ldr	r2, [r7, #0]
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 80c0 	beq.w	800b232 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800b0b2:	4a68      	ldr	r2, [pc, #416]	; (800b254 <HAL_GPIO_DeInit+0x1c8>)
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	089b      	lsrs	r3, r3, #2
 800b0b8:	3302      	adds	r3, #2
 800b0ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0be:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	f003 0303 	and.w	r3, r3, #3
 800b0c6:	009b      	lsls	r3, r3, #2
 800b0c8:	220f      	movs	r2, #15
 800b0ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	4013      	ands	r3, r2
 800b0d2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b0da:	d025      	beq.n	800b128 <HAL_GPIO_DeInit+0x9c>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a5e      	ldr	r2, [pc, #376]	; (800b258 <HAL_GPIO_DeInit+0x1cc>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d01f      	beq.n	800b124 <HAL_GPIO_DeInit+0x98>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a5d      	ldr	r2, [pc, #372]	; (800b25c <HAL_GPIO_DeInit+0x1d0>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d019      	beq.n	800b120 <HAL_GPIO_DeInit+0x94>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	4a5c      	ldr	r2, [pc, #368]	; (800b260 <HAL_GPIO_DeInit+0x1d4>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d013      	beq.n	800b11c <HAL_GPIO_DeInit+0x90>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	4a5b      	ldr	r2, [pc, #364]	; (800b264 <HAL_GPIO_DeInit+0x1d8>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d00d      	beq.n	800b118 <HAL_GPIO_DeInit+0x8c>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	4a5a      	ldr	r2, [pc, #360]	; (800b268 <HAL_GPIO_DeInit+0x1dc>)
 800b100:	4293      	cmp	r3, r2
 800b102:	d007      	beq.n	800b114 <HAL_GPIO_DeInit+0x88>
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	4a59      	ldr	r2, [pc, #356]	; (800b26c <HAL_GPIO_DeInit+0x1e0>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d101      	bne.n	800b110 <HAL_GPIO_DeInit+0x84>
 800b10c:	2306      	movs	r3, #6
 800b10e:	e00c      	b.n	800b12a <HAL_GPIO_DeInit+0x9e>
 800b110:	2307      	movs	r3, #7
 800b112:	e00a      	b.n	800b12a <HAL_GPIO_DeInit+0x9e>
 800b114:	2305      	movs	r3, #5
 800b116:	e008      	b.n	800b12a <HAL_GPIO_DeInit+0x9e>
 800b118:	2304      	movs	r3, #4
 800b11a:	e006      	b.n	800b12a <HAL_GPIO_DeInit+0x9e>
 800b11c:	2303      	movs	r3, #3
 800b11e:	e004      	b.n	800b12a <HAL_GPIO_DeInit+0x9e>
 800b120:	2302      	movs	r3, #2
 800b122:	e002      	b.n	800b12a <HAL_GPIO_DeInit+0x9e>
 800b124:	2301      	movs	r3, #1
 800b126:	e000      	b.n	800b12a <HAL_GPIO_DeInit+0x9e>
 800b128:	2300      	movs	r3, #0
 800b12a:	697a      	ldr	r2, [r7, #20]
 800b12c:	f002 0203 	and.w	r2, r2, #3
 800b130:	0092      	lsls	r2, r2, #2
 800b132:	4093      	lsls	r3, r2
 800b134:	68fa      	ldr	r2, [r7, #12]
 800b136:	429a      	cmp	r2, r3
 800b138:	d132      	bne.n	800b1a0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800b13a:	4b4d      	ldr	r3, [pc, #308]	; (800b270 <HAL_GPIO_DeInit+0x1e4>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	43db      	mvns	r3, r3
 800b142:	494b      	ldr	r1, [pc, #300]	; (800b270 <HAL_GPIO_DeInit+0x1e4>)
 800b144:	4013      	ands	r3, r2
 800b146:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800b148:	4b49      	ldr	r3, [pc, #292]	; (800b270 <HAL_GPIO_DeInit+0x1e4>)
 800b14a:	685a      	ldr	r2, [r3, #4]
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	43db      	mvns	r3, r3
 800b150:	4947      	ldr	r1, [pc, #284]	; (800b270 <HAL_GPIO_DeInit+0x1e4>)
 800b152:	4013      	ands	r3, r2
 800b154:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800b156:	4b46      	ldr	r3, [pc, #280]	; (800b270 <HAL_GPIO_DeInit+0x1e4>)
 800b158:	68da      	ldr	r2, [r3, #12]
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	43db      	mvns	r3, r3
 800b15e:	4944      	ldr	r1, [pc, #272]	; (800b270 <HAL_GPIO_DeInit+0x1e4>)
 800b160:	4013      	ands	r3, r2
 800b162:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800b164:	4b42      	ldr	r3, [pc, #264]	; (800b270 <HAL_GPIO_DeInit+0x1e4>)
 800b166:	689a      	ldr	r2, [r3, #8]
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	43db      	mvns	r3, r3
 800b16c:	4940      	ldr	r1, [pc, #256]	; (800b270 <HAL_GPIO_DeInit+0x1e4>)
 800b16e:	4013      	ands	r3, r2
 800b170:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	f003 0303 	and.w	r3, r3, #3
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	220f      	movs	r2, #15
 800b17c:	fa02 f303 	lsl.w	r3, r2, r3
 800b180:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800b182:	4a34      	ldr	r2, [pc, #208]	; (800b254 <HAL_GPIO_DeInit+0x1c8>)
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	089b      	lsrs	r3, r3, #2
 800b188:	3302      	adds	r3, #2
 800b18a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	43da      	mvns	r2, r3
 800b192:	4830      	ldr	r0, [pc, #192]	; (800b254 <HAL_GPIO_DeInit+0x1c8>)
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	089b      	lsrs	r3, r3, #2
 800b198:	400a      	ands	r2, r1
 800b19a:	3302      	adds	r3, #2
 800b19c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	005b      	lsls	r3, r3, #1
 800b1a8:	2103      	movs	r1, #3
 800b1aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	08da      	lsrs	r2, r3, #3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	3208      	adds	r2, #8
 800b1bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	f003 0307 	and.w	r3, r3, #7
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	220f      	movs	r2, #15
 800b1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ce:	43db      	mvns	r3, r3
 800b1d0:	697a      	ldr	r2, [r7, #20]
 800b1d2:	08d2      	lsrs	r2, r2, #3
 800b1d4:	4019      	ands	r1, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	3208      	adds	r2, #8
 800b1da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	689a      	ldr	r2, [r3, #8]
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	005b      	lsls	r3, r3, #1
 800b1e6:	2103      	movs	r1, #3
 800b1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ec:	43db      	mvns	r3, r3
 800b1ee:	401a      	ands	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	2101      	movs	r1, #1
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b200:	43db      	mvns	r3, r3
 800b202:	401a      	ands	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	68da      	ldr	r2, [r3, #12]
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	005b      	lsls	r3, r3, #1
 800b210:	2103      	movs	r1, #3
 800b212:	fa01 f303 	lsl.w	r3, r1, r3
 800b216:	43db      	mvns	r3, r3
 800b218:	401a      	ands	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b222:	2101      	movs	r1, #1
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	fa01 f303 	lsl.w	r3, r1, r3
 800b22a:	43db      	mvns	r3, r3
 800b22c:	401a      	ands	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	3301      	adds	r3, #1
 800b236:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800b238:	683a      	ldr	r2, [r7, #0]
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	fa22 f303 	lsr.w	r3, r2, r3
 800b240:	2b00      	cmp	r3, #0
 800b242:	f47f af2b 	bne.w	800b09c <HAL_GPIO_DeInit+0x10>
  }
}
 800b246:	bf00      	nop
 800b248:	bf00      	nop
 800b24a:	371c      	adds	r7, #28
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr
 800b254:	40010000 	.word	0x40010000
 800b258:	48000400 	.word	0x48000400
 800b25c:	48000800 	.word	0x48000800
 800b260:	48000c00 	.word	0x48000c00
 800b264:	48001000 	.word	0x48001000
 800b268:	48001400 	.word	0x48001400
 800b26c:	48001800 	.word	0x48001800
 800b270:	40010400 	.word	0x40010400

0800b274 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	460b      	mov	r3, r1
 800b27e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	691a      	ldr	r2, [r3, #16]
 800b284:	887b      	ldrh	r3, [r7, #2]
 800b286:	4013      	ands	r3, r2
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b28c:	2301      	movs	r3, #1
 800b28e:	73fb      	strb	r3, [r7, #15]
 800b290:	e001      	b.n	800b296 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b292:	2300      	movs	r3, #0
 800b294:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b296:	7bfb      	ldrb	r3, [r7, #15]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	460b      	mov	r3, r1
 800b2ae:	807b      	strh	r3, [r7, #2]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b2b4:	787b      	ldrb	r3, [r7, #1]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b2ba:	887a      	ldrh	r2, [r7, #2]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b2c0:	e002      	b.n	800b2c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b2c2:	887a      	ldrh	r2, [r7, #2]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b2c8:	bf00      	nop
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b2e6:	887a      	ldrh	r2, [r7, #2]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	4013      	ands	r3, r2
 800b2ec:	041a      	lsls	r2, r3, #16
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	43d9      	mvns	r1, r3
 800b2f2:	887b      	ldrh	r3, [r7, #2]
 800b2f4:	400b      	ands	r3, r1
 800b2f6:	431a      	orrs	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	619a      	str	r2, [r3, #24]
}
 800b2fc:	bf00      	nop
 800b2fe:	3714      	adds	r7, #20
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr

0800b308 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b308:	b480      	push	{r7}
 800b30a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b30c:	4b04      	ldr	r3, [pc, #16]	; (800b320 <HAL_PWREx_GetVoltageRange+0x18>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800b314:	4618      	mov	r0, r3
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	40007000 	.word	0x40007000

0800b324 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b324:	b480      	push	{r7}
 800b326:	b085      	sub	sp, #20
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b332:	d130      	bne.n	800b396 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b334:	4b23      	ldr	r3, [pc, #140]	; (800b3c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b33c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b340:	d038      	beq.n	800b3b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b342:	4b20      	ldr	r3, [pc, #128]	; (800b3c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b34a:	4a1e      	ldr	r2, [pc, #120]	; (800b3c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b34c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b350:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b352:	4b1d      	ldr	r3, [pc, #116]	; (800b3c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	2232      	movs	r2, #50	; 0x32
 800b358:	fb02 f303 	mul.w	r3, r2, r3
 800b35c:	4a1b      	ldr	r2, [pc, #108]	; (800b3cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b35e:	fba2 2303 	umull	r2, r3, r2, r3
 800b362:	0c9b      	lsrs	r3, r3, #18
 800b364:	3301      	adds	r3, #1
 800b366:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b368:	e002      	b.n	800b370 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b370:	4b14      	ldr	r3, [pc, #80]	; (800b3c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b37c:	d102      	bne.n	800b384 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d1f2      	bne.n	800b36a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b384:	4b0f      	ldr	r3, [pc, #60]	; (800b3c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b38c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b390:	d110      	bne.n	800b3b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b392:	2303      	movs	r3, #3
 800b394:	e00f      	b.n	800b3b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b396:	4b0b      	ldr	r3, [pc, #44]	; (800b3c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b39e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b3a2:	d007      	beq.n	800b3b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b3a4:	4b07      	ldr	r3, [pc, #28]	; (800b3c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b3ac:	4a05      	ldr	r2, [pc, #20]	; (800b3c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b3ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b3b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	40007000 	.word	0x40007000
 800b3c8:	20000020 	.word	0x20000020
 800b3cc:	431bde83 	.word	0x431bde83

0800b3d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e3d8      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3e2:	4b97      	ldr	r3, [pc, #604]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	f003 030c 	and.w	r3, r3, #12
 800b3ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b3ec:	4b94      	ldr	r3, [pc, #592]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	f003 0303 	and.w	r3, r3, #3
 800b3f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 0310 	and.w	r3, r3, #16
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 80e4 	beq.w	800b5cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d007      	beq.n	800b41a <HAL_RCC_OscConfig+0x4a>
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	2b0c      	cmp	r3, #12
 800b40e:	f040 808b 	bne.w	800b528 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	2b01      	cmp	r3, #1
 800b416:	f040 8087 	bne.w	800b528 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b41a:	4b89      	ldr	r3, [pc, #548]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0302 	and.w	r3, r3, #2
 800b422:	2b00      	cmp	r3, #0
 800b424:	d005      	beq.n	800b432 <HAL_RCC_OscConfig+0x62>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	699b      	ldr	r3, [r3, #24]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e3b0      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a1a      	ldr	r2, [r3, #32]
 800b436:	4b82      	ldr	r3, [pc, #520]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f003 0308 	and.w	r3, r3, #8
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d004      	beq.n	800b44c <HAL_RCC_OscConfig+0x7c>
 800b442:	4b7f      	ldr	r3, [pc, #508]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b44a:	e005      	b.n	800b458 <HAL_RCC_OscConfig+0x88>
 800b44c:	4b7c      	ldr	r3, [pc, #496]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b44e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b452:	091b      	lsrs	r3, r3, #4
 800b454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b458:	4293      	cmp	r3, r2
 800b45a:	d223      	bcs.n	800b4a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6a1b      	ldr	r3, [r3, #32]
 800b460:	4618      	mov	r0, r3
 800b462:	f000 fd43 	bl	800beec <RCC_SetFlashLatencyFromMSIRange>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d001      	beq.n	800b470 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e391      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b470:	4b73      	ldr	r3, [pc, #460]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a72      	ldr	r2, [pc, #456]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b476:	f043 0308 	orr.w	r3, r3, #8
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	4b70      	ldr	r3, [pc, #448]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	496d      	ldr	r1, [pc, #436]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b48a:	4313      	orrs	r3, r2
 800b48c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b48e:	4b6c      	ldr	r3, [pc, #432]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	69db      	ldr	r3, [r3, #28]
 800b49a:	021b      	lsls	r3, r3, #8
 800b49c:	4968      	ldr	r1, [pc, #416]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	604b      	str	r3, [r1, #4]
 800b4a2:	e025      	b.n	800b4f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b4a4:	4b66      	ldr	r3, [pc, #408]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a65      	ldr	r2, [pc, #404]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b4aa:	f043 0308 	orr.w	r3, r3, #8
 800b4ae:	6013      	str	r3, [r2, #0]
 800b4b0:	4b63      	ldr	r3, [pc, #396]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6a1b      	ldr	r3, [r3, #32]
 800b4bc:	4960      	ldr	r1, [pc, #384]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b4c2:	4b5f      	ldr	r3, [pc, #380]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	021b      	lsls	r3, r3, #8
 800b4d0:	495b      	ldr	r1, [pc, #364]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d109      	bne.n	800b4f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a1b      	ldr	r3, [r3, #32]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f000 fd03 	bl	800beec <RCC_SetFlashLatencyFromMSIRange>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d001      	beq.n	800b4f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	e351      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b4f0:	f000 fc38 	bl	800bd64 <HAL_RCC_GetSysClockFreq>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	4b52      	ldr	r3, [pc, #328]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	091b      	lsrs	r3, r3, #4
 800b4fc:	f003 030f 	and.w	r3, r3, #15
 800b500:	4950      	ldr	r1, [pc, #320]	; (800b644 <HAL_RCC_OscConfig+0x274>)
 800b502:	5ccb      	ldrb	r3, [r1, r3]
 800b504:	f003 031f 	and.w	r3, r3, #31
 800b508:	fa22 f303 	lsr.w	r3, r2, r3
 800b50c:	4a4e      	ldr	r2, [pc, #312]	; (800b648 <HAL_RCC_OscConfig+0x278>)
 800b50e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b510:	4b4e      	ldr	r3, [pc, #312]	; (800b64c <HAL_RCC_OscConfig+0x27c>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4618      	mov	r0, r3
 800b516:	f7fd faf7 	bl	8008b08 <HAL_InitTick>
 800b51a:	4603      	mov	r3, r0
 800b51c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b51e:	7bfb      	ldrb	r3, [r7, #15]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d052      	beq.n	800b5ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
 800b526:	e335      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	699b      	ldr	r3, [r3, #24]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d032      	beq.n	800b596 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b530:	4b43      	ldr	r3, [pc, #268]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a42      	ldr	r2, [pc, #264]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b536:	f043 0301 	orr.w	r3, r3, #1
 800b53a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b53c:	f7fd fb34 	bl	8008ba8 <HAL_GetTick>
 800b540:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b542:	e008      	b.n	800b556 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b544:	f7fd fb30 	bl	8008ba8 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d901      	bls.n	800b556 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800b552:	2303      	movs	r3, #3
 800b554:	e31e      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b556:	4b3a      	ldr	r3, [pc, #232]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d0f0      	beq.n	800b544 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b562:	4b37      	ldr	r3, [pc, #220]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	4a36      	ldr	r2, [pc, #216]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b568:	f043 0308 	orr.w	r3, r3, #8
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	4b34      	ldr	r3, [pc, #208]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	4931      	ldr	r1, [pc, #196]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b57c:	4313      	orrs	r3, r2
 800b57e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b580:	4b2f      	ldr	r3, [pc, #188]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	69db      	ldr	r3, [r3, #28]
 800b58c:	021b      	lsls	r3, r3, #8
 800b58e:	492c      	ldr	r1, [pc, #176]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b590:	4313      	orrs	r3, r2
 800b592:	604b      	str	r3, [r1, #4]
 800b594:	e01a      	b.n	800b5cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b596:	4b2a      	ldr	r3, [pc, #168]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a29      	ldr	r2, [pc, #164]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b59c:	f023 0301 	bic.w	r3, r3, #1
 800b5a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b5a2:	f7fd fb01 	bl	8008ba8 <HAL_GetTick>
 800b5a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b5a8:	e008      	b.n	800b5bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b5aa:	f7fd fafd 	bl	8008ba8 <HAL_GetTick>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	d901      	bls.n	800b5bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800b5b8:	2303      	movs	r3, #3
 800b5ba:	e2eb      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b5bc:	4b20      	ldr	r3, [pc, #128]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f003 0302 	and.w	r3, r3, #2
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d1f0      	bne.n	800b5aa <HAL_RCC_OscConfig+0x1da>
 800b5c8:	e000      	b.n	800b5cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b5ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 0301 	and.w	r3, r3, #1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d074      	beq.n	800b6c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	2b08      	cmp	r3, #8
 800b5dc:	d005      	beq.n	800b5ea <HAL_RCC_OscConfig+0x21a>
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	2b0c      	cmp	r3, #12
 800b5e2:	d10e      	bne.n	800b602 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d10b      	bne.n	800b602 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b5ea:	4b15      	ldr	r3, [pc, #84]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d064      	beq.n	800b6c0 <HAL_RCC_OscConfig+0x2f0>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d160      	bne.n	800b6c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e2c8      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b60a:	d106      	bne.n	800b61a <HAL_RCC_OscConfig+0x24a>
 800b60c:	4b0c      	ldr	r3, [pc, #48]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a0b      	ldr	r2, [pc, #44]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	e026      	b.n	800b668 <HAL_RCC_OscConfig+0x298>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b622:	d115      	bne.n	800b650 <HAL_RCC_OscConfig+0x280>
 800b624:	4b06      	ldr	r3, [pc, #24]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a05      	ldr	r2, [pc, #20]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b62a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b62e:	6013      	str	r3, [r2, #0]
 800b630:	4b03      	ldr	r3, [pc, #12]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a02      	ldr	r2, [pc, #8]	; (800b640 <HAL_RCC_OscConfig+0x270>)
 800b636:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b63a:	6013      	str	r3, [r2, #0]
 800b63c:	e014      	b.n	800b668 <HAL_RCC_OscConfig+0x298>
 800b63e:	bf00      	nop
 800b640:	40021000 	.word	0x40021000
 800b644:	080128dc 	.word	0x080128dc
 800b648:	20000020 	.word	0x20000020
 800b64c:	20000024 	.word	0x20000024
 800b650:	4ba0      	ldr	r3, [pc, #640]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a9f      	ldr	r2, [pc, #636]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b65a:	6013      	str	r3, [r2, #0]
 800b65c:	4b9d      	ldr	r3, [pc, #628]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a9c      	ldr	r2, [pc, #624]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b666:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	685b      	ldr	r3, [r3, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d013      	beq.n	800b698 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b670:	f7fd fa9a 	bl	8008ba8 <HAL_GetTick>
 800b674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b676:	e008      	b.n	800b68a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b678:	f7fd fa96 	bl	8008ba8 <HAL_GetTick>
 800b67c:	4602      	mov	r2, r0
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	1ad3      	subs	r3, r2, r3
 800b682:	2b64      	cmp	r3, #100	; 0x64
 800b684:	d901      	bls.n	800b68a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800b686:	2303      	movs	r3, #3
 800b688:	e284      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b68a:	4b92      	ldr	r3, [pc, #584]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d0f0      	beq.n	800b678 <HAL_RCC_OscConfig+0x2a8>
 800b696:	e014      	b.n	800b6c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b698:	f7fd fa86 	bl	8008ba8 <HAL_GetTick>
 800b69c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b69e:	e008      	b.n	800b6b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b6a0:	f7fd fa82 	bl	8008ba8 <HAL_GetTick>
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	1ad3      	subs	r3, r2, r3
 800b6aa:	2b64      	cmp	r3, #100	; 0x64
 800b6ac:	d901      	bls.n	800b6b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b6ae:	2303      	movs	r3, #3
 800b6b0:	e270      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b6b2:	4b88      	ldr	r3, [pc, #544]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1f0      	bne.n	800b6a0 <HAL_RCC_OscConfig+0x2d0>
 800b6be:	e000      	b.n	800b6c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f003 0302 	and.w	r3, r3, #2
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d060      	beq.n	800b790 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	2b04      	cmp	r3, #4
 800b6d2:	d005      	beq.n	800b6e0 <HAL_RCC_OscConfig+0x310>
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	2b0c      	cmp	r3, #12
 800b6d8:	d119      	bne.n	800b70e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d116      	bne.n	800b70e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b6e0:	4b7c      	ldr	r3, [pc, #496]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d005      	beq.n	800b6f8 <HAL_RCC_OscConfig+0x328>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	e24d      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6f8:	4b76      	ldr	r3, [pc, #472]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	691b      	ldr	r3, [r3, #16]
 800b704:	061b      	lsls	r3, r3, #24
 800b706:	4973      	ldr	r1, [pc, #460]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b708:	4313      	orrs	r3, r2
 800b70a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b70c:	e040      	b.n	800b790 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d023      	beq.n	800b75e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b716:	4b6f      	ldr	r3, [pc, #444]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	4a6e      	ldr	r2, [pc, #440]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b71c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b722:	f7fd fa41 	bl	8008ba8 <HAL_GetTick>
 800b726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b728:	e008      	b.n	800b73c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b72a:	f7fd fa3d 	bl	8008ba8 <HAL_GetTick>
 800b72e:	4602      	mov	r2, r0
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	1ad3      	subs	r3, r2, r3
 800b734:	2b02      	cmp	r3, #2
 800b736:	d901      	bls.n	800b73c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800b738:	2303      	movs	r3, #3
 800b73a:	e22b      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b73c:	4b65      	ldr	r3, [pc, #404]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b744:	2b00      	cmp	r3, #0
 800b746:	d0f0      	beq.n	800b72a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b748:	4b62      	ldr	r3, [pc, #392]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	061b      	lsls	r3, r3, #24
 800b756:	495f      	ldr	r1, [pc, #380]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b758:	4313      	orrs	r3, r2
 800b75a:	604b      	str	r3, [r1, #4]
 800b75c:	e018      	b.n	800b790 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b75e:	4b5d      	ldr	r3, [pc, #372]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a5c      	ldr	r2, [pc, #368]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b768:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b76a:	f7fd fa1d 	bl	8008ba8 <HAL_GetTick>
 800b76e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b770:	e008      	b.n	800b784 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b772:	f7fd fa19 	bl	8008ba8 <HAL_GetTick>
 800b776:	4602      	mov	r2, r0
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	2b02      	cmp	r3, #2
 800b77e:	d901      	bls.n	800b784 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e207      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b784:	4b53      	ldr	r3, [pc, #332]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1f0      	bne.n	800b772 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 0308 	and.w	r3, r3, #8
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d03c      	beq.n	800b816 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	695b      	ldr	r3, [r3, #20]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d01c      	beq.n	800b7de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b7a4:	4b4b      	ldr	r3, [pc, #300]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b7a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7aa:	4a4a      	ldr	r2, [pc, #296]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b7ac:	f043 0301 	orr.w	r3, r3, #1
 800b7b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7b4:	f7fd f9f8 	bl	8008ba8 <HAL_GetTick>
 800b7b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b7ba:	e008      	b.n	800b7ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7bc:	f7fd f9f4 	bl	8008ba8 <HAL_GetTick>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d901      	bls.n	800b7ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800b7ca:	2303      	movs	r3, #3
 800b7cc:	e1e2      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b7ce:	4b41      	ldr	r3, [pc, #260]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b7d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7d4:	f003 0302 	and.w	r3, r3, #2
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d0ef      	beq.n	800b7bc <HAL_RCC_OscConfig+0x3ec>
 800b7dc:	e01b      	b.n	800b816 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b7de:	4b3d      	ldr	r3, [pc, #244]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b7e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b7e4:	4a3b      	ldr	r2, [pc, #236]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b7e6:	f023 0301 	bic.w	r3, r3, #1
 800b7ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7ee:	f7fd f9db 	bl	8008ba8 <HAL_GetTick>
 800b7f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b7f4:	e008      	b.n	800b808 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b7f6:	f7fd f9d7 	bl	8008ba8 <HAL_GetTick>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	2b02      	cmp	r3, #2
 800b802:	d901      	bls.n	800b808 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800b804:	2303      	movs	r3, #3
 800b806:	e1c5      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b808:	4b32      	ldr	r3, [pc, #200]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b80a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b80e:	f003 0302 	and.w	r3, r3, #2
 800b812:	2b00      	cmp	r3, #0
 800b814:	d1ef      	bne.n	800b7f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 0304 	and.w	r3, r3, #4
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f000 80a6 	beq.w	800b970 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b824:	2300      	movs	r3, #0
 800b826:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800b828:	4b2a      	ldr	r3, [pc, #168]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b82a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b82c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10d      	bne.n	800b850 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b834:	4b27      	ldr	r3, [pc, #156]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b838:	4a26      	ldr	r2, [pc, #152]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b83a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b83e:	6593      	str	r3, [r2, #88]	; 0x58
 800b840:	4b24      	ldr	r3, [pc, #144]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b848:	60bb      	str	r3, [r7, #8]
 800b84a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b84c:	2301      	movs	r3, #1
 800b84e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b850:	4b21      	ldr	r3, [pc, #132]	; (800b8d8 <HAL_RCC_OscConfig+0x508>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d118      	bne.n	800b88e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b85c:	4b1e      	ldr	r3, [pc, #120]	; (800b8d8 <HAL_RCC_OscConfig+0x508>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a1d      	ldr	r2, [pc, #116]	; (800b8d8 <HAL_RCC_OscConfig+0x508>)
 800b862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b866:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b868:	f7fd f99e 	bl	8008ba8 <HAL_GetTick>
 800b86c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b86e:	e008      	b.n	800b882 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b870:	f7fd f99a 	bl	8008ba8 <HAL_GetTick>
 800b874:	4602      	mov	r2, r0
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d901      	bls.n	800b882 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800b87e:	2303      	movs	r3, #3
 800b880:	e188      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b882:	4b15      	ldr	r3, [pc, #84]	; (800b8d8 <HAL_RCC_OscConfig+0x508>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d0f0      	beq.n	800b870 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	2b01      	cmp	r3, #1
 800b894:	d108      	bne.n	800b8a8 <HAL_RCC_OscConfig+0x4d8>
 800b896:	4b0f      	ldr	r3, [pc, #60]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b89c:	4a0d      	ldr	r2, [pc, #52]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b89e:	f043 0301 	orr.w	r3, r3, #1
 800b8a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b8a6:	e029      	b.n	800b8fc <HAL_RCC_OscConfig+0x52c>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	2b05      	cmp	r3, #5
 800b8ae:	d115      	bne.n	800b8dc <HAL_RCC_OscConfig+0x50c>
 800b8b0:	4b08      	ldr	r3, [pc, #32]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8b6:	4a07      	ldr	r2, [pc, #28]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b8b8:	f043 0304 	orr.w	r3, r3, #4
 800b8bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b8c0:	4b04      	ldr	r3, [pc, #16]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b8c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8c6:	4a03      	ldr	r2, [pc, #12]	; (800b8d4 <HAL_RCC_OscConfig+0x504>)
 800b8c8:	f043 0301 	orr.w	r3, r3, #1
 800b8cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b8d0:	e014      	b.n	800b8fc <HAL_RCC_OscConfig+0x52c>
 800b8d2:	bf00      	nop
 800b8d4:	40021000 	.word	0x40021000
 800b8d8:	40007000 	.word	0x40007000
 800b8dc:	4b91      	ldr	r3, [pc, #580]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800b8de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8e2:	4a90      	ldr	r2, [pc, #576]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800b8e4:	f023 0301 	bic.w	r3, r3, #1
 800b8e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b8ec:	4b8d      	ldr	r3, [pc, #564]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800b8ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8f2:	4a8c      	ldr	r2, [pc, #560]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800b8f4:	f023 0304 	bic.w	r3, r3, #4
 800b8f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d016      	beq.n	800b932 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b904:	f7fd f950 	bl	8008ba8 <HAL_GetTick>
 800b908:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b90a:	e00a      	b.n	800b922 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b90c:	f7fd f94c 	bl	8008ba8 <HAL_GetTick>
 800b910:	4602      	mov	r2, r0
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	f241 3288 	movw	r2, #5000	; 0x1388
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d901      	bls.n	800b922 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800b91e:	2303      	movs	r3, #3
 800b920:	e138      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b922:	4b80      	ldr	r3, [pc, #512]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800b924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b928:	f003 0302 	and.w	r3, r3, #2
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d0ed      	beq.n	800b90c <HAL_RCC_OscConfig+0x53c>
 800b930:	e015      	b.n	800b95e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b932:	f7fd f939 	bl	8008ba8 <HAL_GetTick>
 800b936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b938:	e00a      	b.n	800b950 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b93a:	f7fd f935 	bl	8008ba8 <HAL_GetTick>
 800b93e:	4602      	mov	r2, r0
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	1ad3      	subs	r3, r2, r3
 800b944:	f241 3288 	movw	r2, #5000	; 0x1388
 800b948:	4293      	cmp	r3, r2
 800b94a:	d901      	bls.n	800b950 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800b94c:	2303      	movs	r3, #3
 800b94e:	e121      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b950:	4b74      	ldr	r3, [pc, #464]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800b952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b956:	f003 0302 	and.w	r3, r3, #2
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d1ed      	bne.n	800b93a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b95e:	7ffb      	ldrb	r3, [r7, #31]
 800b960:	2b01      	cmp	r3, #1
 800b962:	d105      	bne.n	800b970 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b964:	4b6f      	ldr	r3, [pc, #444]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800b966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b968:	4a6e      	ldr	r2, [pc, #440]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800b96a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b96e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b974:	2b00      	cmp	r3, #0
 800b976:	f000 810c 	beq.w	800bb92 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b97e:	2b02      	cmp	r3, #2
 800b980:	f040 80d4 	bne.w	800bb2c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800b984:	4b67      	ldr	r3, [pc, #412]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	f003 0203 	and.w	r2, r3, #3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b994:	429a      	cmp	r2, r3
 800b996:	d130      	bne.n	800b9fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d127      	bne.n	800b9fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d11f      	bne.n	800b9fa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b9c4:	2a07      	cmp	r2, #7
 800b9c6:	bf14      	ite	ne
 800b9c8:	2201      	movne	r2, #1
 800b9ca:	2200      	moveq	r2, #0
 800b9cc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d113      	bne.n	800b9fa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9dc:	085b      	lsrs	r3, r3, #1
 800b9de:	3b01      	subs	r3, #1
 800b9e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d109      	bne.n	800b9fa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f0:	085b      	lsrs	r3, r3, #1
 800b9f2:	3b01      	subs	r3, #1
 800b9f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d06e      	beq.n	800bad8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	2b0c      	cmp	r3, #12
 800b9fe:	d069      	beq.n	800bad4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ba00:	4b48      	ldr	r3, [pc, #288]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d105      	bne.n	800ba18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ba0c:	4b45      	ldr	r3, [pc, #276]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d001      	beq.n	800ba1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e0bb      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ba1c:	4b41      	ldr	r3, [pc, #260]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a40      	ldr	r2, [pc, #256]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800ba22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ba28:	f7fd f8be 	bl	8008ba8 <HAL_GetTick>
 800ba2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ba2e:	e008      	b.n	800ba42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba30:	f7fd f8ba 	bl	8008ba8 <HAL_GetTick>
 800ba34:	4602      	mov	r2, r0
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	1ad3      	subs	r3, r2, r3
 800ba3a:	2b02      	cmp	r3, #2
 800ba3c:	d901      	bls.n	800ba42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800ba3e:	2303      	movs	r3, #3
 800ba40:	e0a8      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ba42:	4b38      	ldr	r3, [pc, #224]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d1f0      	bne.n	800ba30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ba4e:	4b35      	ldr	r3, [pc, #212]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800ba50:	68da      	ldr	r2, [r3, #12]
 800ba52:	4b35      	ldr	r3, [pc, #212]	; (800bb28 <HAL_RCC_OscConfig+0x758>)
 800ba54:	4013      	ands	r3, r2
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ba5e:	3a01      	subs	r2, #1
 800ba60:	0112      	lsls	r2, r2, #4
 800ba62:	4311      	orrs	r1, r2
 800ba64:	687a      	ldr	r2, [r7, #4]
 800ba66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ba68:	0212      	lsls	r2, r2, #8
 800ba6a:	4311      	orrs	r1, r2
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ba70:	0852      	lsrs	r2, r2, #1
 800ba72:	3a01      	subs	r2, #1
 800ba74:	0552      	lsls	r2, r2, #21
 800ba76:	4311      	orrs	r1, r2
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ba7c:	0852      	lsrs	r2, r2, #1
 800ba7e:	3a01      	subs	r2, #1
 800ba80:	0652      	lsls	r2, r2, #25
 800ba82:	4311      	orrs	r1, r2
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800ba88:	0912      	lsrs	r2, r2, #4
 800ba8a:	0452      	lsls	r2, r2, #17
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	4925      	ldr	r1, [pc, #148]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800ba90:	4313      	orrs	r3, r2
 800ba92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ba94:	4b23      	ldr	r3, [pc, #140]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a22      	ldr	r2, [pc, #136]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800ba9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ba9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800baa0:	4b20      	ldr	r3, [pc, #128]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	4a1f      	ldr	r2, [pc, #124]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800baa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800baaa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800baac:	f7fd f87c 	bl	8008ba8 <HAL_GetTick>
 800bab0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bab2:	e008      	b.n	800bac6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bab4:	f7fd f878 	bl	8008ba8 <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d901      	bls.n	800bac6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800bac2:	2303      	movs	r3, #3
 800bac4:	e066      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bac6:	4b17      	ldr	r3, [pc, #92]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d0f0      	beq.n	800bab4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bad2:	e05e      	b.n	800bb92 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e05d      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bad8:	4b12      	ldr	r3, [pc, #72]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d156      	bne.n	800bb92 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800bae4:	4b0f      	ldr	r3, [pc, #60]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4a0e      	ldr	r2, [pc, #56]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800baea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800baee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800baf0:	4b0c      	ldr	r3, [pc, #48]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	4a0b      	ldr	r2, [pc, #44]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800baf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bafa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bafc:	f7fd f854 	bl	8008ba8 <HAL_GetTick>
 800bb00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bb02:	e008      	b.n	800bb16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb04:	f7fd f850 	bl	8008ba8 <HAL_GetTick>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d901      	bls.n	800bb16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800bb12:	2303      	movs	r3, #3
 800bb14:	e03e      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bb16:	4b03      	ldr	r3, [pc, #12]	; (800bb24 <HAL_RCC_OscConfig+0x754>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d0f0      	beq.n	800bb04 <HAL_RCC_OscConfig+0x734>
 800bb22:	e036      	b.n	800bb92 <HAL_RCC_OscConfig+0x7c2>
 800bb24:	40021000 	.word	0x40021000
 800bb28:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	2b0c      	cmp	r3, #12
 800bb30:	d02d      	beq.n	800bb8e <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb32:	4b1a      	ldr	r3, [pc, #104]	; (800bb9c <HAL_RCC_OscConfig+0x7cc>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4a19      	ldr	r2, [pc, #100]	; (800bb9c <HAL_RCC_OscConfig+0x7cc>)
 800bb38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb3c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800bb3e:	4b17      	ldr	r3, [pc, #92]	; (800bb9c <HAL_RCC_OscConfig+0x7cc>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d105      	bne.n	800bb56 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800bb4a:	4b14      	ldr	r3, [pc, #80]	; (800bb9c <HAL_RCC_OscConfig+0x7cc>)
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	4a13      	ldr	r2, [pc, #76]	; (800bb9c <HAL_RCC_OscConfig+0x7cc>)
 800bb50:	f023 0303 	bic.w	r3, r3, #3
 800bb54:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800bb56:	4b11      	ldr	r3, [pc, #68]	; (800bb9c <HAL_RCC_OscConfig+0x7cc>)
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	4a10      	ldr	r2, [pc, #64]	; (800bb9c <HAL_RCC_OscConfig+0x7cc>)
 800bb5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800bb60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb66:	f7fd f81f 	bl	8008ba8 <HAL_GetTick>
 800bb6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb6c:	e008      	b.n	800bb80 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb6e:	f7fd f81b 	bl	8008ba8 <HAL_GetTick>
 800bb72:	4602      	mov	r2, r0
 800bb74:	693b      	ldr	r3, [r7, #16]
 800bb76:	1ad3      	subs	r3, r2, r3
 800bb78:	2b02      	cmp	r3, #2
 800bb7a:	d901      	bls.n	800bb80 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e009      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb80:	4b06      	ldr	r3, [pc, #24]	; (800bb9c <HAL_RCC_OscConfig+0x7cc>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d1f0      	bne.n	800bb6e <HAL_RCC_OscConfig+0x79e>
 800bb8c:	e001      	b.n	800bb92 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e000      	b.n	800bb94 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800bb92:	2300      	movs	r3, #0
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3720      	adds	r7, #32
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}
 800bb9c:	40021000 	.word	0x40021000

0800bba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d101      	bne.n	800bbb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bbb0:	2301      	movs	r3, #1
 800bbb2:	e0c8      	b.n	800bd46 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bbb4:	4b66      	ldr	r3, [pc, #408]	; (800bd50 <HAL_RCC_ClockConfig+0x1b0>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 0307 	and.w	r3, r3, #7
 800bbbc:	683a      	ldr	r2, [r7, #0]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d910      	bls.n	800bbe4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbc2:	4b63      	ldr	r3, [pc, #396]	; (800bd50 <HAL_RCC_ClockConfig+0x1b0>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f023 0207 	bic.w	r2, r3, #7
 800bbca:	4961      	ldr	r1, [pc, #388]	; (800bd50 <HAL_RCC_ClockConfig+0x1b0>)
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbd2:	4b5f      	ldr	r3, [pc, #380]	; (800bd50 <HAL_RCC_ClockConfig+0x1b0>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f003 0307 	and.w	r3, r3, #7
 800bbda:	683a      	ldr	r2, [r7, #0]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d001      	beq.n	800bbe4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e0b0      	b.n	800bd46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d04c      	beq.n	800bc8a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	685b      	ldr	r3, [r3, #4]
 800bbf4:	2b03      	cmp	r3, #3
 800bbf6:	d107      	bne.n	800bc08 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bbf8:	4b56      	ldr	r3, [pc, #344]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d121      	bne.n	800bc48 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	e09e      	b.n	800bd46 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	685b      	ldr	r3, [r3, #4]
 800bc0c:	2b02      	cmp	r3, #2
 800bc0e:	d107      	bne.n	800bc20 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bc10:	4b50      	ldr	r3, [pc, #320]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d115      	bne.n	800bc48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	e092      	b.n	800bd46 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d107      	bne.n	800bc38 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800bc28:	4b4a      	ldr	r3, [pc, #296]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 0302 	and.w	r3, r3, #2
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d109      	bne.n	800bc48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bc34:	2301      	movs	r3, #1
 800bc36:	e086      	b.n	800bd46 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bc38:	4b46      	ldr	r3, [pc, #280]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d101      	bne.n	800bc48 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800bc44:	2301      	movs	r3, #1
 800bc46:	e07e      	b.n	800bd46 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bc48:	4b42      	ldr	r3, [pc, #264]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bc4a:	689b      	ldr	r3, [r3, #8]
 800bc4c:	f023 0203 	bic.w	r2, r3, #3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	493f      	ldr	r1, [pc, #252]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bc56:	4313      	orrs	r3, r2
 800bc58:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc5a:	f7fc ffa5 	bl	8008ba8 <HAL_GetTick>
 800bc5e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc60:	e00a      	b.n	800bc78 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bc62:	f7fc ffa1 	bl	8008ba8 <HAL_GetTick>
 800bc66:	4602      	mov	r2, r0
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d901      	bls.n	800bc78 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800bc74:	2303      	movs	r3, #3
 800bc76:	e066      	b.n	800bd46 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bc78:	4b36      	ldr	r3, [pc, #216]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bc7a:	689b      	ldr	r3, [r3, #8]
 800bc7c:	f003 020c 	and.w	r2, r3, #12
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d1eb      	bne.n	800bc62 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 0302 	and.w	r3, r3, #2
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d008      	beq.n	800bca8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc96:	4b2f      	ldr	r3, [pc, #188]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	492c      	ldr	r1, [pc, #176]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bca4:	4313      	orrs	r3, r2
 800bca6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bca8:	4b29      	ldr	r3, [pc, #164]	; (800bd50 <HAL_RCC_ClockConfig+0x1b0>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 0307 	and.w	r3, r3, #7
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d210      	bcs.n	800bcd8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcb6:	4b26      	ldr	r3, [pc, #152]	; (800bd50 <HAL_RCC_ClockConfig+0x1b0>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f023 0207 	bic.w	r2, r3, #7
 800bcbe:	4924      	ldr	r1, [pc, #144]	; (800bd50 <HAL_RCC_ClockConfig+0x1b0>)
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	4313      	orrs	r3, r2
 800bcc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcc6:	4b22      	ldr	r3, [pc, #136]	; (800bd50 <HAL_RCC_ClockConfig+0x1b0>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f003 0307 	and.w	r3, r3, #7
 800bcce:	683a      	ldr	r2, [r7, #0]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d001      	beq.n	800bcd8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e036      	b.n	800bd46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0304 	and.w	r3, r3, #4
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d008      	beq.n	800bcf6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bce4:	4b1b      	ldr	r3, [pc, #108]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	4918      	ldr	r1, [pc, #96]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f003 0308 	and.w	r3, r3, #8
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d009      	beq.n	800bd16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bd02:	4b14      	ldr	r3, [pc, #80]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	691b      	ldr	r3, [r3, #16]
 800bd0e:	00db      	lsls	r3, r3, #3
 800bd10:	4910      	ldr	r1, [pc, #64]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bd12:	4313      	orrs	r3, r2
 800bd14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800bd16:	f000 f825 	bl	800bd64 <HAL_RCC_GetSysClockFreq>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	4b0d      	ldr	r3, [pc, #52]	; (800bd54 <HAL_RCC_ClockConfig+0x1b4>)
 800bd1e:	689b      	ldr	r3, [r3, #8]
 800bd20:	091b      	lsrs	r3, r3, #4
 800bd22:	f003 030f 	and.w	r3, r3, #15
 800bd26:	490c      	ldr	r1, [pc, #48]	; (800bd58 <HAL_RCC_ClockConfig+0x1b8>)
 800bd28:	5ccb      	ldrb	r3, [r1, r3]
 800bd2a:	f003 031f 	and.w	r3, r3, #31
 800bd2e:	fa22 f303 	lsr.w	r3, r2, r3
 800bd32:	4a0a      	ldr	r2, [pc, #40]	; (800bd5c <HAL_RCC_ClockConfig+0x1bc>)
 800bd34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800bd36:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <HAL_RCC_ClockConfig+0x1c0>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fc fee4 	bl	8008b08 <HAL_InitTick>
 800bd40:	4603      	mov	r3, r0
 800bd42:	72fb      	strb	r3, [r7, #11]

  return status;
 800bd44:	7afb      	ldrb	r3, [r7, #11]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
 800bd4e:	bf00      	nop
 800bd50:	40022000 	.word	0x40022000
 800bd54:	40021000 	.word	0x40021000
 800bd58:	080128dc 	.word	0x080128dc
 800bd5c:	20000020 	.word	0x20000020
 800bd60:	20000024 	.word	0x20000024

0800bd64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b089      	sub	sp, #36	; 0x24
 800bd68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	61fb      	str	r3, [r7, #28]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd72:	4b3e      	ldr	r3, [pc, #248]	; (800be6c <HAL_RCC_GetSysClockFreq+0x108>)
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	f003 030c 	and.w	r3, r3, #12
 800bd7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bd7c:	4b3b      	ldr	r3, [pc, #236]	; (800be6c <HAL_RCC_GetSysClockFreq+0x108>)
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	f003 0303 	and.w	r3, r3, #3
 800bd84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800bd86:	693b      	ldr	r3, [r7, #16]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d005      	beq.n	800bd98 <HAL_RCC_GetSysClockFreq+0x34>
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	2b0c      	cmp	r3, #12
 800bd90:	d121      	bne.n	800bdd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d11e      	bne.n	800bdd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800bd98:	4b34      	ldr	r3, [pc, #208]	; (800be6c <HAL_RCC_GetSysClockFreq+0x108>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0308 	and.w	r3, r3, #8
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d107      	bne.n	800bdb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800bda4:	4b31      	ldr	r3, [pc, #196]	; (800be6c <HAL_RCC_GetSysClockFreq+0x108>)
 800bda6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdaa:	0a1b      	lsrs	r3, r3, #8
 800bdac:	f003 030f 	and.w	r3, r3, #15
 800bdb0:	61fb      	str	r3, [r7, #28]
 800bdb2:	e005      	b.n	800bdc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800bdb4:	4b2d      	ldr	r3, [pc, #180]	; (800be6c <HAL_RCC_GetSysClockFreq+0x108>)
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	091b      	lsrs	r3, r3, #4
 800bdba:	f003 030f 	and.w	r3, r3, #15
 800bdbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800bdc0:	4a2b      	ldr	r2, [pc, #172]	; (800be70 <HAL_RCC_GetSysClockFreq+0x10c>)
 800bdc2:	69fb      	ldr	r3, [r7, #28]
 800bdc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bdc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d10d      	bne.n	800bdec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bdd4:	e00a      	b.n	800bdec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b04      	cmp	r3, #4
 800bdda:	d102      	bne.n	800bde2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bddc:	4b25      	ldr	r3, [pc, #148]	; (800be74 <HAL_RCC_GetSysClockFreq+0x110>)
 800bdde:	61bb      	str	r3, [r7, #24]
 800bde0:	e004      	b.n	800bdec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	2b08      	cmp	r3, #8
 800bde6:	d101      	bne.n	800bdec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bde8:	4b23      	ldr	r3, [pc, #140]	; (800be78 <HAL_RCC_GetSysClockFreq+0x114>)
 800bdea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	2b0c      	cmp	r3, #12
 800bdf0:	d134      	bne.n	800be5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bdf2:	4b1e      	ldr	r3, [pc, #120]	; (800be6c <HAL_RCC_GetSysClockFreq+0x108>)
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	f003 0303 	and.w	r3, r3, #3
 800bdfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d003      	beq.n	800be0a <HAL_RCC_GetSysClockFreq+0xa6>
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	2b03      	cmp	r3, #3
 800be06:	d003      	beq.n	800be10 <HAL_RCC_GetSysClockFreq+0xac>
 800be08:	e005      	b.n	800be16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800be0a:	4b1a      	ldr	r3, [pc, #104]	; (800be74 <HAL_RCC_GetSysClockFreq+0x110>)
 800be0c:	617b      	str	r3, [r7, #20]
      break;
 800be0e:	e005      	b.n	800be1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800be10:	4b19      	ldr	r3, [pc, #100]	; (800be78 <HAL_RCC_GetSysClockFreq+0x114>)
 800be12:	617b      	str	r3, [r7, #20]
      break;
 800be14:	e002      	b.n	800be1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	617b      	str	r3, [r7, #20]
      break;
 800be1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800be1c:	4b13      	ldr	r3, [pc, #76]	; (800be6c <HAL_RCC_GetSysClockFreq+0x108>)
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	091b      	lsrs	r3, r3, #4
 800be22:	f003 0307 	and.w	r3, r3, #7
 800be26:	3301      	adds	r3, #1
 800be28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800be2a:	4b10      	ldr	r3, [pc, #64]	; (800be6c <HAL_RCC_GetSysClockFreq+0x108>)
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	0a1b      	lsrs	r3, r3, #8
 800be30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be34:	697a      	ldr	r2, [r7, #20]
 800be36:	fb03 f202 	mul.w	r2, r3, r2
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800be42:	4b0a      	ldr	r3, [pc, #40]	; (800be6c <HAL_RCC_GetSysClockFreq+0x108>)
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	0e5b      	lsrs	r3, r3, #25
 800be48:	f003 0303 	and.w	r3, r3, #3
 800be4c:	3301      	adds	r3, #1
 800be4e:	005b      	lsls	r3, r3, #1
 800be50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	fbb2 f3f3 	udiv	r3, r2, r3
 800be5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800be5c:	69bb      	ldr	r3, [r7, #24]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3724      	adds	r7, #36	; 0x24
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	40021000 	.word	0x40021000
 800be70:	080128f4 	.word	0x080128f4
 800be74:	00f42400 	.word	0x00f42400
 800be78:	007a1200 	.word	0x007a1200

0800be7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800be7c:	b480      	push	{r7}
 800be7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800be80:	4b03      	ldr	r3, [pc, #12]	; (800be90 <HAL_RCC_GetHCLKFreq+0x14>)
 800be82:	681b      	ldr	r3, [r3, #0]
}
 800be84:	4618      	mov	r0, r3
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	20000020 	.word	0x20000020

0800be94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800be98:	f7ff fff0 	bl	800be7c <HAL_RCC_GetHCLKFreq>
 800be9c:	4602      	mov	r2, r0
 800be9e:	4b06      	ldr	r3, [pc, #24]	; (800beb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	0a1b      	lsrs	r3, r3, #8
 800bea4:	f003 0307 	and.w	r3, r3, #7
 800bea8:	4904      	ldr	r1, [pc, #16]	; (800bebc <HAL_RCC_GetPCLK1Freq+0x28>)
 800beaa:	5ccb      	ldrb	r3, [r1, r3]
 800beac:	f003 031f 	and.w	r3, r3, #31
 800beb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	40021000 	.word	0x40021000
 800bebc:	080128ec 	.word	0x080128ec

0800bec0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800bec4:	f7ff ffda 	bl	800be7c <HAL_RCC_GetHCLKFreq>
 800bec8:	4602      	mov	r2, r0
 800beca:	4b06      	ldr	r3, [pc, #24]	; (800bee4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	0adb      	lsrs	r3, r3, #11
 800bed0:	f003 0307 	and.w	r3, r3, #7
 800bed4:	4904      	ldr	r1, [pc, #16]	; (800bee8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bed6:	5ccb      	ldrb	r3, [r1, r3]
 800bed8:	f003 031f 	and.w	r3, r3, #31
 800bedc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	40021000 	.word	0x40021000
 800bee8:	080128ec 	.word	0x080128ec

0800beec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800bef4:	2300      	movs	r3, #0
 800bef6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800bef8:	4b2a      	ldr	r3, [pc, #168]	; (800bfa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800befa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800befc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d003      	beq.n	800bf0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800bf04:	f7ff fa00 	bl	800b308 <HAL_PWREx_GetVoltageRange>
 800bf08:	6178      	str	r0, [r7, #20]
 800bf0a:	e014      	b.n	800bf36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800bf0c:	4b25      	ldr	r3, [pc, #148]	; (800bfa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf10:	4a24      	ldr	r2, [pc, #144]	; (800bfa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf16:	6593      	str	r3, [r2, #88]	; 0x58
 800bf18:	4b22      	ldr	r3, [pc, #136]	; (800bfa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf20:	60fb      	str	r3, [r7, #12]
 800bf22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800bf24:	f7ff f9f0 	bl	800b308 <HAL_PWREx_GetVoltageRange>
 800bf28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800bf2a:	4b1e      	ldr	r3, [pc, #120]	; (800bfa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf2e:	4a1d      	ldr	r2, [pc, #116]	; (800bfa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800bf30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bf34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bf3c:	d10b      	bne.n	800bf56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b80      	cmp	r3, #128	; 0x80
 800bf42:	d919      	bls.n	800bf78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2ba0      	cmp	r3, #160	; 0xa0
 800bf48:	d902      	bls.n	800bf50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	613b      	str	r3, [r7, #16]
 800bf4e:	e013      	b.n	800bf78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bf50:	2301      	movs	r3, #1
 800bf52:	613b      	str	r3, [r7, #16]
 800bf54:	e010      	b.n	800bf78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b80      	cmp	r3, #128	; 0x80
 800bf5a:	d902      	bls.n	800bf62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800bf5c:	2303      	movs	r3, #3
 800bf5e:	613b      	str	r3, [r7, #16]
 800bf60:	e00a      	b.n	800bf78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b80      	cmp	r3, #128	; 0x80
 800bf66:	d102      	bne.n	800bf6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800bf68:	2302      	movs	r3, #2
 800bf6a:	613b      	str	r3, [r7, #16]
 800bf6c:	e004      	b.n	800bf78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2b70      	cmp	r3, #112	; 0x70
 800bf72:	d101      	bne.n	800bf78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800bf74:	2301      	movs	r3, #1
 800bf76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800bf78:	4b0b      	ldr	r3, [pc, #44]	; (800bfa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f023 0207 	bic.w	r2, r3, #7
 800bf80:	4909      	ldr	r1, [pc, #36]	; (800bfa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800bf88:	4b07      	ldr	r3, [pc, #28]	; (800bfa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f003 0307 	and.w	r3, r3, #7
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d001      	beq.n	800bf9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800bf96:	2301      	movs	r3, #1
 800bf98:	e000      	b.n	800bf9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800bf9a:	2300      	movs	r3, #0
}
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3718      	adds	r7, #24
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	40021000 	.word	0x40021000
 800bfa8:	40022000 	.word	0x40022000

0800bfac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b086      	sub	sp, #24
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bfb8:	2300      	movs	r3, #0
 800bfba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d041      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bfcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bfd0:	d02a      	beq.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800bfd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800bfd6:	d824      	bhi.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bfd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfdc:	d008      	beq.n	800bff0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bfde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfe2:	d81e      	bhi.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00a      	beq.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x52>
 800bfe8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfec:	d010      	beq.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bfee:	e018      	b.n	800c022 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800bff0:	4b86      	ldr	r3, [pc, #536]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	4a85      	ldr	r2, [pc, #532]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800bff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bffa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800bffc:	e015      	b.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	3304      	adds	r3, #4
 800c002:	2100      	movs	r1, #0
 800c004:	4618      	mov	r0, r3
 800c006:	f000 fabb 	bl	800c580 <RCCEx_PLLSAI1_Config>
 800c00a:	4603      	mov	r3, r0
 800c00c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c00e:	e00c      	b.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3320      	adds	r3, #32
 800c014:	2100      	movs	r1, #0
 800c016:	4618      	mov	r0, r3
 800c018:	f000 fba6 	bl	800c768 <RCCEx_PLLSAI2_Config>
 800c01c:	4603      	mov	r3, r0
 800c01e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c020:	e003      	b.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c022:	2301      	movs	r3, #1
 800c024:	74fb      	strb	r3, [r7, #19]
      break;
 800c026:	e000      	b.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c02a:	7cfb      	ldrb	r3, [r7, #19]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d10b      	bne.n	800c048 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c030:	4b76      	ldr	r3, [pc, #472]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c03e:	4973      	ldr	r1, [pc, #460]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c040:	4313      	orrs	r3, r2
 800c042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c046:	e001      	b.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c048:	7cfb      	ldrb	r3, [r7, #19]
 800c04a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c054:	2b00      	cmp	r3, #0
 800c056:	d041      	beq.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c05c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c060:	d02a      	beq.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800c062:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c066:	d824      	bhi.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800c068:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c06c:	d008      	beq.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c06e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c072:	d81e      	bhi.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00a      	beq.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800c078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c07c:	d010      	beq.n	800c0a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800c07e:	e018      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800c080:	4b62      	ldr	r3, [pc, #392]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c082:	68db      	ldr	r3, [r3, #12]
 800c084:	4a61      	ldr	r2, [pc, #388]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c08a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c08c:	e015      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	3304      	adds	r3, #4
 800c092:	2100      	movs	r1, #0
 800c094:	4618      	mov	r0, r3
 800c096:	f000 fa73 	bl	800c580 <RCCEx_PLLSAI1_Config>
 800c09a:	4603      	mov	r3, r0
 800c09c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c09e:	e00c      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	3320      	adds	r3, #32
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 fb5e 	bl	800c768 <RCCEx_PLLSAI2_Config>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800c0b0:	e003      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	74fb      	strb	r3, [r7, #19]
      break;
 800c0b6:	e000      	b.n	800c0ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800c0b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c0ba:	7cfb      	ldrb	r3, [r7, #19]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d10b      	bne.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c0c0:	4b52      	ldr	r3, [pc, #328]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c0c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c0c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0ce:	494f      	ldr	r1, [pc, #316]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c0d0:	4313      	orrs	r3, r2
 800c0d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800c0d6:	e001      	b.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0d8:	7cfb      	ldrb	r3, [r7, #19]
 800c0da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 80a0 	beq.w	800c22a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c0ee:	4b47      	ldr	r3, [pc, #284]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c0f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d101      	bne.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e000      	b.n	800c100 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800c0fe:	2300      	movs	r3, #0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00d      	beq.n	800c120 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c104:	4b41      	ldr	r3, [pc, #260]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c108:	4a40      	ldr	r2, [pc, #256]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c10a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c10e:	6593      	str	r3, [r2, #88]	; 0x58
 800c110:	4b3e      	ldr	r3, [pc, #248]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c118:	60bb      	str	r3, [r7, #8]
 800c11a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c11c:	2301      	movs	r3, #1
 800c11e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c120:	4b3b      	ldr	r3, [pc, #236]	; (800c210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a3a      	ldr	r2, [pc, #232]	; (800c210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c12a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c12c:	f7fc fd3c 	bl	8008ba8 <HAL_GetTick>
 800c130:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c132:	e009      	b.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c134:	f7fc fd38 	bl	8008ba8 <HAL_GetTick>
 800c138:	4602      	mov	r2, r0
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	1ad3      	subs	r3, r2, r3
 800c13e:	2b02      	cmp	r3, #2
 800c140:	d902      	bls.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800c142:	2303      	movs	r3, #3
 800c144:	74fb      	strb	r3, [r7, #19]
        break;
 800c146:	e005      	b.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c148:	4b31      	ldr	r3, [pc, #196]	; (800c210 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c150:	2b00      	cmp	r3, #0
 800c152:	d0ef      	beq.n	800c134 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800c154:	7cfb      	ldrb	r3, [r7, #19]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d15c      	bne.n	800c214 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c15a:	4b2c      	ldr	r3, [pc, #176]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c15c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c164:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d01f      	beq.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c172:	697a      	ldr	r2, [r7, #20]
 800c174:	429a      	cmp	r2, r3
 800c176:	d019      	beq.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c178:	4b24      	ldr	r3, [pc, #144]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c17a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c17e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c182:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c184:	4b21      	ldr	r3, [pc, #132]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c18a:	4a20      	ldr	r2, [pc, #128]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c18c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c194:	4b1d      	ldr	r3, [pc, #116]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c19a:	4a1c      	ldr	r2, [pc, #112]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c19c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c1a4:	4a19      	ldr	r2, [pc, #100]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d016      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1b6:	f7fc fcf7 	bl	8008ba8 <HAL_GetTick>
 800c1ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c1bc:	e00b      	b.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1be:	f7fc fcf3 	bl	8008ba8 <HAL_GetTick>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d902      	bls.n	800c1d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	74fb      	strb	r3, [r7, #19]
            break;
 800c1d4:	e006      	b.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c1d6:	4b0d      	ldr	r3, [pc, #52]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c1d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1dc:	f003 0302 	and.w	r3, r3, #2
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d0ec      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800c1e4:	7cfb      	ldrb	r3, [r7, #19]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10c      	bne.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c1ea:	4b08      	ldr	r3, [pc, #32]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c1ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1fa:	4904      	ldr	r1, [pc, #16]	; (800c20c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c202:	e009      	b.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c204:	7cfb      	ldrb	r3, [r7, #19]
 800c206:	74bb      	strb	r3, [r7, #18]
 800c208:	e006      	b.n	800c218 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800c20a:	bf00      	nop
 800c20c:	40021000 	.word	0x40021000
 800c210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c214:	7cfb      	ldrb	r3, [r7, #19]
 800c216:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c218:	7c7b      	ldrb	r3, [r7, #17]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d105      	bne.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c21e:	4b9e      	ldr	r3, [pc, #632]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c222:	4a9d      	ldr	r2, [pc, #628]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c224:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c228:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f003 0301 	and.w	r3, r3, #1
 800c232:	2b00      	cmp	r3, #0
 800c234:	d00a      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c236:	4b98      	ldr	r3, [pc, #608]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c23c:	f023 0203 	bic.w	r2, r3, #3
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c244:	4994      	ldr	r1, [pc, #592]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c246:	4313      	orrs	r3, r2
 800c248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	f003 0302 	and.w	r3, r3, #2
 800c254:	2b00      	cmp	r3, #0
 800c256:	d00a      	beq.n	800c26e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c258:	4b8f      	ldr	r3, [pc, #572]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c25e:	f023 020c 	bic.w	r2, r3, #12
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c266:	498c      	ldr	r1, [pc, #560]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c268:	4313      	orrs	r3, r2
 800c26a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f003 0304 	and.w	r3, r3, #4
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c27a:	4b87      	ldr	r3, [pc, #540]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c27c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c280:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c288:	4983      	ldr	r1, [pc, #524]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c28a:	4313      	orrs	r3, r2
 800c28c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 0308 	and.w	r3, r3, #8
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00a      	beq.n	800c2b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c29c:	4b7e      	ldr	r3, [pc, #504]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c29e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2aa:	497b      	ldr	r1, [pc, #492]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0310 	and.w	r3, r3, #16
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00a      	beq.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c2be:	4b76      	ldr	r3, [pc, #472]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c2c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2cc:	4972      	ldr	r1, [pc, #456]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f003 0320 	and.w	r3, r3, #32
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d00a      	beq.n	800c2f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c2e0:	4b6d      	ldr	r3, [pc, #436]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c2e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ee:	496a      	ldr	r1, [pc, #424]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c2f0:	4313      	orrs	r3, r2
 800c2f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d00a      	beq.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c302:	4b65      	ldr	r3, [pc, #404]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c308:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c310:	4961      	ldr	r1, [pc, #388]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c312:	4313      	orrs	r3, r2
 800c314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00a      	beq.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c324:	4b5c      	ldr	r3, [pc, #368]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c32a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c332:	4959      	ldr	r1, [pc, #356]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c334:	4313      	orrs	r3, r2
 800c336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c342:	2b00      	cmp	r3, #0
 800c344:	d00a      	beq.n	800c35c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c346:	4b54      	ldr	r3, [pc, #336]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c34c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c354:	4950      	ldr	r1, [pc, #320]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c356:	4313      	orrs	r3, r2
 800c358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00a      	beq.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c368:	4b4b      	ldr	r3, [pc, #300]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c36e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c376:	4948      	ldr	r1, [pc, #288]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00a      	beq.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c38a:	4b43      	ldr	r3, [pc, #268]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c38c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c390:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c398:	493f      	ldr	r1, [pc, #252]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c39a:	4313      	orrs	r3, r2
 800c39c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d028      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c3ac:	4b3a      	ldr	r3, [pc, #232]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c3ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ba:	4937      	ldr	r1, [pc, #220]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3ca:	d106      	bne.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c3cc:	4b32      	ldr	r3, [pc, #200]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c3ce:	68db      	ldr	r3, [r3, #12]
 800c3d0:	4a31      	ldr	r2, [pc, #196]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c3d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3d6:	60d3      	str	r3, [r2, #12]
 800c3d8:	e011      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c3e2:	d10c      	bne.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f000 f8c8 	bl	800c580 <RCCEx_PLLSAI1_Config>
 800c3f0:	4603      	mov	r3, r0
 800c3f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c3f4:	7cfb      	ldrb	r3, [r7, #19]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d001      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800c3fa:	7cfb      	ldrb	r3, [r7, #19]
 800c3fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c406:	2b00      	cmp	r3, #0
 800c408:	d028      	beq.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c40a:	4b23      	ldr	r3, [pc, #140]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c40c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c410:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c418:	491f      	ldr	r1, [pc, #124]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c41a:	4313      	orrs	r3, r2
 800c41c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c424:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c428:	d106      	bne.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c42a:	4b1b      	ldr	r3, [pc, #108]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	4a1a      	ldr	r2, [pc, #104]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c434:	60d3      	str	r3, [r2, #12]
 800c436:	e011      	b.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c43c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c440:	d10c      	bne.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	3304      	adds	r3, #4
 800c446:	2101      	movs	r1, #1
 800c448:	4618      	mov	r0, r3
 800c44a:	f000 f899 	bl	800c580 <RCCEx_PLLSAI1_Config>
 800c44e:	4603      	mov	r3, r0
 800c450:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c452:	7cfb      	ldrb	r3, [r7, #19]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d001      	beq.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800c458:	7cfb      	ldrb	r3, [r7, #19]
 800c45a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c464:	2b00      	cmp	r3, #0
 800c466:	d02b      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c468:	4b0b      	ldr	r3, [pc, #44]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c46e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c476:	4908      	ldr	r1, [pc, #32]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c478:	4313      	orrs	r3, r2
 800c47a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c486:	d109      	bne.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c488:	4b03      	ldr	r3, [pc, #12]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	4a02      	ldr	r2, [pc, #8]	; (800c498 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800c48e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c492:	60d3      	str	r3, [r2, #12]
 800c494:	e014      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800c496:	bf00      	nop
 800c498:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c4a4:	d10c      	bne.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f000 f867 	bl	800c580 <RCCEx_PLLSAI1_Config>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c4b6:	7cfb      	ldrb	r3, [r7, #19]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d001      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800c4bc:	7cfb      	ldrb	r3, [r7, #19]
 800c4be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d02f      	beq.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c4cc:	4b2b      	ldr	r3, [pc, #172]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c4ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4da:	4928      	ldr	r1, [pc, #160]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4ea:	d10d      	bne.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	2102      	movs	r1, #2
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 f844 	bl	800c580 <RCCEx_PLLSAI1_Config>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c4fc:	7cfb      	ldrb	r3, [r7, #19]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d014      	beq.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800c502:	7cfb      	ldrb	r3, [r7, #19]
 800c504:	74bb      	strb	r3, [r7, #18]
 800c506:	e011      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c50c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c510:	d10c      	bne.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	3320      	adds	r3, #32
 800c516:	2102      	movs	r1, #2
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 f925 	bl	800c768 <RCCEx_PLLSAI2_Config>
 800c51e:	4603      	mov	r3, r0
 800c520:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c522:	7cfb      	ldrb	r3, [r7, #19]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800c528:	7cfb      	ldrb	r3, [r7, #19]
 800c52a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c534:	2b00      	cmp	r3, #0
 800c536:	d00a      	beq.n	800c54e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c538:	4b10      	ldr	r3, [pc, #64]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c53a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c53e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c546:	490d      	ldr	r1, [pc, #52]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c548:	4313      	orrs	r3, r2
 800c54a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c556:	2b00      	cmp	r3, #0
 800c558:	d00b      	beq.n	800c572 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c55a:	4b08      	ldr	r3, [pc, #32]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c560:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c56a:	4904      	ldr	r1, [pc, #16]	; (800c57c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c56c:	4313      	orrs	r3, r2
 800c56e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c572:	7cbb      	ldrb	r3, [r7, #18]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	40021000 	.word	0x40021000

0800c580 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b084      	sub	sp, #16
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c58a:	2300      	movs	r3, #0
 800c58c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c58e:	4b75      	ldr	r3, [pc, #468]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	f003 0303 	and.w	r3, r3, #3
 800c596:	2b00      	cmp	r3, #0
 800c598:	d018      	beq.n	800c5cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c59a:	4b72      	ldr	r3, [pc, #456]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c59c:	68db      	ldr	r3, [r3, #12]
 800c59e:	f003 0203 	and.w	r2, r3, #3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d10d      	bne.n	800c5c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
       ||
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d009      	beq.n	800c5c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c5b2:	4b6c      	ldr	r3, [pc, #432]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c5b4:	68db      	ldr	r3, [r3, #12]
 800c5b6:	091b      	lsrs	r3, r3, #4
 800c5b8:	f003 0307 	and.w	r3, r3, #7
 800c5bc:	1c5a      	adds	r2, r3, #1
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	685b      	ldr	r3, [r3, #4]
       ||
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d047      	beq.n	800c656 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	73fb      	strb	r3, [r7, #15]
 800c5ca:	e044      	b.n	800c656 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b03      	cmp	r3, #3
 800c5d2:	d018      	beq.n	800c606 <RCCEx_PLLSAI1_Config+0x86>
 800c5d4:	2b03      	cmp	r3, #3
 800c5d6:	d825      	bhi.n	800c624 <RCCEx_PLLSAI1_Config+0xa4>
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d002      	beq.n	800c5e2 <RCCEx_PLLSAI1_Config+0x62>
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d009      	beq.n	800c5f4 <RCCEx_PLLSAI1_Config+0x74>
 800c5e0:	e020      	b.n	800c624 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c5e2:	4b60      	ldr	r3, [pc, #384]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f003 0302 	and.w	r3, r3, #2
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d11d      	bne.n	800c62a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c5f2:	e01a      	b.n	800c62a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c5f4:	4b5b      	ldr	r3, [pc, #364]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d116      	bne.n	800c62e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c600:	2301      	movs	r3, #1
 800c602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c604:	e013      	b.n	800c62e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c606:	4b57      	ldr	r3, [pc, #348]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d10f      	bne.n	800c632 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c612:	4b54      	ldr	r3, [pc, #336]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d109      	bne.n	800c632 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c61e:	2301      	movs	r3, #1
 800c620:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c622:	e006      	b.n	800c632 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c624:	2301      	movs	r3, #1
 800c626:	73fb      	strb	r3, [r7, #15]
      break;
 800c628:	e004      	b.n	800c634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c62a:	bf00      	nop
 800c62c:	e002      	b.n	800c634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c62e:	bf00      	nop
 800c630:	e000      	b.n	800c634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c632:	bf00      	nop
    }

    if(status == HAL_OK)
 800c634:	7bfb      	ldrb	r3, [r7, #15]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d10d      	bne.n	800c656 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c63a:	4b4a      	ldr	r3, [pc, #296]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c63c:	68db      	ldr	r3, [r3, #12]
 800c63e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6819      	ldr	r1, [r3, #0]
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	685b      	ldr	r3, [r3, #4]
 800c64a:	3b01      	subs	r3, #1
 800c64c:	011b      	lsls	r3, r3, #4
 800c64e:	430b      	orrs	r3, r1
 800c650:	4944      	ldr	r1, [pc, #272]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c652:	4313      	orrs	r3, r2
 800c654:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c656:	7bfb      	ldrb	r3, [r7, #15]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d17d      	bne.n	800c758 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c65c:	4b41      	ldr	r3, [pc, #260]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a40      	ldr	r2, [pc, #256]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c662:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c668:	f7fc fa9e 	bl	8008ba8 <HAL_GetTick>
 800c66c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c66e:	e009      	b.n	800c684 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c670:	f7fc fa9a 	bl	8008ba8 <HAL_GetTick>
 800c674:	4602      	mov	r2, r0
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	1ad3      	subs	r3, r2, r3
 800c67a:	2b02      	cmp	r3, #2
 800c67c:	d902      	bls.n	800c684 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c67e:	2303      	movs	r3, #3
 800c680:	73fb      	strb	r3, [r7, #15]
        break;
 800c682:	e005      	b.n	800c690 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c684:	4b37      	ldr	r3, [pc, #220]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d1ef      	bne.n	800c670 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c690:	7bfb      	ldrb	r3, [r7, #15]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d160      	bne.n	800c758 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d111      	bne.n	800c6c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c69c:	4b31      	ldr	r3, [pc, #196]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800c6a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	6892      	ldr	r2, [r2, #8]
 800c6ac:	0211      	lsls	r1, r2, #8
 800c6ae:	687a      	ldr	r2, [r7, #4]
 800c6b0:	68d2      	ldr	r2, [r2, #12]
 800c6b2:	0912      	lsrs	r2, r2, #4
 800c6b4:	0452      	lsls	r2, r2, #17
 800c6b6:	430a      	orrs	r2, r1
 800c6b8:	492a      	ldr	r1, [pc, #168]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	610b      	str	r3, [r1, #16]
 800c6be:	e027      	b.n	800c710 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	2b01      	cmp	r3, #1
 800c6c4:	d112      	bne.n	800c6ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c6c6:	4b27      	ldr	r3, [pc, #156]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c6ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c6d2:	687a      	ldr	r2, [r7, #4]
 800c6d4:	6892      	ldr	r2, [r2, #8]
 800c6d6:	0211      	lsls	r1, r2, #8
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	6912      	ldr	r2, [r2, #16]
 800c6dc:	0852      	lsrs	r2, r2, #1
 800c6de:	3a01      	subs	r2, #1
 800c6e0:	0552      	lsls	r2, r2, #21
 800c6e2:	430a      	orrs	r2, r1
 800c6e4:	491f      	ldr	r1, [pc, #124]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	610b      	str	r3, [r1, #16]
 800c6ea:	e011      	b.n	800c710 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c6ec:	4b1d      	ldr	r3, [pc, #116]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c6ee:	691b      	ldr	r3, [r3, #16]
 800c6f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c6f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	6892      	ldr	r2, [r2, #8]
 800c6fc:	0211      	lsls	r1, r2, #8
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	6952      	ldr	r2, [r2, #20]
 800c702:	0852      	lsrs	r2, r2, #1
 800c704:	3a01      	subs	r2, #1
 800c706:	0652      	lsls	r2, r2, #25
 800c708:	430a      	orrs	r2, r1
 800c70a:	4916      	ldr	r1, [pc, #88]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c70c:	4313      	orrs	r3, r2
 800c70e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c710:	4b14      	ldr	r3, [pc, #80]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	4a13      	ldr	r2, [pc, #76]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c716:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c71a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c71c:	f7fc fa44 	bl	8008ba8 <HAL_GetTick>
 800c720:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c722:	e009      	b.n	800c738 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c724:	f7fc fa40 	bl	8008ba8 <HAL_GetTick>
 800c728:	4602      	mov	r2, r0
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	1ad3      	subs	r3, r2, r3
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d902      	bls.n	800c738 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800c732:	2303      	movs	r3, #3
 800c734:	73fb      	strb	r3, [r7, #15]
          break;
 800c736:	e005      	b.n	800c744 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c738:	4b0a      	ldr	r3, [pc, #40]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c740:	2b00      	cmp	r3, #0
 800c742:	d0ef      	beq.n	800c724 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800c744:	7bfb      	ldrb	r3, [r7, #15]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d106      	bne.n	800c758 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c74a:	4b06      	ldr	r3, [pc, #24]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c74c:	691a      	ldr	r2, [r3, #16]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	699b      	ldr	r3, [r3, #24]
 800c752:	4904      	ldr	r1, [pc, #16]	; (800c764 <RCCEx_PLLSAI1_Config+0x1e4>)
 800c754:	4313      	orrs	r3, r2
 800c756:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800c758:	7bfb      	ldrb	r3, [r7, #15]
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3710      	adds	r7, #16
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}
 800c762:	bf00      	nop
 800c764:	40021000 	.word	0x40021000

0800c768 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b084      	sub	sp, #16
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c772:	2300      	movs	r3, #0
 800c774:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c776:	4b6a      	ldr	r3, [pc, #424]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	f003 0303 	and.w	r3, r3, #3
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d018      	beq.n	800c7b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800c782:	4b67      	ldr	r3, [pc, #412]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	f003 0203 	and.w	r2, r3, #3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	429a      	cmp	r2, r3
 800c790:	d10d      	bne.n	800c7ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
       ||
 800c796:	2b00      	cmp	r3, #0
 800c798:	d009      	beq.n	800c7ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800c79a:	4b61      	ldr	r3, [pc, #388]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	091b      	lsrs	r3, r3, #4
 800c7a0:	f003 0307 	and.w	r3, r3, #7
 800c7a4:	1c5a      	adds	r2, r3, #1
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	685b      	ldr	r3, [r3, #4]
       ||
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d047      	beq.n	800c83e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	73fb      	strb	r3, [r7, #15]
 800c7b2:	e044      	b.n	800c83e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b03      	cmp	r3, #3
 800c7ba:	d018      	beq.n	800c7ee <RCCEx_PLLSAI2_Config+0x86>
 800c7bc:	2b03      	cmp	r3, #3
 800c7be:	d825      	bhi.n	800c80c <RCCEx_PLLSAI2_Config+0xa4>
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d002      	beq.n	800c7ca <RCCEx_PLLSAI2_Config+0x62>
 800c7c4:	2b02      	cmp	r3, #2
 800c7c6:	d009      	beq.n	800c7dc <RCCEx_PLLSAI2_Config+0x74>
 800c7c8:	e020      	b.n	800c80c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c7ca:	4b55      	ldr	r3, [pc, #340]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f003 0302 	and.w	r3, r3, #2
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d11d      	bne.n	800c812 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c7da:	e01a      	b.n	800c812 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c7dc:	4b50      	ldr	r3, [pc, #320]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d116      	bne.n	800c816 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c7ec:	e013      	b.n	800c816 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c7ee:	4b4c      	ldr	r3, [pc, #304]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10f      	bne.n	800c81a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c7fa:	4b49      	ldr	r3, [pc, #292]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c802:	2b00      	cmp	r3, #0
 800c804:	d109      	bne.n	800c81a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800c806:	2301      	movs	r3, #1
 800c808:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c80a:	e006      	b.n	800c81a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c80c:	2301      	movs	r3, #1
 800c80e:	73fb      	strb	r3, [r7, #15]
      break;
 800c810:	e004      	b.n	800c81c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c812:	bf00      	nop
 800c814:	e002      	b.n	800c81c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c816:	bf00      	nop
 800c818:	e000      	b.n	800c81c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800c81a:	bf00      	nop
    }

    if(status == HAL_OK)
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d10d      	bne.n	800c83e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c822:	4b3f      	ldr	r3, [pc, #252]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	6819      	ldr	r1, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	3b01      	subs	r3, #1
 800c834:	011b      	lsls	r3, r3, #4
 800c836:	430b      	orrs	r3, r1
 800c838:	4939      	ldr	r1, [pc, #228]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c83a:	4313      	orrs	r3, r2
 800c83c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c83e:	7bfb      	ldrb	r3, [r7, #15]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d167      	bne.n	800c914 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800c844:	4b36      	ldr	r3, [pc, #216]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a35      	ldr	r2, [pc, #212]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c84a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c84e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c850:	f7fc f9aa 	bl	8008ba8 <HAL_GetTick>
 800c854:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c856:	e009      	b.n	800c86c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c858:	f7fc f9a6 	bl	8008ba8 <HAL_GetTick>
 800c85c:	4602      	mov	r2, r0
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	2b02      	cmp	r3, #2
 800c864:	d902      	bls.n	800c86c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c866:	2303      	movs	r3, #3
 800c868:	73fb      	strb	r3, [r7, #15]
        break;
 800c86a:	e005      	b.n	800c878 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800c86c:	4b2c      	ldr	r3, [pc, #176]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1ef      	bne.n	800c858 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c878:	7bfb      	ldrb	r3, [r7, #15]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d14a      	bne.n	800c914 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d111      	bne.n	800c8a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c884:	4b26      	ldr	r3, [pc, #152]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c886:	695b      	ldr	r3, [r3, #20]
 800c888:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800c88c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	6892      	ldr	r2, [r2, #8]
 800c894:	0211      	lsls	r1, r2, #8
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	68d2      	ldr	r2, [r2, #12]
 800c89a:	0912      	lsrs	r2, r2, #4
 800c89c:	0452      	lsls	r2, r2, #17
 800c89e:	430a      	orrs	r2, r1
 800c8a0:	491f      	ldr	r1, [pc, #124]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	614b      	str	r3, [r1, #20]
 800c8a6:	e011      	b.n	800c8cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800c8a8:	4b1d      	ldr	r3, [pc, #116]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c8aa:	695b      	ldr	r3, [r3, #20]
 800c8ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800c8b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	6892      	ldr	r2, [r2, #8]
 800c8b8:	0211      	lsls	r1, r2, #8
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	6912      	ldr	r2, [r2, #16]
 800c8be:	0852      	lsrs	r2, r2, #1
 800c8c0:	3a01      	subs	r2, #1
 800c8c2:	0652      	lsls	r2, r2, #25
 800c8c4:	430a      	orrs	r2, r1
 800c8c6:	4916      	ldr	r1, [pc, #88]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800c8cc:	4b14      	ldr	r3, [pc, #80]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	4a13      	ldr	r2, [pc, #76]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c8d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c8d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8d8:	f7fc f966 	bl	8008ba8 <HAL_GetTick>
 800c8dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c8de:	e009      	b.n	800c8f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800c8e0:	f7fc f962 	bl	8008ba8 <HAL_GetTick>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	1ad3      	subs	r3, r2, r3
 800c8ea:	2b02      	cmp	r3, #2
 800c8ec:	d902      	bls.n	800c8f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	73fb      	strb	r3, [r7, #15]
          break;
 800c8f2:	e005      	b.n	800c900 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800c8f4:	4b0a      	ldr	r3, [pc, #40]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d0ef      	beq.n	800c8e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800c900:	7bfb      	ldrb	r3, [r7, #15]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d106      	bne.n	800c914 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800c906:	4b06      	ldr	r3, [pc, #24]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c908:	695a      	ldr	r2, [r3, #20]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	695b      	ldr	r3, [r3, #20]
 800c90e:	4904      	ldr	r1, [pc, #16]	; (800c920 <RCCEx_PLLSAI2_Config+0x1b8>)
 800c910:	4313      	orrs	r3, r2
 800c912:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800c914:	7bfb      	ldrb	r3, [r7, #15]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	40021000 	.word	0x40021000

0800c924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d101      	bne.n	800c936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c932:	2301      	movs	r3, #1
 800c934:	e095      	b.n	800ca62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d108      	bne.n	800c950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c946:	d009      	beq.n	800c95c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	61da      	str	r2, [r3, #28]
 800c94e:	e005      	b.n	800c95c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2200      	movs	r2, #0
 800c95a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d106      	bne.n	800c97c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2200      	movs	r2, #0
 800c972:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f877 	bl	800ca6a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2202      	movs	r2, #2
 800c980:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c992:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c99c:	d902      	bls.n	800c9a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	60fb      	str	r3, [r7, #12]
 800c9a2:	e002      	b.n	800c9aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c9a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c9a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c9b2:	d007      	beq.n	800c9c4 <HAL_SPI_Init+0xa0>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c9bc:	d002      	beq.n	800c9c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c9d4:	431a      	orrs	r2, r3
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	f003 0302 	and.w	r3, r3, #2
 800c9de:	431a      	orrs	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	695b      	ldr	r3, [r3, #20]
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	431a      	orrs	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	699b      	ldr	r3, [r3, #24]
 800c9ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c9f2:	431a      	orrs	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	69db      	ldr	r3, [r3, #28]
 800c9f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c9fc:	431a      	orrs	r2, r3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
 800ca02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca06:	ea42 0103 	orr.w	r1, r2, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	699b      	ldr	r3, [r3, #24]
 800ca1e:	0c1b      	lsrs	r3, r3, #16
 800ca20:	f003 0204 	and.w	r2, r3, #4
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca28:	f003 0310 	and.w	r3, r3, #16
 800ca2c:	431a      	orrs	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca32:	f003 0308 	and.w	r3, r3, #8
 800ca36:	431a      	orrs	r2, r3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ca40:	ea42 0103 	orr.w	r1, r2, r3
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	430a      	orrs	r2, r1
 800ca50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ca60:	2300      	movs	r3, #0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3710      	adds	r7, #16
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}

0800ca6a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800ca6a:	b480      	push	{r7}
 800ca6c:	b083      	sub	sp, #12
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800ca72:	bf00      	nop
 800ca74:	370c      	adds	r7, #12
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b08a      	sub	sp, #40	; 0x28
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	60f8      	str	r0, [r7, #12]
 800ca86:	60b9      	str	r1, [r7, #8]
 800ca88:	607a      	str	r2, [r7, #4]
 800ca8a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ca90:	2300      	movs	r3, #0
 800ca92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d101      	bne.n	800caa4 <HAL_SPI_TransmitReceive+0x26>
 800caa0:	2302      	movs	r3, #2
 800caa2:	e1fb      	b.n	800ce9c <HAL_SPI_TransmitReceive+0x41e>
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800caac:	f7fc f87c 	bl	8008ba8 <HAL_GetTick>
 800cab0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cab8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800cac0:	887b      	ldrh	r3, [r7, #2]
 800cac2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800cac4:	887b      	ldrh	r3, [r7, #2]
 800cac6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cac8:	7efb      	ldrb	r3, [r7, #27]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d00e      	beq.n	800caec <HAL_SPI_TransmitReceive+0x6e>
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cad4:	d106      	bne.n	800cae4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d102      	bne.n	800cae4 <HAL_SPI_TransmitReceive+0x66>
 800cade:	7efb      	ldrb	r3, [r7, #27]
 800cae0:	2b04      	cmp	r3, #4
 800cae2:	d003      	beq.n	800caec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800cae4:	2302      	movs	r3, #2
 800cae6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800caea:	e1cd      	b.n	800ce88 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d005      	beq.n	800cafe <HAL_SPI_TransmitReceive+0x80>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <HAL_SPI_TransmitReceive+0x80>
 800caf8:	887b      	ldrh	r3, [r7, #2]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d103      	bne.n	800cb06 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800cb04:	e1c0      	b.n	800ce88 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	2b04      	cmp	r3, #4
 800cb10:	d003      	beq.n	800cb1a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2205      	movs	r2, #5
 800cb16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	887a      	ldrh	r2, [r7, #2]
 800cb2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	887a      	ldrh	r2, [r7, #2]
 800cb32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	68ba      	ldr	r2, [r7, #8]
 800cb3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	887a      	ldrh	r2, [r7, #2]
 800cb40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	887a      	ldrh	r2, [r7, #2]
 800cb46:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2200      	movs	r2, #0
 800cb52:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	68db      	ldr	r3, [r3, #12]
 800cb58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cb5c:	d802      	bhi.n	800cb64 <HAL_SPI_TransmitReceive+0xe6>
 800cb5e:	8a3b      	ldrh	r3, [r7, #16]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d908      	bls.n	800cb76 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	685a      	ldr	r2, [r3, #4]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cb72:	605a      	str	r2, [r3, #4]
 800cb74:	e007      	b.n	800cb86 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	685a      	ldr	r2, [r3, #4]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cb84:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb90:	2b40      	cmp	r3, #64	; 0x40
 800cb92:	d007      	beq.n	800cba4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cba2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cbac:	d97c      	bls.n	800cca8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	685b      	ldr	r3, [r3, #4]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <HAL_SPI_TransmitReceive+0x13e>
 800cbb6:	8a7b      	ldrh	r3, [r7, #18]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d169      	bne.n	800cc90 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc0:	881a      	ldrh	r2, [r3, #0]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbcc:	1c9a      	adds	r2, r3, #2
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbd6:	b29b      	uxth	r3, r3
 800cbd8:	3b01      	subs	r3, #1
 800cbda:	b29a      	uxth	r2, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cbe0:	e056      	b.n	800cc90 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	f003 0302 	and.w	r3, r3, #2
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	d11b      	bne.n	800cc28 <HAL_SPI_TransmitReceive+0x1aa>
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d016      	beq.n	800cc28 <HAL_SPI_TransmitReceive+0x1aa>
 800cbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbfc:	2b01      	cmp	r3, #1
 800cbfe:	d113      	bne.n	800cc28 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc04:	881a      	ldrh	r2, [r3, #0]
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc10:	1c9a      	adds	r2, r3, #2
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	3b01      	subs	r3, #1
 800cc1e:	b29a      	uxth	r2, r3
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cc24:	2300      	movs	r3, #0
 800cc26:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	689b      	ldr	r3, [r3, #8]
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d11c      	bne.n	800cc70 <HAL_SPI_TransmitReceive+0x1f2>
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d016      	beq.n	800cc70 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	68da      	ldr	r2, [r3, #12]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc4c:	b292      	uxth	r2, r2
 800cc4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc54:	1c9a      	adds	r2, r3, #2
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	3b01      	subs	r3, #1
 800cc64:	b29a      	uxth	r2, r3
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cc70:	f7fb ff9a 	bl	8008ba8 <HAL_GetTick>
 800cc74:	4602      	mov	r2, r0
 800cc76:	69fb      	ldr	r3, [r7, #28]
 800cc78:	1ad3      	subs	r3, r2, r3
 800cc7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d807      	bhi.n	800cc90 <HAL_SPI_TransmitReceive+0x212>
 800cc80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc86:	d003      	beq.n	800cc90 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800cc88:	2303      	movs	r3, #3
 800cc8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800cc8e:	e0fb      	b.n	800ce88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d1a3      	bne.n	800cbe2 <HAL_SPI_TransmitReceive+0x164>
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cca0:	b29b      	uxth	r3, r3
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d19d      	bne.n	800cbe2 <HAL_SPI_TransmitReceive+0x164>
 800cca6:	e0df      	b.n	800ce68 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d003      	beq.n	800ccb8 <HAL_SPI_TransmitReceive+0x23a>
 800ccb0:	8a7b      	ldrh	r3, [r7, #18]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	f040 80cb 	bne.w	800ce4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d912      	bls.n	800cce8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc6:	881a      	ldrh	r2, [r3, #0]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccd2:	1c9a      	adds	r2, r3, #2
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccdc:	b29b      	uxth	r3, r3
 800ccde:	3b02      	subs	r3, #2
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cce6:	e0b2      	b.n	800ce4e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	330c      	adds	r3, #12
 800ccf2:	7812      	ldrb	r2, [r2, #0]
 800ccf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfa:	1c5a      	adds	r2, r3, #1
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	3b01      	subs	r3, #1
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd0e:	e09e      	b.n	800ce4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	f003 0302 	and.w	r3, r3, #2
 800cd1a:	2b02      	cmp	r3, #2
 800cd1c:	d134      	bne.n	800cd88 <HAL_SPI_TransmitReceive+0x30a>
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d02f      	beq.n	800cd88 <HAL_SPI_TransmitReceive+0x30a>
 800cd28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd2a:	2b01      	cmp	r3, #1
 800cd2c:	d12c      	bne.n	800cd88 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d912      	bls.n	800cd5e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3c:	881a      	ldrh	r2, [r3, #0]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd48:	1c9a      	adds	r2, r3, #2
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	3b02      	subs	r3, #2
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cd5c:	e012      	b.n	800cd84 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	330c      	adds	r3, #12
 800cd68:	7812      	ldrb	r2, [r2, #0]
 800cd6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd70:	1c5a      	adds	r2, r3, #1
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800cd84:	2300      	movs	r3, #0
 800cd86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	f003 0301 	and.w	r3, r3, #1
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d148      	bne.n	800ce28 <HAL_SPI_TransmitReceive+0x3aa>
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd9c:	b29b      	uxth	r3, r3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d042      	beq.n	800ce28 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cda8:	b29b      	uxth	r3, r3
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d923      	bls.n	800cdf6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	68da      	ldr	r2, [r3, #12]
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb8:	b292      	uxth	r2, r2
 800cdba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc0:	1c9a      	adds	r2, r3, #2
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cdcc:	b29b      	uxth	r3, r3
 800cdce:	3b02      	subs	r3, #2
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d81f      	bhi.n	800ce24 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cdf2:	605a      	str	r2, [r3, #4]
 800cdf4:	e016      	b.n	800ce24 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	f103 020c 	add.w	r2, r3, #12
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce02:	7812      	ldrb	r2, [r2, #0]
 800ce04:	b2d2      	uxtb	r2, r2
 800ce06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce0c:	1c5a      	adds	r2, r3, #1
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ce18:	b29b      	uxth	r3, r3
 800ce1a:	3b01      	subs	r3, #1
 800ce1c:	b29a      	uxth	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ce24:	2301      	movs	r3, #1
 800ce26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ce28:	f7fb febe 	bl	8008ba8 <HAL_GetTick>
 800ce2c:	4602      	mov	r2, r0
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	1ad3      	subs	r3, r2, r3
 800ce32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d803      	bhi.n	800ce40 <HAL_SPI_TransmitReceive+0x3c2>
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce3e:	d102      	bne.n	800ce46 <HAL_SPI_TransmitReceive+0x3c8>
 800ce40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d103      	bne.n	800ce4e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800ce46:	2303      	movs	r3, #3
 800ce48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800ce4c:	e01c      	b.n	800ce88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f47f af5b 	bne.w	800cd10 <HAL_SPI_TransmitReceive+0x292>
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f47f af54 	bne.w	800cd10 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ce68:	69fa      	ldr	r2, [r7, #28]
 800ce6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ce6c:	68f8      	ldr	r0, [r7, #12]
 800ce6e:	f000 f945 	bl	800d0fc <SPI_EndRxTxTransaction>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d006      	beq.n	800ce86 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800ce78:	2301      	movs	r3, #1
 800ce7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2220      	movs	r2, #32
 800ce82:	661a      	str	r2, [r3, #96]	; 0x60
 800ce84:	e000      	b.n	800ce88 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800ce86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ce98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3728      	adds	r7, #40	; 0x28
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ceb2:	b2db      	uxtb	r3, r3
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b088      	sub	sp, #32
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	603b      	str	r3, [r7, #0]
 800cecc:	4613      	mov	r3, r2
 800cece:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ced0:	f7fb fe6a 	bl	8008ba8 <HAL_GetTick>
 800ced4:	4602      	mov	r2, r0
 800ced6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced8:	1a9b      	subs	r3, r3, r2
 800ceda:	683a      	ldr	r2, [r7, #0]
 800cedc:	4413      	add	r3, r2
 800cede:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cee0:	f7fb fe62 	bl	8008ba8 <HAL_GetTick>
 800cee4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cee6:	4b39      	ldr	r3, [pc, #228]	; (800cfcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	015b      	lsls	r3, r3, #5
 800ceec:	0d1b      	lsrs	r3, r3, #20
 800ceee:	69fa      	ldr	r2, [r7, #28]
 800cef0:	fb02 f303 	mul.w	r3, r2, r3
 800cef4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cef6:	e054      	b.n	800cfa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cefe:	d050      	beq.n	800cfa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cf00:	f7fb fe52 	bl	8008ba8 <HAL_GetTick>
 800cf04:	4602      	mov	r2, r0
 800cf06:	69bb      	ldr	r3, [r7, #24]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	69fa      	ldr	r2, [r7, #28]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d902      	bls.n	800cf16 <SPI_WaitFlagStateUntilTimeout+0x56>
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d13d      	bne.n	800cf92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	685a      	ldr	r2, [r3, #4]
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cf24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf2e:	d111      	bne.n	800cf54 <SPI_WaitFlagStateUntilTimeout+0x94>
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf38:	d004      	beq.n	800cf44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	689b      	ldr	r3, [r3, #8]
 800cf3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf42:	d107      	bne.n	800cf54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	681a      	ldr	r2, [r3, #0]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf5c:	d10f      	bne.n	800cf7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf6c:	601a      	str	r2, [r3, #0]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cf8e:	2303      	movs	r3, #3
 800cf90:	e017      	b.n	800cfc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d101      	bne.n	800cf9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	3b01      	subs	r3, #1
 800cfa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	689a      	ldr	r2, [r3, #8]
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	4013      	ands	r3, r2
 800cfac:	68ba      	ldr	r2, [r7, #8]
 800cfae:	429a      	cmp	r2, r3
 800cfb0:	bf0c      	ite	eq
 800cfb2:	2301      	moveq	r3, #1
 800cfb4:	2300      	movne	r3, #0
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	461a      	mov	r2, r3
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d19b      	bne.n	800cef8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3720      	adds	r7, #32
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	bf00      	nop
 800cfcc:	20000020 	.word	0x20000020

0800cfd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b08a      	sub	sp, #40	; 0x28
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	60b9      	str	r1, [r7, #8]
 800cfda:	607a      	str	r2, [r7, #4]
 800cfdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cfe2:	f7fb fde1 	bl	8008ba8 <HAL_GetTick>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfea:	1a9b      	subs	r3, r3, r2
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	4413      	add	r3, r2
 800cff0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800cff2:	f7fb fdd9 	bl	8008ba8 <HAL_GetTick>
 800cff6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	330c      	adds	r3, #12
 800cffe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d000:	4b3d      	ldr	r3, [pc, #244]	; (800d0f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	4613      	mov	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	4413      	add	r3, r2
 800d00a:	00da      	lsls	r2, r3, #3
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	0d1b      	lsrs	r3, r3, #20
 800d010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d012:	fb02 f303 	mul.w	r3, r2, r3
 800d016:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d018:	e060      	b.n	800d0dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d020:	d107      	bne.n	800d032 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d104      	bne.n	800d032 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d030:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d038:	d050      	beq.n	800d0dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d03a:	f7fb fdb5 	bl	8008ba8 <HAL_GetTick>
 800d03e:	4602      	mov	r2, r0
 800d040:	6a3b      	ldr	r3, [r7, #32]
 800d042:	1ad3      	subs	r3, r2, r3
 800d044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d046:	429a      	cmp	r2, r3
 800d048:	d902      	bls.n	800d050 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d13d      	bne.n	800d0cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d05e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d068:	d111      	bne.n	800d08e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d072:	d004      	beq.n	800d07e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	689b      	ldr	r3, [r3, #8]
 800d078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d07c:	d107      	bne.n	800d08e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	681a      	ldr	r2, [r3, #0]
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d08c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d096:	d10f      	bne.n	800d0b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	681a      	ldr	r2, [r3, #0]
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0a6:	601a      	str	r2, [r3, #0]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d0b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	e010      	b.n	800d0ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d0cc:	69bb      	ldr	r3, [r7, #24]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d101      	bne.n	800d0d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800d0d6:	69bb      	ldr	r3, [r7, #24]
 800d0d8:	3b01      	subs	r3, #1
 800d0da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	689a      	ldr	r2, [r3, #8]
 800d0e2:	68bb      	ldr	r3, [r7, #8]
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d196      	bne.n	800d01a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3728      	adds	r7, #40	; 0x28
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20000020 	.word	0x20000020

0800d0fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af02      	add	r7, sp, #8
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	9300      	str	r3, [sp, #0]
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	2200      	movs	r2, #0
 800d110:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f7ff ff5b 	bl	800cfd0 <SPI_WaitFifoStateUntilTimeout>
 800d11a:	4603      	mov	r3, r0
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d007      	beq.n	800d130 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d124:	f043 0220 	orr.w	r2, r3, #32
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d12c:	2303      	movs	r3, #3
 800d12e:	e027      	b.n	800d180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	68bb      	ldr	r3, [r7, #8]
 800d136:	2200      	movs	r2, #0
 800d138:	2180      	movs	r1, #128	; 0x80
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f7ff fec0 	bl	800cec0 <SPI_WaitFlagStateUntilTimeout>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d007      	beq.n	800d156 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d14a:	f043 0220 	orr.w	r2, r3, #32
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d152:	2303      	movs	r3, #3
 800d154:	e014      	b.n	800d180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	9300      	str	r3, [sp, #0]
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	2200      	movs	r2, #0
 800d15e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	f7ff ff34 	bl	800cfd0 <SPI_WaitFifoStateUntilTimeout>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d007      	beq.n	800d17e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d172:	f043 0220 	orr.w	r2, r3, #32
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d17a:	2303      	movs	r3, #3
 800d17c:	e000      	b.n	800d180 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d101      	bne.n	800d19a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d196:	2301      	movs	r3, #1
 800d198:	e040      	b.n	800d21c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d106      	bne.n	800d1b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f000 f83a 	bl	800d224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2224      	movs	r2, #36	; 0x24
 800d1b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f022 0201 	bic.w	r2, r2, #1
 800d1c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 f8ca 	bl	800d360 <UART_SetConfig>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b01      	cmp	r3, #1
 800d1d0:	d101      	bne.n	800d1d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	e022      	b.n	800d21c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d002      	beq.n	800d1e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 fb76 	bl	800d8d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	685a      	ldr	r2, [r3, #4]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d1f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	689a      	ldr	r2, [r3, #8]
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	681a      	ldr	r2, [r3, #0]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f042 0201 	orr.w	r2, r2, #1
 800d212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fbfd 	bl	800da14 <UART_CheckIdleState>
 800d21a:	4603      	mov	r3, r0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800d22c:	bf00      	nop
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b08a      	sub	sp, #40	; 0x28
 800d23c:	af02      	add	r7, sp, #8
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	603b      	str	r3, [r7, #0]
 800d244:	4613      	mov	r3, r2
 800d246:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d24c:	2b20      	cmp	r3, #32
 800d24e:	f040 8082 	bne.w	800d356 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d002      	beq.n	800d25e <HAL_UART_Transmit+0x26>
 800d258:	88fb      	ldrh	r3, [r7, #6]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d101      	bne.n	800d262 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d25e:	2301      	movs	r3, #1
 800d260:	e07a      	b.n	800d358 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d101      	bne.n	800d270 <HAL_UART_Transmit+0x38>
 800d26c:	2302      	movs	r3, #2
 800d26e:	e073      	b.n	800d358 <HAL_UART_Transmit+0x120>
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2201      	movs	r2, #1
 800d274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2221      	movs	r2, #33	; 0x21
 800d284:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d286:	f7fb fc8f 	bl	8008ba8 <HAL_GetTick>
 800d28a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	88fa      	ldrh	r2, [r7, #6]
 800d290:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	88fa      	ldrh	r2, [r7, #6]
 800d298:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2a4:	d108      	bne.n	800d2b8 <HAL_UART_Transmit+0x80>
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	691b      	ldr	r3, [r3, #16]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d104      	bne.n	800d2b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	61bb      	str	r3, [r7, #24]
 800d2b6:	e003      	b.n	800d2c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800d2b8:	68bb      	ldr	r3, [r7, #8]
 800d2ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800d2c8:	e02d      	b.n	800d326 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	2180      	movs	r1, #128	; 0x80
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f000 fbe6 	bl	800daa6 <UART_WaitOnFlagUntilTimeout>
 800d2da:	4603      	mov	r3, r0
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d001      	beq.n	800d2e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800d2e0:	2303      	movs	r3, #3
 800d2e2:	e039      	b.n	800d358 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d10b      	bne.n	800d302 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d2ea:	69bb      	ldr	r3, [r7, #24]
 800d2ec:	881a      	ldrh	r2, [r3, #0]
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2f6:	b292      	uxth	r2, r2
 800d2f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	3302      	adds	r3, #2
 800d2fe:	61bb      	str	r3, [r7, #24]
 800d300:	e008      	b.n	800d314 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	781a      	ldrb	r2, [r3, #0]
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	b292      	uxth	r2, r2
 800d30c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	3301      	adds	r3, #1
 800d312:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	3b01      	subs	r3, #1
 800d31e:	b29a      	uxth	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d32c:	b29b      	uxth	r3, r3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1cb      	bne.n	800d2ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	2200      	movs	r2, #0
 800d33a:	2140      	movs	r1, #64	; 0x40
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f000 fbb2 	bl	800daa6 <UART_WaitOnFlagUntilTimeout>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d001      	beq.n	800d34c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800d348:	2303      	movs	r3, #3
 800d34a:	e005      	b.n	800d358 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2220      	movs	r2, #32
 800d350:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d352:	2300      	movs	r3, #0
 800d354:	e000      	b.n	800d358 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800d356:	2302      	movs	r3, #2
  }
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3720      	adds	r7, #32
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d364:	b08a      	sub	sp, #40	; 0x28
 800d366:	af00      	add	r7, sp, #0
 800d368:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d36a:	2300      	movs	r3, #0
 800d36c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	689a      	ldr	r2, [r3, #8]
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	691b      	ldr	r3, [r3, #16]
 800d378:	431a      	orrs	r2, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	695b      	ldr	r3, [r3, #20]
 800d37e:	431a      	orrs	r2, r3
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	69db      	ldr	r3, [r3, #28]
 800d384:	4313      	orrs	r3, r2
 800d386:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	4ba4      	ldr	r3, [pc, #656]	; (800d620 <UART_SetConfig+0x2c0>)
 800d390:	4013      	ands	r3, r2
 800d392:	68fa      	ldr	r2, [r7, #12]
 800d394:	6812      	ldr	r2, [r2, #0]
 800d396:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d398:	430b      	orrs	r3, r1
 800d39a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	68da      	ldr	r2, [r3, #12]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	430a      	orrs	r2, r1
 800d3b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	699b      	ldr	r3, [r3, #24]
 800d3b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	4a99      	ldr	r2, [pc, #612]	; (800d624 <UART_SetConfig+0x2c4>)
 800d3be:	4293      	cmp	r3, r2
 800d3c0:	d004      	beq.n	800d3cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	6a1b      	ldr	r3, [r3, #32]
 800d3c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3dc:	430a      	orrs	r2, r1
 800d3de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	4a90      	ldr	r2, [pc, #576]	; (800d628 <UART_SetConfig+0x2c8>)
 800d3e6:	4293      	cmp	r3, r2
 800d3e8:	d126      	bne.n	800d438 <UART_SetConfig+0xd8>
 800d3ea:	4b90      	ldr	r3, [pc, #576]	; (800d62c <UART_SetConfig+0x2cc>)
 800d3ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3f0:	f003 0303 	and.w	r3, r3, #3
 800d3f4:	2b03      	cmp	r3, #3
 800d3f6:	d81b      	bhi.n	800d430 <UART_SetConfig+0xd0>
 800d3f8:	a201      	add	r2, pc, #4	; (adr r2, 800d400 <UART_SetConfig+0xa0>)
 800d3fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3fe:	bf00      	nop
 800d400:	0800d411 	.word	0x0800d411
 800d404:	0800d421 	.word	0x0800d421
 800d408:	0800d419 	.word	0x0800d419
 800d40c:	0800d429 	.word	0x0800d429
 800d410:	2301      	movs	r3, #1
 800d412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d416:	e116      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d418:	2302      	movs	r3, #2
 800d41a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d41e:	e112      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d420:	2304      	movs	r3, #4
 800d422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d426:	e10e      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d428:	2308      	movs	r3, #8
 800d42a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d42e:	e10a      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d430:	2310      	movs	r3, #16
 800d432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d436:	e106      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4a7c      	ldr	r2, [pc, #496]	; (800d630 <UART_SetConfig+0x2d0>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d138      	bne.n	800d4b4 <UART_SetConfig+0x154>
 800d442:	4b7a      	ldr	r3, [pc, #488]	; (800d62c <UART_SetConfig+0x2cc>)
 800d444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d448:	f003 030c 	and.w	r3, r3, #12
 800d44c:	2b0c      	cmp	r3, #12
 800d44e:	d82d      	bhi.n	800d4ac <UART_SetConfig+0x14c>
 800d450:	a201      	add	r2, pc, #4	; (adr r2, 800d458 <UART_SetConfig+0xf8>)
 800d452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d456:	bf00      	nop
 800d458:	0800d48d 	.word	0x0800d48d
 800d45c:	0800d4ad 	.word	0x0800d4ad
 800d460:	0800d4ad 	.word	0x0800d4ad
 800d464:	0800d4ad 	.word	0x0800d4ad
 800d468:	0800d49d 	.word	0x0800d49d
 800d46c:	0800d4ad 	.word	0x0800d4ad
 800d470:	0800d4ad 	.word	0x0800d4ad
 800d474:	0800d4ad 	.word	0x0800d4ad
 800d478:	0800d495 	.word	0x0800d495
 800d47c:	0800d4ad 	.word	0x0800d4ad
 800d480:	0800d4ad 	.word	0x0800d4ad
 800d484:	0800d4ad 	.word	0x0800d4ad
 800d488:	0800d4a5 	.word	0x0800d4a5
 800d48c:	2300      	movs	r3, #0
 800d48e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d492:	e0d8      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d494:	2302      	movs	r3, #2
 800d496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d49a:	e0d4      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d49c:	2304      	movs	r3, #4
 800d49e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4a2:	e0d0      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d4a4:	2308      	movs	r3, #8
 800d4a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4aa:	e0cc      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d4ac:	2310      	movs	r3, #16
 800d4ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4b2:	e0c8      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4a5e      	ldr	r2, [pc, #376]	; (800d634 <UART_SetConfig+0x2d4>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d125      	bne.n	800d50a <UART_SetConfig+0x1aa>
 800d4be:	4b5b      	ldr	r3, [pc, #364]	; (800d62c <UART_SetConfig+0x2cc>)
 800d4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d4c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d4c8:	2b30      	cmp	r3, #48	; 0x30
 800d4ca:	d016      	beq.n	800d4fa <UART_SetConfig+0x19a>
 800d4cc:	2b30      	cmp	r3, #48	; 0x30
 800d4ce:	d818      	bhi.n	800d502 <UART_SetConfig+0x1a2>
 800d4d0:	2b20      	cmp	r3, #32
 800d4d2:	d00a      	beq.n	800d4ea <UART_SetConfig+0x18a>
 800d4d4:	2b20      	cmp	r3, #32
 800d4d6:	d814      	bhi.n	800d502 <UART_SetConfig+0x1a2>
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d002      	beq.n	800d4e2 <UART_SetConfig+0x182>
 800d4dc:	2b10      	cmp	r3, #16
 800d4de:	d008      	beq.n	800d4f2 <UART_SetConfig+0x192>
 800d4e0:	e00f      	b.n	800d502 <UART_SetConfig+0x1a2>
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4e8:	e0ad      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d4ea:	2302      	movs	r3, #2
 800d4ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4f0:	e0a9      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d4f2:	2304      	movs	r3, #4
 800d4f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d4f8:	e0a5      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d4fa:	2308      	movs	r3, #8
 800d4fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d500:	e0a1      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d502:	2310      	movs	r3, #16
 800d504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d508:	e09d      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a4a      	ldr	r2, [pc, #296]	; (800d638 <UART_SetConfig+0x2d8>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d125      	bne.n	800d560 <UART_SetConfig+0x200>
 800d514:	4b45      	ldr	r3, [pc, #276]	; (800d62c <UART_SetConfig+0x2cc>)
 800d516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d51a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d51e:	2bc0      	cmp	r3, #192	; 0xc0
 800d520:	d016      	beq.n	800d550 <UART_SetConfig+0x1f0>
 800d522:	2bc0      	cmp	r3, #192	; 0xc0
 800d524:	d818      	bhi.n	800d558 <UART_SetConfig+0x1f8>
 800d526:	2b80      	cmp	r3, #128	; 0x80
 800d528:	d00a      	beq.n	800d540 <UART_SetConfig+0x1e0>
 800d52a:	2b80      	cmp	r3, #128	; 0x80
 800d52c:	d814      	bhi.n	800d558 <UART_SetConfig+0x1f8>
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d002      	beq.n	800d538 <UART_SetConfig+0x1d8>
 800d532:	2b40      	cmp	r3, #64	; 0x40
 800d534:	d008      	beq.n	800d548 <UART_SetConfig+0x1e8>
 800d536:	e00f      	b.n	800d558 <UART_SetConfig+0x1f8>
 800d538:	2300      	movs	r3, #0
 800d53a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d53e:	e082      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d540:	2302      	movs	r3, #2
 800d542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d546:	e07e      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d548:	2304      	movs	r3, #4
 800d54a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d54e:	e07a      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d550:	2308      	movs	r3, #8
 800d552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d556:	e076      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d558:	2310      	movs	r3, #16
 800d55a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d55e:	e072      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4a35      	ldr	r2, [pc, #212]	; (800d63c <UART_SetConfig+0x2dc>)
 800d566:	4293      	cmp	r3, r2
 800d568:	d12a      	bne.n	800d5c0 <UART_SetConfig+0x260>
 800d56a:	4b30      	ldr	r3, [pc, #192]	; (800d62c <UART_SetConfig+0x2cc>)
 800d56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d578:	d01a      	beq.n	800d5b0 <UART_SetConfig+0x250>
 800d57a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d57e:	d81b      	bhi.n	800d5b8 <UART_SetConfig+0x258>
 800d580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d584:	d00c      	beq.n	800d5a0 <UART_SetConfig+0x240>
 800d586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d58a:	d815      	bhi.n	800d5b8 <UART_SetConfig+0x258>
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d003      	beq.n	800d598 <UART_SetConfig+0x238>
 800d590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d594:	d008      	beq.n	800d5a8 <UART_SetConfig+0x248>
 800d596:	e00f      	b.n	800d5b8 <UART_SetConfig+0x258>
 800d598:	2300      	movs	r3, #0
 800d59a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d59e:	e052      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5a6:	e04e      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d5a8:	2304      	movs	r3, #4
 800d5aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5ae:	e04a      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d5b0:	2308      	movs	r3, #8
 800d5b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5b6:	e046      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d5b8:	2310      	movs	r3, #16
 800d5ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5be:	e042      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a17      	ldr	r2, [pc, #92]	; (800d624 <UART_SetConfig+0x2c4>)
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	d13a      	bne.n	800d640 <UART_SetConfig+0x2e0>
 800d5ca:	4b18      	ldr	r3, [pc, #96]	; (800d62c <UART_SetConfig+0x2cc>)
 800d5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d5d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d5d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d5d8:	d01a      	beq.n	800d610 <UART_SetConfig+0x2b0>
 800d5da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d5de:	d81b      	bhi.n	800d618 <UART_SetConfig+0x2b8>
 800d5e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5e4:	d00c      	beq.n	800d600 <UART_SetConfig+0x2a0>
 800d5e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5ea:	d815      	bhi.n	800d618 <UART_SetConfig+0x2b8>
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d003      	beq.n	800d5f8 <UART_SetConfig+0x298>
 800d5f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d5f4:	d008      	beq.n	800d608 <UART_SetConfig+0x2a8>
 800d5f6:	e00f      	b.n	800d618 <UART_SetConfig+0x2b8>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d5fe:	e022      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d600:	2302      	movs	r3, #2
 800d602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d606:	e01e      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d608:	2304      	movs	r3, #4
 800d60a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d60e:	e01a      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d610:	2308      	movs	r3, #8
 800d612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d616:	e016      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d618:	2310      	movs	r3, #16
 800d61a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800d61e:	e012      	b.n	800d646 <UART_SetConfig+0x2e6>
 800d620:	efff69f3 	.word	0xefff69f3
 800d624:	40008000 	.word	0x40008000
 800d628:	40013800 	.word	0x40013800
 800d62c:	40021000 	.word	0x40021000
 800d630:	40004400 	.word	0x40004400
 800d634:	40004800 	.word	0x40004800
 800d638:	40004c00 	.word	0x40004c00
 800d63c:	40005000 	.word	0x40005000
 800d640:	2310      	movs	r3, #16
 800d642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a9f      	ldr	r2, [pc, #636]	; (800d8c8 <UART_SetConfig+0x568>)
 800d64c:	4293      	cmp	r3, r2
 800d64e:	d17a      	bne.n	800d746 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d650:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d654:	2b08      	cmp	r3, #8
 800d656:	d824      	bhi.n	800d6a2 <UART_SetConfig+0x342>
 800d658:	a201      	add	r2, pc, #4	; (adr r2, 800d660 <UART_SetConfig+0x300>)
 800d65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d65e:	bf00      	nop
 800d660:	0800d685 	.word	0x0800d685
 800d664:	0800d6a3 	.word	0x0800d6a3
 800d668:	0800d68d 	.word	0x0800d68d
 800d66c:	0800d6a3 	.word	0x0800d6a3
 800d670:	0800d693 	.word	0x0800d693
 800d674:	0800d6a3 	.word	0x0800d6a3
 800d678:	0800d6a3 	.word	0x0800d6a3
 800d67c:	0800d6a3 	.word	0x0800d6a3
 800d680:	0800d69b 	.word	0x0800d69b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d684:	f7fe fc06 	bl	800be94 <HAL_RCC_GetPCLK1Freq>
 800d688:	61f8      	str	r0, [r7, #28]
        break;
 800d68a:	e010      	b.n	800d6ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d68c:	4b8f      	ldr	r3, [pc, #572]	; (800d8cc <UART_SetConfig+0x56c>)
 800d68e:	61fb      	str	r3, [r7, #28]
        break;
 800d690:	e00d      	b.n	800d6ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d692:	f7fe fb67 	bl	800bd64 <HAL_RCC_GetSysClockFreq>
 800d696:	61f8      	str	r0, [r7, #28]
        break;
 800d698:	e009      	b.n	800d6ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d69a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d69e:	61fb      	str	r3, [r7, #28]
        break;
 800d6a0:	e005      	b.n	800d6ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d6ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f000 80fb 	beq.w	800d8ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	685a      	ldr	r2, [r3, #4]
 800d6ba:	4613      	mov	r3, r2
 800d6bc:	005b      	lsls	r3, r3, #1
 800d6be:	4413      	add	r3, r2
 800d6c0:	69fa      	ldr	r2, [r7, #28]
 800d6c2:	429a      	cmp	r2, r3
 800d6c4:	d305      	bcc.n	800d6d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	685b      	ldr	r3, [r3, #4]
 800d6ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800d6cc:	69fa      	ldr	r2, [r7, #28]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d903      	bls.n	800d6da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d6d8:	e0e8      	b.n	800d8ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800d6da:	69fb      	ldr	r3, [r7, #28]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	461c      	mov	r4, r3
 800d6e0:	4615      	mov	r5, r2
 800d6e2:	f04f 0200 	mov.w	r2, #0
 800d6e6:	f04f 0300 	mov.w	r3, #0
 800d6ea:	022b      	lsls	r3, r5, #8
 800d6ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800d6f0:	0222      	lsls	r2, r4, #8
 800d6f2:	68f9      	ldr	r1, [r7, #12]
 800d6f4:	6849      	ldr	r1, [r1, #4]
 800d6f6:	0849      	lsrs	r1, r1, #1
 800d6f8:	2000      	movs	r0, #0
 800d6fa:	4688      	mov	r8, r1
 800d6fc:	4681      	mov	r9, r0
 800d6fe:	eb12 0a08 	adds.w	sl, r2, r8
 800d702:	eb43 0b09 	adc.w	fp, r3, r9
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	685b      	ldr	r3, [r3, #4]
 800d70a:	2200      	movs	r2, #0
 800d70c:	603b      	str	r3, [r7, #0]
 800d70e:	607a      	str	r2, [r7, #4]
 800d710:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d714:	4650      	mov	r0, sl
 800d716:	4659      	mov	r1, fp
 800d718:	f7f6 ffb6 	bl	8004688 <__aeabi_uldivmod>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4613      	mov	r3, r2
 800d722:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d72a:	d308      	bcc.n	800d73e <UART_SetConfig+0x3de>
 800d72c:	69bb      	ldr	r3, [r7, #24]
 800d72e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d732:	d204      	bcs.n	800d73e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	69ba      	ldr	r2, [r7, #24]
 800d73a:	60da      	str	r2, [r3, #12]
 800d73c:	e0b6      	b.n	800d8ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800d73e:	2301      	movs	r3, #1
 800d740:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d744:	e0b2      	b.n	800d8ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	69db      	ldr	r3, [r3, #28]
 800d74a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d74e:	d15e      	bne.n	800d80e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800d750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d754:	2b08      	cmp	r3, #8
 800d756:	d828      	bhi.n	800d7aa <UART_SetConfig+0x44a>
 800d758:	a201      	add	r2, pc, #4	; (adr r2, 800d760 <UART_SetConfig+0x400>)
 800d75a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d75e:	bf00      	nop
 800d760:	0800d785 	.word	0x0800d785
 800d764:	0800d78d 	.word	0x0800d78d
 800d768:	0800d795 	.word	0x0800d795
 800d76c:	0800d7ab 	.word	0x0800d7ab
 800d770:	0800d79b 	.word	0x0800d79b
 800d774:	0800d7ab 	.word	0x0800d7ab
 800d778:	0800d7ab 	.word	0x0800d7ab
 800d77c:	0800d7ab 	.word	0x0800d7ab
 800d780:	0800d7a3 	.word	0x0800d7a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d784:	f7fe fb86 	bl	800be94 <HAL_RCC_GetPCLK1Freq>
 800d788:	61f8      	str	r0, [r7, #28]
        break;
 800d78a:	e014      	b.n	800d7b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d78c:	f7fe fb98 	bl	800bec0 <HAL_RCC_GetPCLK2Freq>
 800d790:	61f8      	str	r0, [r7, #28]
        break;
 800d792:	e010      	b.n	800d7b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d794:	4b4d      	ldr	r3, [pc, #308]	; (800d8cc <UART_SetConfig+0x56c>)
 800d796:	61fb      	str	r3, [r7, #28]
        break;
 800d798:	e00d      	b.n	800d7b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d79a:	f7fe fae3 	bl	800bd64 <HAL_RCC_GetSysClockFreq>
 800d79e:	61f8      	str	r0, [r7, #28]
        break;
 800d7a0:	e009      	b.n	800d7b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d7a6:	61fb      	str	r3, [r7, #28]
        break;
 800d7a8:	e005      	b.n	800d7b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d7b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d077      	beq.n	800d8ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	005a      	lsls	r2, r3, #1
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	685b      	ldr	r3, [r3, #4]
 800d7c4:	085b      	lsrs	r3, r3, #1
 800d7c6:	441a      	add	r2, r3
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7d2:	69bb      	ldr	r3, [r7, #24]
 800d7d4:	2b0f      	cmp	r3, #15
 800d7d6:	d916      	bls.n	800d806 <UART_SetConfig+0x4a6>
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7de:	d212      	bcs.n	800d806 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	f023 030f 	bic.w	r3, r3, #15
 800d7e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	085b      	lsrs	r3, r3, #1
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	f003 0307 	and.w	r3, r3, #7
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	8afb      	ldrh	r3, [r7, #22]
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	8afa      	ldrh	r2, [r7, #22]
 800d802:	60da      	str	r2, [r3, #12]
 800d804:	e052      	b.n	800d8ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d806:	2301      	movs	r3, #1
 800d808:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800d80c:	e04e      	b.n	800d8ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d80e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d812:	2b08      	cmp	r3, #8
 800d814:	d827      	bhi.n	800d866 <UART_SetConfig+0x506>
 800d816:	a201      	add	r2, pc, #4	; (adr r2, 800d81c <UART_SetConfig+0x4bc>)
 800d818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d81c:	0800d841 	.word	0x0800d841
 800d820:	0800d849 	.word	0x0800d849
 800d824:	0800d851 	.word	0x0800d851
 800d828:	0800d867 	.word	0x0800d867
 800d82c:	0800d857 	.word	0x0800d857
 800d830:	0800d867 	.word	0x0800d867
 800d834:	0800d867 	.word	0x0800d867
 800d838:	0800d867 	.word	0x0800d867
 800d83c:	0800d85f 	.word	0x0800d85f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d840:	f7fe fb28 	bl	800be94 <HAL_RCC_GetPCLK1Freq>
 800d844:	61f8      	str	r0, [r7, #28]
        break;
 800d846:	e014      	b.n	800d872 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d848:	f7fe fb3a 	bl	800bec0 <HAL_RCC_GetPCLK2Freq>
 800d84c:	61f8      	str	r0, [r7, #28]
        break;
 800d84e:	e010      	b.n	800d872 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d850:	4b1e      	ldr	r3, [pc, #120]	; (800d8cc <UART_SetConfig+0x56c>)
 800d852:	61fb      	str	r3, [r7, #28]
        break;
 800d854:	e00d      	b.n	800d872 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d856:	f7fe fa85 	bl	800bd64 <HAL_RCC_GetSysClockFreq>
 800d85a:	61f8      	str	r0, [r7, #28]
        break;
 800d85c:	e009      	b.n	800d872 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d85e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d862:	61fb      	str	r3, [r7, #28]
        break;
 800d864:	e005      	b.n	800d872 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800d866:	2300      	movs	r3, #0
 800d868:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800d86a:	2301      	movs	r3, #1
 800d86c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800d870:	bf00      	nop
    }

    if (pclk != 0U)
 800d872:	69fb      	ldr	r3, [r7, #28]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d019      	beq.n	800d8ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	085a      	lsrs	r2, r3, #1
 800d87e:	69fb      	ldr	r3, [r7, #28]
 800d880:	441a      	add	r2, r3
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	fbb2 f3f3 	udiv	r3, r2, r3
 800d88a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	2b0f      	cmp	r3, #15
 800d890:	d909      	bls.n	800d8a6 <UART_SetConfig+0x546>
 800d892:	69bb      	ldr	r3, [r7, #24]
 800d894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d898:	d205      	bcs.n	800d8a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	60da      	str	r2, [r3, #12]
 800d8a4:	e002      	b.n	800d8ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d8b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3728      	adds	r7, #40	; 0x28
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d8c6:	bf00      	nop
 800d8c8:	40008000 	.word	0x40008000
 800d8cc:	00f42400 	.word	0x00f42400

0800d8d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8dc:	f003 0301 	and.w	r3, r3, #1
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00a      	beq.n	800d8fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8fe:	f003 0302 	and.w	r3, r3, #2
 800d902:	2b00      	cmp	r3, #0
 800d904:	d00a      	beq.n	800d91c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	430a      	orrs	r2, r1
 800d91a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d920:	f003 0304 	and.w	r3, r3, #4
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00a      	beq.n	800d93e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	685b      	ldr	r3, [r3, #4]
 800d92e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	430a      	orrs	r2, r1
 800d93c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d942:	f003 0308 	and.w	r3, r3, #8
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	430a      	orrs	r2, r1
 800d95e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d964:	f003 0310 	and.w	r3, r3, #16
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00a      	beq.n	800d982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	689b      	ldr	r3, [r3, #8]
 800d972:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	430a      	orrs	r2, r1
 800d980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d986:	f003 0320 	and.w	r3, r3, #32
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00a      	beq.n	800d9a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	689b      	ldr	r3, [r3, #8]
 800d994:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	430a      	orrs	r2, r1
 800d9a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d01a      	beq.n	800d9e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	685b      	ldr	r3, [r3, #4]
 800d9b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	430a      	orrs	r2, r1
 800d9c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d9ce:	d10a      	bne.n	800d9e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	430a      	orrs	r2, r1
 800d9e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00a      	beq.n	800da08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	685b      	ldr	r3, [r3, #4]
 800d9f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	430a      	orrs	r2, r1
 800da06:	605a      	str	r2, [r3, #4]
  }
}
 800da08:	bf00      	nop
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af02      	add	r7, sp, #8
 800da1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2200      	movs	r2, #0
 800da20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800da24:	f7fb f8c0 	bl	8008ba8 <HAL_GetTick>
 800da28:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f003 0308 	and.w	r3, r3, #8
 800da34:	2b08      	cmp	r3, #8
 800da36:	d10e      	bne.n	800da56 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800da3c:	9300      	str	r3, [sp, #0]
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2200      	movs	r2, #0
 800da42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f82d 	bl	800daa6 <UART_WaitOnFlagUntilTimeout>
 800da4c:	4603      	mov	r3, r0
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d001      	beq.n	800da56 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da52:	2303      	movs	r3, #3
 800da54:	e023      	b.n	800da9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f003 0304 	and.w	r3, r3, #4
 800da60:	2b04      	cmp	r3, #4
 800da62:	d10e      	bne.n	800da82 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800da68:	9300      	str	r3, [sp, #0]
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2200      	movs	r2, #0
 800da6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 f817 	bl	800daa6 <UART_WaitOnFlagUntilTimeout>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d001      	beq.n	800da82 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da7e:	2303      	movs	r3, #3
 800da80:	e00d      	b.n	800da9e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2220      	movs	r2, #32
 800da86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2220      	movs	r2, #32
 800da8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b09c      	sub	sp, #112	; 0x70
 800daaa:	af00      	add	r7, sp, #0
 800daac:	60f8      	str	r0, [r7, #12]
 800daae:	60b9      	str	r1, [r7, #8]
 800dab0:	603b      	str	r3, [r7, #0]
 800dab2:	4613      	mov	r3, r2
 800dab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dab6:	e0a5      	b.n	800dc04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800daba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dabe:	f000 80a1 	beq.w	800dc04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dac2:	f7fb f871 	bl	8008ba8 <HAL_GetTick>
 800dac6:	4602      	mov	r2, r0
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800dace:	429a      	cmp	r2, r3
 800dad0:	d302      	bcc.n	800dad8 <UART_WaitOnFlagUntilTimeout+0x32>
 800dad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d13e      	bne.n	800db56 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dae0:	e853 3f00 	ldrex	r3, [r3]
 800dae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800daec:	667b      	str	r3, [r7, #100]	; 0x64
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	461a      	mov	r2, r3
 800daf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800daf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800daf8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dafa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800dafc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dafe:	e841 2300 	strex	r3, r2, [r1]
 800db02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800db04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1e6      	bne.n	800dad8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	3308      	adds	r3, #8
 800db10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db14:	e853 3f00 	ldrex	r3, [r3]
 800db18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800db1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1c:	f023 0301 	bic.w	r3, r3, #1
 800db20:	663b      	str	r3, [r7, #96]	; 0x60
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	3308      	adds	r3, #8
 800db28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db2a:	64ba      	str	r2, [r7, #72]	; 0x48
 800db2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800db30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800db32:	e841 2300 	strex	r3, r2, [r1]
 800db36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800db38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d1e5      	bne.n	800db0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2220      	movs	r2, #32
 800db42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2220      	movs	r2, #32
 800db48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	2200      	movs	r2, #0
 800db4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800db52:	2303      	movs	r3, #3
 800db54:	e067      	b.n	800dc26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f003 0304 	and.w	r3, r3, #4
 800db60:	2b00      	cmp	r3, #0
 800db62:	d04f      	beq.n	800dc04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	69db      	ldr	r3, [r3, #28]
 800db6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800db6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800db72:	d147      	bne.n	800dc04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db7c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db86:	e853 3f00 	ldrex	r3, [r3]
 800db8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800db8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800db92:	66fb      	str	r3, [r7, #108]	; 0x6c
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	461a      	mov	r2, r3
 800db9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db9c:	637b      	str	r3, [r7, #52]	; 0x34
 800db9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dba4:	e841 2300 	strex	r3, r2, [r1]
 800dba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800dbaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d1e6      	bne.n	800db7e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	3308      	adds	r3, #8
 800dbb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	e853 3f00 	ldrex	r3, [r3]
 800dbbe:	613b      	str	r3, [r7, #16]
   return(result);
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	f023 0301 	bic.w	r3, r3, #1
 800dbc6:	66bb      	str	r3, [r7, #104]	; 0x68
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	3308      	adds	r3, #8
 800dbce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dbd0:	623a      	str	r2, [r7, #32]
 800dbd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd4:	69f9      	ldr	r1, [r7, #28]
 800dbd6:	6a3a      	ldr	r2, [r7, #32]
 800dbd8:	e841 2300 	strex	r3, r2, [r1]
 800dbdc:	61bb      	str	r3, [r7, #24]
   return(result);
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d1e5      	bne.n	800dbb0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	2220      	movs	r2, #32
 800dbe8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	2220      	movs	r2, #32
 800dbee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	2220      	movs	r2, #32
 800dbf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800dc00:	2303      	movs	r3, #3
 800dc02:	e010      	b.n	800dc26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	69da      	ldr	r2, [r3, #28]
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	4013      	ands	r3, r2
 800dc0e:	68ba      	ldr	r2, [r7, #8]
 800dc10:	429a      	cmp	r2, r3
 800dc12:	bf0c      	ite	eq
 800dc14:	2301      	moveq	r3, #1
 800dc16:	2300      	movne	r3, #0
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	79fb      	ldrb	r3, [r7, #7]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	f43f af4a 	beq.w	800dab8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dc24:	2300      	movs	r3, #0
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3770      	adds	r7, #112	; 0x70
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 800dc2e:	b5b0      	push	{r4, r5, r7, lr}
 800dc30:	b0ce      	sub	sp, #312	; 0x138
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	4605      	mov	r5, r0
 800dc36:	460c      	mov	r4, r1
 800dc38:	4610      	mov	r0, r2
 800dc3a:	4619      	mov	r1, r3
 800dc3c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dc40:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800dc44:	462a      	mov	r2, r5
 800dc46:	701a      	strb	r2, [r3, #0]
 800dc48:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dc4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800dc50:	4622      	mov	r2, r4
 800dc52:	801a      	strh	r2, [r3, #0]
 800dc54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dc58:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	801a      	strh	r2, [r3, #0]
 800dc60:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dc64:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800dc68:	460a      	mov	r2, r1
 800dc6a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800dc6c:	f107 030c 	add.w	r3, r7, #12
 800dc70:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800dc74:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800dc78:	3308      	adds	r3, #8
 800dc7a:	f107 020c 	add.w	r2, r7, #12
 800dc7e:	4413      	add	r3, r2
 800dc80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800dc84:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800dc88:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800dc8c:	4413      	add	r3, r2
 800dc8e:	3309      	adds	r3, #9
 800dc90:	f107 020c 	add.w	r2, r7, #12
 800dc94:	4413      	add	r3, r2
 800dc96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dc9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800dc9e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800dca2:	2200      	movs	r2, #0
 800dca4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800dca6:	2300      	movs	r3, #0
 800dca8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 800dcac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dcb0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800dcb4:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800dcb8:	7812      	ldrb	r2, [r2, #0]
 800dcba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dcbc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 800dcc6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dcca:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800dcce:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800dcd2:	8812      	ldrh	r2, [r2, #0]
 800dcd4:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800dcd8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dcdc:	3302      	adds	r3, #2
 800dcde:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 800dce2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dce6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800dcea:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800dcee:	8812      	ldrh	r2, [r2, #0]
 800dcf0:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800dcf4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dcf8:	3302      	adds	r3, #2
 800dcfa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 800dcfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dd02:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800dd06:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800dd0a:	7812      	ldrb	r2, [r2, #0]
 800dd0c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800dd0e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dd12:	3301      	adds	r3, #1
 800dd14:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 800dd18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dd1c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800dd20:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800dd22:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dd26:	3301      	adds	r3, #1
 800dd28:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 800dd2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dd30:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800dd34:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800dd36:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 800dd40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dd44:	3308      	adds	r3, #8
 800dd46:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800dd4a:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f003 fc74 	bl	801163c <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 800dd54:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800dd58:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800dd5c:	4413      	add	r3, r2
 800dd5e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 800dd62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dd66:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800dd6a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800dd6c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dd70:	3301      	adds	r3, #1
 800dd72:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 800dd76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dd7a:	3301      	adds	r3, #1
 800dd7c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800dd80:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800dd84:	4618      	mov	r0, r3
 800dd86:	f003 fc59 	bl	801163c <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 800dd8a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800dd8e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800dd92:	4413      	add	r3, r2
 800dd94:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 800dd98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd9c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800dda0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800dda2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dda6:	3302      	adds	r3, #2
 800dda8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 800ddac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ddb0:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800ddb4:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800ddb6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ddba:	3302      	adds	r3, #2
 800ddbc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ddc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ddc4:	2218      	movs	r2, #24
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f003 fbab 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800ddce:	233f      	movs	r3, #63	; 0x3f
 800ddd0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800ddd4:	2383      	movs	r3, #131	; 0x83
 800ddd6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ddda:	f107 030c 	add.w	r3, r7, #12
 800ddde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dde2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dde6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ddea:	f107 030b 	add.w	r3, r7, #11
 800ddee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ddf8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ddfc:	2100      	movs	r1, #0
 800ddfe:	4618      	mov	r0, r3
 800de00:	f002 fdd6 	bl	80109b0 <hci_send_req>
 800de04:	4603      	mov	r3, r0
 800de06:	2b00      	cmp	r3, #0
 800de08:	da01      	bge.n	800de0e <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800de0a:	23ff      	movs	r3, #255	; 0xff
 800de0c:	e00d      	b.n	800de2a <aci_gap_set_discoverable+0x1fc>
  if (status) {
 800de0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800de12:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d005      	beq.n	800de28 <aci_gap_set_discoverable+0x1fa>
    return status;
 800de1c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800de20:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	e000      	b.n	800de2a <aci_gap_set_discoverable+0x1fc>
  }
  return BLE_STATUS_SUCCESS;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800de30:	46bd      	mov	sp, r7
 800de32:	bdb0      	pop	{r4, r5, r7, pc}

0800de34 <aci_gap_set_io_capability>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability)
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b0cc      	sub	sp, #304	; 0x130
 800de38:	af00      	add	r7, sp, #0
 800de3a:	4602      	mov	r2, r0
 800de3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de40:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800de44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800de46:	f107 030c 	add.w	r3, r7, #12
 800de4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800de4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de52:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800de56:	2200      	movs	r2, #0
 800de58:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800de5a:	2300      	movs	r3, #0
 800de5c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->IO_Capability = htob(IO_Capability, 1);
 800de60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800de68:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800de6c:	7812      	ldrb	r2, [r2, #0]
 800de6e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800de70:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800de74:	3301      	adds	r3, #1
 800de76:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800de7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800de7e:	2218      	movs	r2, #24
 800de80:	2100      	movs	r1, #0
 800de82:	4618      	mov	r0, r3
 800de84:	f003 fb4e 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800de88:	233f      	movs	r3, #63	; 0x3f
 800de8a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800de8e:	2385      	movs	r3, #133	; 0x85
 800de90:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800de94:	f107 030c 	add.w	r3, r7, #12
 800de98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800de9c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dea0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800dea4:	f107 030b 	add.w	r3, r7, #11
 800dea8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800deac:	2301      	movs	r3, #1
 800deae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800deb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800deb6:	2100      	movs	r1, #0
 800deb8:	4618      	mov	r0, r3
 800deba:	f002 fd79 	bl	80109b0 <hci_send_req>
 800debe:	4603      	mov	r3, r0
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	da01      	bge.n	800dec8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800dec4:	23ff      	movs	r3, #255	; 0xff
 800dec6:	e00d      	b.n	800dee4 <aci_gap_set_io_capability+0xb0>
  if (status) {
 800dec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800decc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d005      	beq.n	800dee2 <aci_gap_set_io_capability+0xae>
    return status;
 800ded6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800deda:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	e000      	b.n	800dee4 <aci_gap_set_io_capability+0xb0>
  }
  return BLE_STATUS_SUCCESS;
 800dee2:	2300      	movs	r3, #0
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}

0800deee <aci_gap_set_authentication_requirement>:
                                                  uint8_t Min_Encryption_Key_Size,
                                                  uint8_t Max_Encryption_Key_Size,
                                                  uint8_t Use_Fixed_Pin,
                                                  uint32_t Fixed_Pin,
                                                  uint8_t Identity_Address_Type)
{
 800deee:	b5b0      	push	{r4, r5, r7, lr}
 800def0:	b0cc      	sub	sp, #304	; 0x130
 800def2:	af00      	add	r7, sp, #0
 800def4:	4605      	mov	r5, r0
 800def6:	460c      	mov	r4, r1
 800def8:	4610      	mov	r0, r2
 800defa:	4619      	mov	r1, r3
 800defc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df00:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800df04:	462a      	mov	r2, r5
 800df06:	701a      	strb	r2, [r3, #0]
 800df08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df0c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800df10:	4622      	mov	r2, r4
 800df12:	701a      	strb	r2, [r3, #0]
 800df14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df18:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800df1c:	4602      	mov	r2, r0
 800df1e:	701a      	strb	r2, [r3, #0]
 800df20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800df28:	460a      	mov	r2, r1
 800df2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800df2c:	f107 030c 	add.w	r3, r7, #12
 800df30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800df34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800df38:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800df3c:	2200      	movs	r2, #0
 800df3e:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800df40:	2300      	movs	r3, #0
 800df42:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Bonding_Mode = htob(Bonding_Mode, 1);
 800df46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800df4e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800df52:	7812      	ldrb	r2, [r2, #0]
 800df54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800df56:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800df5a:	3301      	adds	r3, #1
 800df5c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->MITM_Mode = htob(MITM_Mode, 1);
 800df60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df64:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800df68:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800df6c:	7812      	ldrb	r2, [r2, #0]
 800df6e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800df70:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800df74:	3301      	adds	r3, #1
 800df76:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->SC_Support = htob(SC_Support, 1);
 800df7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df7e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800df82:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800df86:	7812      	ldrb	r2, [r2, #0]
 800df88:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800df8a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800df8e:	3301      	adds	r3, #1
 800df90:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->KeyPress_Notification_Support = htob(KeyPress_Notification_Support, 1);
 800df94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800df98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800df9c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800dfa0:	7812      	ldrb	r2, [r2, #0]
 800dfa2:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800dfa4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dfa8:	3301      	adds	r3, #1
 800dfaa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Min_Encryption_Key_Size = htob(Min_Encryption_Key_Size, 1);
 800dfae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dfb2:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800dfb6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800dfb8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dfbc:	3301      	adds	r3, #1
 800dfbe:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Max_Encryption_Key_Size = htob(Max_Encryption_Key_Size, 1);
 800dfc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dfc6:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800dfca:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800dfcc:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dfd0:	3301      	adds	r3, #1
 800dfd2:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Use_Fixed_Pin = htob(Use_Fixed_Pin, 1);
 800dfd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dfda:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800dfde:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800dfe0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dfe4:	3301      	adds	r3, #1
 800dfe6:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Fixed_Pin = htob(Fixed_Pin, 4);
 800dfea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dfee:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800dff2:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800dff6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800dffa:	3304      	adds	r3, #4
 800dffc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Identity_Address_Type = htob(Identity_Address_Type, 1);
 800e000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e004:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800e008:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800e00a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e00e:	3301      	adds	r3, #1
 800e010:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e014:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e018:	2218      	movs	r2, #24
 800e01a:	2100      	movs	r1, #0
 800e01c:	4618      	mov	r0, r3
 800e01e:	f003 fa81 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800e022:	233f      	movs	r3, #63	; 0x3f
 800e024:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800e028:	2386      	movs	r3, #134	; 0x86
 800e02a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e02e:	f107 030c 	add.w	r3, r7, #12
 800e032:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e036:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e03a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e03e:	f107 030b 	add.w	r3, r7, #11
 800e042:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e046:	2301      	movs	r3, #1
 800e048:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800e04c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e050:	2100      	movs	r1, #0
 800e052:	4618      	mov	r0, r3
 800e054:	f002 fcac 	bl	80109b0 <hci_send_req>
 800e058:	4603      	mov	r3, r0
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	da01      	bge.n	800e062 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800e05e:	23ff      	movs	r3, #255	; 0xff
 800e060:	e00d      	b.n	800e07e <aci_gap_set_authentication_requirement+0x190>
  if (status) {
 800e062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e066:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d005      	beq.n	800e07c <aci_gap_set_authentication_requirement+0x18e>
    return status;
 800e070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e074:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	e000      	b.n	800e07e <aci_gap_set_authentication_requirement+0x190>
  }
  return BLE_STATUS_SUCCESS;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e084:	46bd      	mov	sp, r7
 800e086:	bdb0      	pop	{r4, r5, r7, pc}

0800e088 <aci_gap_pass_key_resp>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_pass_key_resp(uint16_t Connection_Handle,
                                 uint32_t Pass_Key)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b0cc      	sub	sp, #304	; 0x130
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	4602      	mov	r2, r0
 800e090:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e094:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e098:	6019      	str	r1, [r3, #0]
 800e09a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e09e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e0a2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800e0a4:	f107 030c 	add.w	r3, r7, #12
 800e0a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e0ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e0b0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800e0be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e0c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e0c6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e0ca:	8812      	ldrh	r2, [r2, #0]
 800e0cc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e0ce:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e0d2:	3302      	adds	r3, #2
 800e0d4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Pass_Key = htob(Pass_Key, 4);
 800e0d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e0dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e0e0:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800e0e4:	6812      	ldr	r2, [r2, #0]
 800e0e6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800e0ea:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e0ee:	3304      	adds	r3, #4
 800e0f0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e0f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e0f8:	2218      	movs	r2, #24
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f003 fa11 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800e102:	233f      	movs	r3, #63	; 0x3f
 800e104:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800e108:	2388      	movs	r3, #136	; 0x88
 800e10a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e10e:	f107 030c 	add.w	r3, r7, #12
 800e112:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e116:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e11a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e11e:	f107 030b 	add.w	r3, r7, #11
 800e122:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e126:	2301      	movs	r3, #1
 800e128:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800e12c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e130:	2100      	movs	r1, #0
 800e132:	4618      	mov	r0, r3
 800e134:	f002 fc3c 	bl	80109b0 <hci_send_req>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	da01      	bge.n	800e142 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800e13e:	23ff      	movs	r3, #255	; 0xff
 800e140:	e00d      	b.n	800e15e <aci_gap_pass_key_resp+0xd6>
  if (status) {
 800e142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e146:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d005      	beq.n	800e15c <aci_gap_pass_key_resp+0xd4>
    return status;
 800e150:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e154:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e158:	781b      	ldrb	r3, [r3, #0]
 800e15a:	e000      	b.n	800e15e <aci_gap_pass_key_resp+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}

0800e168 <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 800e168:	b590      	push	{r4, r7, lr}
 800e16a:	b0cf      	sub	sp, #316	; 0x13c
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	4604      	mov	r4, r0
 800e170:	4608      	mov	r0, r1
 800e172:	4611      	mov	r1, r2
 800e174:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e178:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800e17c:	6013      	str	r3, [r2, #0]
 800e17e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e182:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e186:	4622      	mov	r2, r4
 800e188:	701a      	strb	r2, [r3, #0]
 800e18a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e18e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e192:	4602      	mov	r2, r0
 800e194:	701a      	strb	r2, [r3, #0]
 800e196:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e19a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e19e:	460a      	mov	r2, r1
 800e1a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800e1a2:	f107 0314 	add.w	r3, r7, #20
 800e1a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e1aa:	f107 030c 	add.w	r3, r7, #12
 800e1ae:	2207      	movs	r2, #7
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f003 f9b6 	bl	8011524 <memset>
  uint8_t index_input = 0;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 800e1be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e1c2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e1c6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800e1ca:	7812      	ldrb	r2, [r2, #0]
 800e1cc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e1ce:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 800e1d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e1dc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e1e0:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800e1e4:	7812      	ldrb	r2, [r2, #0]
 800e1e6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e1e8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 800e1f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e1f6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e1fa:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800e1fe:	7812      	ldrb	r2, [r2, #0]
 800e200:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e202:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e206:	3301      	adds	r3, #1
 800e208:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e20c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e210:	2218      	movs	r2, #24
 800e212:	2100      	movs	r1, #0
 800e214:	4618      	mov	r0, r3
 800e216:	f003 f985 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800e21a:	233f      	movs	r3, #63	; 0x3f
 800e21c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 800e220:	238a      	movs	r3, #138	; 0x8a
 800e222:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800e226:	f107 0314 	add.w	r3, r7, #20
 800e22a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800e22e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e232:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800e236:	f107 030c 	add.w	r3, r7, #12
 800e23a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800e23e:	2307      	movs	r3, #7
 800e240:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800e244:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e248:	2100      	movs	r1, #0
 800e24a:	4618      	mov	r0, r3
 800e24c:	f002 fbb0 	bl	80109b0 <hci_send_req>
 800e250:	4603      	mov	r3, r0
 800e252:	2b00      	cmp	r3, #0
 800e254:	da01      	bge.n	800e25a <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800e256:	23ff      	movs	r3, #255	; 0xff
 800e258:	e02e      	b.n	800e2b8 <aci_gap_init+0x150>
  if (resp.Status) {
 800e25a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e25e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d005      	beq.n	800e274 <aci_gap_init+0x10c>
    return resp.Status;
 800e268:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e26c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	e021      	b.n	800e2b8 <aci_gap_init+0x150>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800e274:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e27c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e280:	b29a      	uxth	r2, r3
 800e282:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e286:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 800e28e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e292:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e296:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e2a0:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 800e2a2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e2a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e2aa:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800e2b4:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd90      	pop	{r4, r7, pc}

0800e2c2 <aci_gap_slave_security_req>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_slave_security_req(uint16_t Connection_Handle)
{
 800e2c2:	b580      	push	{r7, lr}
 800e2c4:	b0cc      	sub	sp, #304	; 0x130
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e2ce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e2d2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_slave_security_req_cp0 *cp0 = (aci_gap_slave_security_req_cp0*)(cmd_buffer);
 800e2d4:	f107 030c 	add.w	r3, r7, #12
 800e2d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e2dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e2e0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800e2ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e2f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e2f6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e2fa:	8812      	ldrh	r2, [r2, #0]
 800e2fc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e2fe:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e302:	3302      	adds	r3, #2
 800e304:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e308:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e30c:	2218      	movs	r2, #24
 800e30e:	2100      	movs	r1, #0
 800e310:	4618      	mov	r0, r3
 800e312:	f003 f907 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800e316:	233f      	movs	r3, #63	; 0x3f
 800e318:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08d;
 800e31c:	238d      	movs	r3, #141	; 0x8d
 800e31e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800e322:	230f      	movs	r3, #15
 800e324:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800e328:	f107 030c 	add.w	r3, r7, #12
 800e32c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e330:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e334:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e338:	f107 030b 	add.w	r3, r7, #11
 800e33c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e340:	2301      	movs	r3, #1
 800e342:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800e346:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e34a:	2100      	movs	r1, #0
 800e34c:	4618      	mov	r0, r3
 800e34e:	f002 fb2f 	bl	80109b0 <hci_send_req>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	da01      	bge.n	800e35c <aci_gap_slave_security_req+0x9a>
    return BLE_STATUS_TIMEOUT;
 800e358:	23ff      	movs	r3, #255	; 0xff
 800e35a:	e00d      	b.n	800e378 <aci_gap_slave_security_req+0xb6>
  if (status) {
 800e35c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e360:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d005      	beq.n	800e376 <aci_gap_slave_security_req+0xb4>
    return status;
 800e36a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e36e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	e000      	b.n	800e378 <aci_gap_slave_security_req+0xb6>
  }
  return BLE_STATUS_SUCCESS;
 800e376:	2300      	movs	r3, #0
}
 800e378:	4618      	mov	r0, r3
 800e37a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd80      	pop	{r7, pc}

0800e382 <aci_gap_update_adv_data>:
tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen,
                                   uint8_t AdvData[])
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b0cc      	sub	sp, #304	; 0x130
 800e386:	af00      	add	r7, sp, #0
 800e388:	4602      	mov	r2, r0
 800e38a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e38e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e392:	6019      	str	r1, [r3, #0]
 800e394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e398:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e39c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800e39e:	f107 030c 	add.w	r3, r7, #12
 800e3a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e3a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e3aa:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->AdvDataLen = htob(AdvDataLen, 1);
 800e3b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e3bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e3c0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800e3c4:	7812      	ldrb	r2, [r2, #0]
 800e3c6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e3c8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->AdvData, (const void *) AdvData, AdvDataLen*sizeof(uint8_t));
 800e3d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e3d6:	1c58      	adds	r0, r3, #1
 800e3d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e3dc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e3e0:	781a      	ldrb	r2, [r3, #0]
 800e3e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e3e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e3ea:	6819      	ldr	r1, [r3, #0]
 800e3ec:	f003 f926 	bl	801163c <memcpy>
    index_input += AdvDataLen*sizeof(uint8_t);
 800e3f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e3f4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800e3f8:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	4413      	add	r3, r2
 800e400:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e404:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e408:	2218      	movs	r2, #24
 800e40a:	2100      	movs	r1, #0
 800e40c:	4618      	mov	r0, r3
 800e40e:	f003 f889 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800e412:	233f      	movs	r3, #63	; 0x3f
 800e414:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800e418:	238e      	movs	r3, #142	; 0x8e
 800e41a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e41e:	f107 030c 	add.w	r3, r7, #12
 800e422:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e426:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e42a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e42e:	f107 030b 	add.w	r3, r7, #11
 800e432:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e436:	2301      	movs	r3, #1
 800e438:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800e43c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e440:	2100      	movs	r1, #0
 800e442:	4618      	mov	r0, r3
 800e444:	f002 fab4 	bl	80109b0 <hci_send_req>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	da01      	bge.n	800e452 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800e44e:	23ff      	movs	r3, #255	; 0xff
 800e450:	e00d      	b.n	800e46e <aci_gap_update_adv_data+0xec>
  if (status) {
 800e452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e456:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d005      	beq.n	800e46c <aci_gap_update_adv_data+0xea>
    return status;
 800e460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e464:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	e000      	b.n	800e46e <aci_gap_update_adv_data+0xec>
  }
  return BLE_STATUS_SUCCESS;
 800e46c:	2300      	movs	r3, #0
}
 800e46e:	4618      	mov	r0, r3
 800e470:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <aci_gap_clear_security_db>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gap_clear_security_db(void)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b088      	sub	sp, #32
 800e47c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e47e:	2300      	movs	r3, #0
 800e480:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e482:	f107 0308 	add.w	r3, r7, #8
 800e486:	2218      	movs	r2, #24
 800e488:	2100      	movs	r1, #0
 800e48a:	4618      	mov	r0, r3
 800e48c:	f003 f84a 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800e490:	233f      	movs	r3, #63	; 0x3f
 800e492:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x094;
 800e494:	2394      	movs	r3, #148	; 0x94
 800e496:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e498:	1dfb      	adds	r3, r7, #7
 800e49a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e49c:	2301      	movs	r3, #1
 800e49e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800e4a0:	f107 0308 	add.w	r3, r7, #8
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f002 fa82 	bl	80109b0 <hci_send_req>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	da01      	bge.n	800e4b6 <aci_gap_clear_security_db+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e4b2:	23ff      	movs	r3, #255	; 0xff
 800e4b4:	e005      	b.n	800e4c2 <aci_gap_clear_security_db+0x4a>
  if (status) {
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d001      	beq.n	800e4c0 <aci_gap_clear_security_db+0x48>
    return status;
 800e4bc:	79fb      	ldrb	r3, [r7, #7]
 800e4be:	e000      	b.n	800e4c2 <aci_gap_clear_security_db+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3720      	adds	r7, #32
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b088      	sub	sp, #32
 800e4ce:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e4d4:	f107 0308 	add.w	r3, r7, #8
 800e4d8:	2218      	movs	r2, #24
 800e4da:	2100      	movs	r1, #0
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f003 f821 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800e4e2:	233f      	movs	r3, #63	; 0x3f
 800e4e4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800e4e6:	f240 1301 	movw	r3, #257	; 0x101
 800e4ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e4ec:	1dfb      	adds	r3, r7, #7
 800e4ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800e4f4:	f107 0308 	add.w	r3, r7, #8
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f002 fa58 	bl	80109b0 <hci_send_req>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	da01      	bge.n	800e50a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800e506:	23ff      	movs	r3, #255	; 0xff
 800e508:	e005      	b.n	800e516 <aci_gatt_init+0x4c>
  if (status) {
 800e50a:	79fb      	ldrb	r3, [r7, #7]
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d001      	beq.n	800e514 <aci_gatt_init+0x4a>
    return status;
 800e510:	79fb      	ldrb	r3, [r7, #7]
 800e512:	e000      	b.n	800e516 <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3720      	adds	r7, #32
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 800e51e:	b590      	push	{r4, r7, lr}
 800e520:	b0cf      	sub	sp, #316	; 0x13c
 800e522:	af00      	add	r7, sp, #0
 800e524:	4604      	mov	r4, r0
 800e526:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800e52a:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800e52e:	6001      	str	r1, [r0, #0]
 800e530:	4610      	mov	r0, r2
 800e532:	4619      	mov	r1, r3
 800e534:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e538:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e53c:	4622      	mov	r2, r4
 800e53e:	701a      	strb	r2, [r3, #0]
 800e540:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e544:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e548:	4602      	mov	r2, r0
 800e54a:	701a      	strb	r2, [r3, #0]
 800e54c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e550:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e554:	460a      	mov	r2, r1
 800e556:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800e558:	f107 030c 	add.w	r3, r7, #12
 800e55c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800e560:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e564:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d00a      	beq.n	800e584 <aci_gatt_add_service+0x66>
 800e56e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e572:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	2b02      	cmp	r3, #2
 800e57a:	d101      	bne.n	800e580 <aci_gatt_add_service+0x62>
 800e57c:	2311      	movs	r3, #17
 800e57e:	e002      	b.n	800e586 <aci_gatt_add_service+0x68>
 800e580:	2301      	movs	r3, #1
 800e582:	e000      	b.n	800e586 <aci_gatt_add_service+0x68>
 800e584:	2303      	movs	r3, #3
 800e586:	f107 020c 	add.w	r2, r7, #12
 800e58a:	4413      	add	r3, r2
 800e58c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e590:	f107 0308 	add.w	r3, r7, #8
 800e594:	2203      	movs	r2, #3
 800e596:	2100      	movs	r1, #0
 800e598:	4618      	mov	r0, r3
 800e59a:	f002 ffc3 	bl	8011524 <memset>
  uint8_t index_input = 0;
 800e59e:	2300      	movs	r3, #0
 800e5a0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 800e5a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e5a8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e5ac:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800e5b0:	7812      	ldrb	r2, [r2, #0]
 800e5b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e5b4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e5b8:	3301      	adds	r3, #1
 800e5ba:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 800e5be:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e5c2:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d002      	beq.n	800e5d2 <aci_gatt_add_service+0xb4>
 800e5cc:	2b02      	cmp	r3, #2
 800e5ce:	d004      	beq.n	800e5da <aci_gatt_add_service+0xbc>
 800e5d0:	e007      	b.n	800e5e2 <aci_gatt_add_service+0xc4>
      case 1: size = 2; break;
 800e5d2:	2302      	movs	r3, #2
 800e5d4:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800e5d8:	e005      	b.n	800e5e6 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800e5da:	2310      	movs	r3, #16
 800e5dc:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800e5e0:	e001      	b.n	800e5e6 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800e5e2:	2347      	movs	r3, #71	; 0x47
 800e5e4:	e06c      	b.n	800e6c0 <aci_gatt_add_service+0x1a2>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 800e5e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800e5ea:	1c58      	adds	r0, r3, #1
 800e5ec:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800e5f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e5f4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e5f8:	6819      	ldr	r1, [r3, #0]
 800e5fa:	f003 f81f 	bl	801163c <memcpy>
    index_input += size;
 800e5fe:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800e602:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800e606:	4413      	add	r3, r2
 800e608:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 800e60c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e610:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e614:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800e618:	7812      	ldrb	r2, [r2, #0]
 800e61a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800e61c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e620:	3301      	adds	r3, #1
 800e622:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 800e626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e62a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800e62e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800e632:	7812      	ldrb	r2, [r2, #0]
 800e634:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800e636:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e63a:	3301      	adds	r3, #1
 800e63c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e640:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e644:	2218      	movs	r2, #24
 800e646:	2100      	movs	r1, #0
 800e648:	4618      	mov	r0, r3
 800e64a:	f002 ff6b 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800e64e:	233f      	movs	r3, #63	; 0x3f
 800e650:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800e654:	f44f 7381 	mov.w	r3, #258	; 0x102
 800e658:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e65c:	f107 030c 	add.w	r3, r7, #12
 800e660:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e664:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e668:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800e66c:	f107 0308 	add.w	r3, r7, #8
 800e670:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800e674:	2303      	movs	r3, #3
 800e676:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800e67a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e67e:	2100      	movs	r1, #0
 800e680:	4618      	mov	r0, r3
 800e682:	f002 f995 	bl	80109b0 <hci_send_req>
 800e686:	4603      	mov	r3, r0
 800e688:	2b00      	cmp	r3, #0
 800e68a:	da01      	bge.n	800e690 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800e68c:	23ff      	movs	r3, #255	; 0xff
 800e68e:	e017      	b.n	800e6c0 <aci_gatt_add_service+0x1a2>
  if (resp.Status) {
 800e690:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e698:	781b      	ldrb	r3, [r3, #0]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d005      	beq.n	800e6aa <aci_gatt_add_service+0x18c>
    return resp.Status;
 800e69e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e6a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e6a6:	781b      	ldrb	r3, [r3, #0]
 800e6a8:	e00a      	b.n	800e6c0 <aci_gatt_add_service+0x1a2>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 800e6aa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800e6ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e6b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e6b6:	b29a      	uxth	r2, r3
 800e6b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800e6bc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e6be:	2300      	movs	r3, #0
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd90      	pop	{r4, r7, pc}

0800e6ca <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 800e6ca:	b590      	push	{r4, r7, lr}
 800e6cc:	b0d1      	sub	sp, #324	; 0x144
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	4604      	mov	r4, r0
 800e6d2:	4608      	mov	r0, r1
 800e6d4:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800e6d8:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800e6dc:	600a      	str	r2, [r1, #0]
 800e6de:	4619      	mov	r1, r3
 800e6e0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6e4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800e6e8:	4622      	mov	r2, r4
 800e6ea:	801a      	strh	r2, [r3, #0]
 800e6ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6f0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	701a      	strb	r2, [r3, #0]
 800e6f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e6fc:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800e700:	460a      	mov	r2, r1
 800e702:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800e704:	f107 0314 	add.w	r3, r7, #20
 800e708:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800e70c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e710:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e714:	781b      	ldrb	r3, [r3, #0]
 800e716:	2b01      	cmp	r3, #1
 800e718:	d00a      	beq.n	800e730 <aci_gatt_add_char+0x66>
 800e71a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e71e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e722:	781b      	ldrb	r3, [r3, #0]
 800e724:	2b02      	cmp	r3, #2
 800e726:	d101      	bne.n	800e72c <aci_gatt_add_char+0x62>
 800e728:	2313      	movs	r3, #19
 800e72a:	e002      	b.n	800e732 <aci_gatt_add_char+0x68>
 800e72c:	2303      	movs	r3, #3
 800e72e:	e000      	b.n	800e732 <aci_gatt_add_char+0x68>
 800e730:	2305      	movs	r3, #5
 800e732:	f107 0214 	add.w	r2, r7, #20
 800e736:	4413      	add	r3, r2
 800e738:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800e73c:	f107 0310 	add.w	r3, r7, #16
 800e740:	2203      	movs	r2, #3
 800e742:	2100      	movs	r1, #0
 800e744:	4618      	mov	r0, r3
 800e746:	f002 feed 	bl	8011524 <memset>
  uint8_t index_input = 0;
 800e74a:	2300      	movs	r3, #0
 800e74c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 800e750:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e754:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e758:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800e75c:	8812      	ldrh	r2, [r2, #0]
 800e75e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e760:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e764:	3302      	adds	r3, #2
 800e766:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 800e76a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e76e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e772:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800e776:	7812      	ldrb	r2, [r2, #0]
 800e778:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e77a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e77e:	3301      	adds	r3, #1
 800e780:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800e784:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e788:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d002      	beq.n	800e798 <aci_gatt_add_char+0xce>
 800e792:	2b02      	cmp	r3, #2
 800e794:	d004      	beq.n	800e7a0 <aci_gatt_add_char+0xd6>
 800e796:	e007      	b.n	800e7a8 <aci_gatt_add_char+0xde>
      case 1: size = 2; break;
 800e798:	2302      	movs	r3, #2
 800e79a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800e79e:	e005      	b.n	800e7ac <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800e7a0:	2310      	movs	r3, #16
 800e7a2:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800e7a6:	e001      	b.n	800e7ac <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800e7a8:	2347      	movs	r3, #71	; 0x47
 800e7aa:	e091      	b.n	800e8d0 <aci_gatt_add_char+0x206>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 800e7ac:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800e7b0:	1cd8      	adds	r0, r3, #3
 800e7b2:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800e7b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e7ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800e7be:	6819      	ldr	r1, [r3, #0]
 800e7c0:	f002 ff3c 	bl	801163c <memcpy>
    index_input += size;
 800e7c4:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 800e7c8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800e7cc:	4413      	add	r3, r2
 800e7ce:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 800e7d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7d6:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800e7da:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800e7de:	8812      	ldrh	r2, [r2, #0]
 800e7e0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800e7e2:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e7e6:	3302      	adds	r3, #2
 800e7e8:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 800e7ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e7f0:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800e7f4:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800e7f6:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e7fa:	3301      	adds	r3, #1
 800e7fc:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800e800:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e804:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800e808:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800e80a:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e80e:	3301      	adds	r3, #1
 800e810:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800e814:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e818:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800e81c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800e81e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e822:	3301      	adds	r3, #1
 800e824:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 800e828:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e82c:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800e830:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800e832:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e836:	3301      	adds	r3, #1
 800e838:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 800e83c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800e840:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800e844:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800e846:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e84a:	3301      	adds	r3, #1
 800e84c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e850:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e854:	2218      	movs	r2, #24
 800e856:	2100      	movs	r1, #0
 800e858:	4618      	mov	r0, r3
 800e85a:	f002 fe63 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800e85e:	233f      	movs	r3, #63	; 0x3f
 800e860:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800e864:	f44f 7382 	mov.w	r3, #260	; 0x104
 800e868:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800e86c:	f107 0314 	add.w	r3, r7, #20
 800e870:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800e874:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800e878:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800e87c:	f107 0310 	add.w	r3, r7, #16
 800e880:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800e884:	2303      	movs	r3, #3
 800e886:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 800e88a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800e88e:	2100      	movs	r1, #0
 800e890:	4618      	mov	r0, r3
 800e892:	f002 f88d 	bl	80109b0 <hci_send_req>
 800e896:	4603      	mov	r3, r0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	da01      	bge.n	800e8a0 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800e89c:	23ff      	movs	r3, #255	; 0xff
 800e89e:	e017      	b.n	800e8d0 <aci_gatt_add_char+0x206>
  if (resp.Status) {
 800e8a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e8a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e8a8:	781b      	ldrb	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d005      	beq.n	800e8ba <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800e8ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e8b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	e00a      	b.n	800e8d0 <aci_gatt_add_char+0x206>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 800e8ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800e8be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800e8c2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e8c6:	b29a      	uxth	r2, r3
 800e8c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800e8cc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e8ce:	2300      	movs	r3, #0
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd90      	pop	{r4, r7, pc}

0800e8da <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 800e8da:	b5b0      	push	{r4, r5, r7, lr}
 800e8dc:	b0cc      	sub	sp, #304	; 0x130
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	4605      	mov	r5, r0
 800e8e2:	460c      	mov	r4, r1
 800e8e4:	4610      	mov	r0, r2
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8ec:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800e8f0:	462a      	mov	r2, r5
 800e8f2:	801a      	strh	r2, [r3, #0]
 800e8f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800e8fc:	4622      	mov	r2, r4
 800e8fe:	801a      	strh	r2, [r3, #0]
 800e900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e904:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800e908:	4602      	mov	r2, r0
 800e90a:	701a      	strb	r2, [r3, #0]
 800e90c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e910:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e914:	460a      	mov	r2, r1
 800e916:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800e918:	f107 030c 	add.w	r3, r7, #12
 800e91c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e924:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800e928:	2200      	movs	r2, #0
 800e92a:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800e92c:	2300      	movs	r3, #0
 800e92e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 800e932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e936:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e93a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800e93e:	8812      	ldrh	r2, [r2, #0]
 800e940:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e942:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e946:	3302      	adds	r3, #2
 800e948:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 800e94c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e950:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e954:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800e958:	8812      	ldrh	r2, [r2, #0]
 800e95a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e95c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e960:	3302      	adds	r3, #2
 800e962:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 800e966:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e96a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e96e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800e972:	7812      	ldrb	r2, [r2, #0]
 800e974:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e976:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e97a:	3301      	adds	r3, #1
 800e97c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 800e980:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e984:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800e988:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800e98c:	7812      	ldrb	r2, [r2, #0]
 800e98e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e990:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e994:	3301      	adds	r3, #1
 800e996:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 800e99a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e99e:	1d98      	adds	r0, r3, #6
 800e9a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e9a4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e9a8:	781b      	ldrb	r3, [r3, #0]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800e9b0:	f002 fe44 	bl	801163c <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 800e9b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e9b8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800e9bc:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800e9c8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e9cc:	2218      	movs	r2, #24
 800e9ce:	2100      	movs	r1, #0
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f002 fda7 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800e9d6:	233f      	movs	r3, #63	; 0x3f
 800e9d8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800e9dc:	f44f 7383 	mov.w	r3, #262	; 0x106
 800e9e0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e9e4:	f107 030c 	add.w	r3, r7, #12
 800e9e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e9ec:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800e9f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e9f4:	f107 030b 	add.w	r3, r7, #11
 800e9f8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ea02:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea06:	2100      	movs	r1, #0
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f001 ffd1 	bl	80109b0 <hci_send_req>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	da01      	bge.n	800ea18 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800ea14:	23ff      	movs	r3, #255	; 0xff
 800ea16:	e00d      	b.n	800ea34 <aci_gatt_update_char_value+0x15a>
  if (status) {
 800ea18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea1c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d005      	beq.n	800ea32 <aci_gatt_update_char_value+0x158>
    return status;
 800ea26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea2a:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	e000      	b.n	800ea34 <aci_gatt_update_char_value+0x15a>
  }
  return BLE_STATUS_SUCCESS;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	bdb0      	pop	{r4, r5, r7, pc}

0800ea3e <aci_gatt_allow_read>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_gatt_allow_read(uint16_t Connection_Handle)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b0cc      	sub	sp, #304	; 0x130
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	4602      	mov	r2, r0
 800ea46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea4a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ea4e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 800ea50:	f107 030c 	add.w	r3, r7, #12
 800ea54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ea58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ea5c:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ea60:	2200      	movs	r2, #0
 800ea62:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800ea64:	2300      	movs	r3, #0
 800ea66:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800ea6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ea6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ea72:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ea76:	8812      	ldrh	r2, [r2, #0]
 800ea78:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ea7a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ea7e:	3302      	adds	r3, #2
 800ea80:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ea84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ea88:	2218      	movs	r2, #24
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f002 fd49 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800ea92:	233f      	movs	r3, #63	; 0x3f
 800ea94:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 800ea98:	f240 1327 	movw	r3, #295	; 0x127
 800ea9c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800eaa0:	f107 030c 	add.w	r3, r7, #12
 800eaa4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800eaa8:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800eaac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800eab0:	f107 030b 	add.w	r3, r7, #11
 800eab4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800eab8:	2301      	movs	r3, #1
 800eaba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800eabe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800eac2:	2100      	movs	r1, #0
 800eac4:	4618      	mov	r0, r3
 800eac6:	f001 ff73 	bl	80109b0 <hci_send_req>
 800eaca:	4603      	mov	r3, r0
 800eacc:	2b00      	cmp	r3, #0
 800eace:	da01      	bge.n	800ead4 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 800ead0:	23ff      	movs	r3, #255	; 0xff
 800ead2:	e00d      	b.n	800eaf0 <aci_gatt_allow_read+0xb2>
  if (status) {
 800ead4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ead8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d005      	beq.n	800eaee <aci_gatt_allow_read+0xb0>
    return status;
 800eae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eae6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	e000      	b.n	800eaf0 <aci_gatt_allow_read+0xb2>
  }
  return BLE_STATUS_SUCCESS;
 800eaee:	2300      	movs	r3, #0
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}

0800eafa <aci_hal_get_firmware_details>:
                                        uint8_t *BTLE_Stack_version_minor,
                                        uint8_t *BTLE_Stack_version_patch,
                                        uint8_t *BTLE_Stack_development,
                                        uint16_t *BTLE_Stack_variant,
                                        uint16_t *BTLE_Stack_Build_Number)
{
 800eafa:	b580      	push	{r7, lr}
 800eafc:	b08e      	sub	sp, #56	; 0x38
 800eafe:	af00      	add	r7, sp, #0
 800eb00:	60f8      	str	r0, [r7, #12]
 800eb02:	60b9      	str	r1, [r7, #8]
 800eb04:	607a      	str	r2, [r7, #4]
 800eb06:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  aci_hal_get_firmware_details_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800eb08:	f107 0310 	add.w	r3, r7, #16
 800eb0c:	220f      	movs	r2, #15
 800eb0e:	2100      	movs	r1, #0
 800eb10:	4618      	mov	r0, r3
 800eb12:	f002 fd07 	bl	8011524 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800eb16:	f107 0320 	add.w	r3, r7, #32
 800eb1a:	2218      	movs	r2, #24
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f002 fd00 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800eb24:	233f      	movs	r3, #63	; 0x3f
 800eb26:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 800eb2c:	f107 0310 	add.w	r3, r7, #16
 800eb30:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 800eb32:	230f      	movs	r3, #15
 800eb34:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 800eb36:	f107 0320 	add.w	r3, r7, #32
 800eb3a:	2100      	movs	r1, #0
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f001 ff37 	bl	80109b0 <hci_send_req>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	da01      	bge.n	800eb4c <aci_hal_get_firmware_details+0x52>
    return BLE_STATUS_TIMEOUT;
 800eb48:	23ff      	movs	r3, #255	; 0xff
 800eb4a:	e02c      	b.n	800eba6 <aci_hal_get_firmware_details+0xac>
  if (resp.Status) {
 800eb4c:	7c3b      	ldrb	r3, [r7, #16]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d001      	beq.n	800eb56 <aci_hal_get_firmware_details+0x5c>
    return resp.Status;
 800eb52:	7c3b      	ldrb	r3, [r7, #16]
 800eb54:	e027      	b.n	800eba6 <aci_hal_get_firmware_details+0xac>
  }
  *DTM_version_major = btoh(resp.DTM_version_major, 1);
 800eb56:	7c7a      	ldrb	r2, [r7, #17]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	701a      	strb	r2, [r3, #0]
  *DTM_version_minor = btoh(resp.DTM_version_minor, 1);
 800eb5c:	7cba      	ldrb	r2, [r7, #18]
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	701a      	strb	r2, [r3, #0]
  *DTM_version_patch = btoh(resp.DTM_version_patch, 1);
 800eb62:	7cfa      	ldrb	r2, [r7, #19]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	701a      	strb	r2, [r3, #0]
  *DTM_variant = btoh(resp.DTM_variant, 1);
 800eb68:	7d3a      	ldrb	r2, [r7, #20]
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	701a      	strb	r2, [r3, #0]
  *DTM_Build_Number = btoh(resp.DTM_Build_Number, 2);
 800eb6e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800eb72:	b29a      	uxth	r2, r3
 800eb74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb76:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_version_major = btoh(resp.BTLE_Stack_version_major, 1);
 800eb78:	7dfa      	ldrb	r2, [r7, #23]
 800eb7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb7c:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_minor = btoh(resp.BTLE_Stack_version_minor, 1);
 800eb7e:	7e3a      	ldrb	r2, [r7, #24]
 800eb80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb82:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_version_patch = btoh(resp.BTLE_Stack_version_patch, 1);
 800eb84:	7e7a      	ldrb	r2, [r7, #25]
 800eb86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eb88:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_development = btoh(resp.BTLE_Stack_development, 1);
 800eb8a:	7eba      	ldrb	r2, [r7, #26]
 800eb8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb8e:	701a      	strb	r2, [r3, #0]
  *BTLE_Stack_variant = btoh(resp.BTLE_Stack_variant, 2);
 800eb90:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 800eb94:	b29a      	uxth	r2, r3
 800eb96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb98:	801a      	strh	r2, [r3, #0]
  *BTLE_Stack_Build_Number = btoh(resp.BTLE_Stack_Build_Number, 2);
 800eb9a:	f8b7 301d 	ldrh.w	r3, [r7, #29]
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eba2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800eba4:	2300      	movs	r3, #0
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3738      	adds	r7, #56	; 0x38
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	bd80      	pop	{r7, pc}

0800ebae <aci_hal_write_config_data>:
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 800ebae:	b580      	push	{r7, lr}
 800ebb0:	b0cc      	sub	sp, #304	; 0x130
 800ebb2:	af00      	add	r7, sp, #0
 800ebb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ebbc:	601a      	str	r2, [r3, #0]
 800ebbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebc2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	701a      	strb	r2, [r3, #0]
 800ebca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebce:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ebd2:	460a      	mov	r2, r1
 800ebd4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800ebd6:	f107 030c 	add.w	r3, r7, #12
 800ebda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ebde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ebe2:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800ebea:	2300      	movs	r3, #0
 800ebec:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 800ebf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ebf4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ebf8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ebfc:	7812      	ldrb	r2, [r2, #0]
 800ebfe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ec00:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ec04:	3301      	adds	r3, #1
 800ec06:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 800ec0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ec0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ec12:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ec16:	7812      	ldrb	r2, [r2, #0]
 800ec18:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ec1a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ec1e:	3301      	adds	r3, #1
 800ec20:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 800ec24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ec28:	1c98      	adds	r0, r3, #2
 800ec2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec2e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ec32:	781a      	ldrb	r2, [r3, #0]
 800ec34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ec3c:	6819      	ldr	r1, [r3, #0]
 800ec3e:	f002 fcfd 	bl	801163c <memcpy>
    index_input += Length*sizeof(uint8_t);
 800ec42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ec46:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ec4a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	4413      	add	r3, r2
 800ec52:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ec56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec5a:	2218      	movs	r2, #24
 800ec5c:	2100      	movs	r1, #0
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f002 fc60 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800ec64:	233f      	movs	r3, #63	; 0x3f
 800ec66:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800ec6a:	230c      	movs	r3, #12
 800ec6c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ec70:	f107 030c 	add.w	r3, r7, #12
 800ec74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ec78:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ec7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ec80:	f107 030b 	add.w	r3, r7, #11
 800ec84:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ec8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ec92:	2100      	movs	r1, #0
 800ec94:	4618      	mov	r0, r3
 800ec96:	f001 fe8b 	bl	80109b0 <hci_send_req>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	da01      	bge.n	800eca4 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800eca0:	23ff      	movs	r3, #255	; 0xff
 800eca2:	e00d      	b.n	800ecc0 <aci_hal_write_config_data+0x112>
  if (status) {
 800eca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eca8:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d005      	beq.n	800ecbe <aci_hal_write_config_data+0x110>
    return status;
 800ecb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ecb6:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	e000      	b.n	800ecc0 <aci_hal_write_config_data+0x112>
  }
  return BLE_STATUS_SUCCESS;
 800ecbe:	2300      	movs	r3, #0
}
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}

0800ecca <aci_hal_read_config_data>:
tBleStatus aci_hal_read_config_data(uint8_t Offset,
                                    uint8_t *Data_Length,
                                    uint8_t Data[])
{
 800ecca:	b580      	push	{r7, lr}
 800eccc:	b0ee      	sub	sp, #440	; 0x1b8
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800ecd4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800ecd8:	6019      	str	r1, [r3, #0]
 800ecda:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800ecde:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800ece2:	601a      	str	r2, [r3, #0]
 800ece4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800ece8:	f2a3 13a9 	subw	r3, r3, #425	; 0x1a9
 800ecec:	4602      	mov	r2, r0
 800ecee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 800ecf0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ecf4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  aci_hal_read_config_data_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800ecf8:	f107 0314 	add.w	r3, r7, #20
 800ecfc:	2280      	movs	r2, #128	; 0x80
 800ecfe:	2100      	movs	r1, #0
 800ed00:	4618      	mov	r0, r3
 800ed02:	f002 fc0f 	bl	8011524 <memset>
  uint8_t index_input = 0;
 800ed06:	2300      	movs	r3, #0
 800ed08:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  cp0->Offset = htob(Offset, 1);
 800ed0c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800ed10:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 800ed14:	f2a2 12a9 	subw	r2, r2, #425	; 0x1a9
 800ed18:	7812      	ldrb	r2, [r2, #0]
 800ed1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ed1c:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800ed20:	3301      	adds	r3, #1
 800ed22:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ed26:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800ed2a:	2218      	movs	r2, #24
 800ed2c:	2100      	movs	r1, #0
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f002 fbf8 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800ed34:	233f      	movs	r3, #63	; 0x3f
 800ed36:	f8a7 3198 	strh.w	r3, [r7, #408]	; 0x198
  rq.ocf = 0x00d;
 800ed3a:	230d      	movs	r3, #13
 800ed3c:	f8a7 319a 	strh.w	r3, [r7, #410]	; 0x19a
  rq.cparam = cmd_buffer;
 800ed40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ed44:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  rq.clen = index_input;
 800ed48:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800ed4c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  rq.rparam = &resp;
 800ed50:	f107 0314 	add.w	r3, r7, #20
 800ed54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  rq.rlen = sizeof(resp);
 800ed58:	2380      	movs	r3, #128	; 0x80
 800ed5a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  if (hci_send_req(&rq, FALSE) < 0)
 800ed5e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800ed62:	2100      	movs	r1, #0
 800ed64:	4618      	mov	r0, r3
 800ed66:	f001 fe23 	bl	80109b0 <hci_send_req>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	da01      	bge.n	800ed74 <aci_hal_read_config_data+0xaa>
    return BLE_STATUS_TIMEOUT;
 800ed70:	23ff      	movs	r3, #255	; 0xff
 800ed72:	e029      	b.n	800edc8 <aci_hal_read_config_data+0xfe>
  if (resp.Status) {
 800ed74:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800ed78:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d005      	beq.n	800ed8e <aci_hal_read_config_data+0xc4>
    return resp.Status;
 800ed82:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800ed86:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	e01c      	b.n	800edc8 <aci_hal_read_config_data+0xfe>
  }
  *Data_Length = btoh(resp.Data_Length, 1);
 800ed8e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800ed92:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800ed96:	785a      	ldrb	r2, [r3, #1]
 800ed98:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800ed9c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	701a      	strb	r2, [r3, #0]
  BLUENRG_memcpy((void *) Data, (const void *) resp.Data, *Data_Length*sizeof(uint8_t));
 800eda4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800eda8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	461a      	mov	r2, r3
 800edb2:	f107 0314 	add.w	r3, r7, #20
 800edb6:	1c99      	adds	r1, r3, #2
 800edb8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800edbc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800edc0:	6818      	ldr	r0, [r3, #0]
 800edc2:	f002 fc3b 	bl	801163c <memcpy>
  return BLE_STATUS_SUCCESS;
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <aci_hal_set_tx_power_level>:
tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power,
                                      uint8_t PA_Level)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b0cc      	sub	sp, #304	; 0x130
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	4602      	mov	r2, r0
 800edda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800edde:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ede2:	701a      	strb	r2, [r3, #0]
 800ede4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ede8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800edec:	460a      	mov	r2, r1
 800edee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800edf0:	f107 030c 	add.w	r3, r7, #12
 800edf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800edf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800edfc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ee00:	2200      	movs	r2, #0
 800ee02:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800ee04:	2300      	movs	r3, #0
 800ee06:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->En_High_Power = htob(En_High_Power, 1);
 800ee0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ee12:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ee16:	7812      	ldrb	r2, [r2, #0]
 800ee18:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ee1a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ee1e:	3301      	adds	r3, #1
 800ee20:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->PA_Level = htob(PA_Level, 1);
 800ee24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ee28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ee2c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ee30:	7812      	ldrb	r2, [r2, #0]
 800ee32:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ee34:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ee38:	3301      	adds	r3, #1
 800ee3a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ee3e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ee42:	2218      	movs	r2, #24
 800ee44:	2100      	movs	r1, #0
 800ee46:	4618      	mov	r0, r3
 800ee48:	f002 fb6c 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800ee4c:	233f      	movs	r3, #63	; 0x3f
 800ee4e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800ee52:	230f      	movs	r3, #15
 800ee54:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ee58:	f107 030c 	add.w	r3, r7, #12
 800ee5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ee60:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ee64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ee68:	f107 030b 	add.w	r3, r7, #11
 800ee6c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ee70:	2301      	movs	r3, #1
 800ee72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800ee76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ee7a:	2100      	movs	r1, #0
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f001 fd97 	bl	80109b0 <hci_send_req>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	da01      	bge.n	800ee8c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800ee88:	23ff      	movs	r3, #255	; 0xff
 800ee8a:	e00d      	b.n	800eea8 <aci_hal_set_tx_power_level+0xd6>
  if (status) {
 800ee8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee90:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d005      	beq.n	800eea6 <aci_hal_set_tx_power_level+0xd4>
    return status;
 800ee9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ee9e:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	e000      	b.n	800eea8 <aci_hal_set_tx_power_level+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 800eea6:	2300      	movs	r3, #0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req(uint16_t Connection_Handle,
                                                     uint16_t Conn_Interval_Min,
                                                     uint16_t Conn_Interval_Max,
                                                     uint16_t Slave_latency,
                                                     uint16_t Timeout_Multiplier)
{
 800eeb2:	b5b0      	push	{r4, r5, r7, lr}
 800eeb4:	b0cc      	sub	sp, #304	; 0x130
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	4605      	mov	r5, r0
 800eeba:	460c      	mov	r4, r1
 800eebc:	4610      	mov	r0, r2
 800eebe:	4619      	mov	r1, r3
 800eec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eec4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800eec8:	462a      	mov	r2, r5
 800eeca:	801a      	strh	r2, [r3, #0]
 800eecc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eed0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800eed4:	4622      	mov	r2, r4
 800eed6:	801a      	strh	r2, [r3, #0]
 800eed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eedc:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800eee0:	4602      	mov	r2, r0
 800eee2:	801a      	strh	r2, [r3, #0]
 800eee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eee8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800eeec:	460a      	mov	r2, r1
 800eeee:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800eef0:	f107 030c 	add.w	r3, r7, #12
 800eef4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800eef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800eefc:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800ef00:	2200      	movs	r2, #0
 800ef02:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800ef04:	2300      	movs	r3, #0
 800ef06:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Connection_Handle = htob(Connection_Handle, 2);
 800ef0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef0e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ef12:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ef16:	8812      	ldrh	r2, [r2, #0]
 800ef18:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ef1a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ef1e:	3302      	adds	r3, #2
 800ef20:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Conn_Interval_Min = htob(Conn_Interval_Min, 2);
 800ef24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef28:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ef2c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ef30:	8812      	ldrh	r2, [r2, #0]
 800ef32:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800ef34:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ef38:	3302      	adds	r3, #2
 800ef3a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Conn_Interval_Max = htob(Conn_Interval_Max, 2);
 800ef3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef42:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ef46:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800ef4a:	8812      	ldrh	r2, [r2, #0]
 800ef4c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800ef4e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ef52:	3302      	adds	r3, #2
 800ef54:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Slave_latency = htob(Slave_latency, 2);
 800ef58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef5c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ef60:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800ef64:	8812      	ldrh	r2, [r2, #0]
 800ef66:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800ef68:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ef6c:	3302      	adds	r3, #2
 800ef6e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Timeout_Multiplier = htob(Timeout_Multiplier, 2);
 800ef72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ef76:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800ef7a:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800ef7c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800ef80:	3302      	adds	r3, #2
 800ef82:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800ef86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ef8a:	2218      	movs	r2, #24
 800ef8c:	2100      	movs	r1, #0
 800ef8e:	4618      	mov	r0, r3
 800ef90:	f002 fac8 	bl	8011524 <memset>
  rq.ogf = 0x3f;
 800ef94:	233f      	movs	r3, #63	; 0x3f
 800ef96:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 800ef9a:	f240 1381 	movw	r3, #385	; 0x181
 800ef9e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800efa2:	230f      	movs	r3, #15
 800efa4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800efa8:	f107 030c 	add.w	r3, r7, #12
 800efac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800efb0:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800efb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800efb8:	f107 030b 	add.w	r3, r7, #11
 800efbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800efc0:	2301      	movs	r3, #1
 800efc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 800efc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800efca:	2100      	movs	r1, #0
 800efcc:	4618      	mov	r0, r3
 800efce:	f001 fcef 	bl	80109b0 <hci_send_req>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	da01      	bge.n	800efdc <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800efd8:	23ff      	movs	r3, #255	; 0xff
 800efda:	e00d      	b.n	800eff8 <aci_l2cap_connection_parameter_update_req+0x146>
  if (status) {
 800efdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efe0:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d005      	beq.n	800eff6 <aci_l2cap_connection_parameter_update_req+0x144>
    return status;
 800efea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800efee:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	e000      	b.n	800eff8 <aci_l2cap_connection_parameter_update_req+0x146>
  }
  return BLE_STATUS_SUCCESS;
 800eff6:	2300      	movs	r3, #0
}
 800eff8:	4618      	mov	r0, r3
 800effa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800effe:	46bd      	mov	sp, r7
 800f000:	bdb0      	pop	{r4, r5, r7, pc}

0800f002 <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b084      	sub	sp, #16
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f00a:	2300      	movs	r3, #0
 800f00c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	7818      	ldrb	r0, [r3, #0]
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f01c:	b299      	uxth	r1, r3
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	78db      	ldrb	r3, [r3, #3]
 800f022:	461a      	mov	r2, r3
 800f024:	f7f7 fa50 	bl	80064c8 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 800f028:	7bfb      	ldrb	r3, [r7, #15]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3710      	adds	r7, #16
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b084      	sub	sp, #16
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f03a:	2300      	movs	r3, #0
 800f03c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	7818      	ldrb	r0, [r3, #0]
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f04c:	b299      	uxth	r1, r3
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	78db      	ldrb	r3, [r3, #3]
 800f052:	461a      	mov	r2, r3
 800f054:	f000 ffca 	bl	800ffec <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 800f058:	7bfb      	ldrb	r3, [r7, #15]
}
 800f05a:	4618      	mov	r0, r3
 800f05c:	3710      	adds	r7, #16
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}

0800f062 <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 800f062:	b590      	push	{r4, r7, lr}
 800f064:	b087      	sub	sp, #28
 800f066:	af02      	add	r7, sp, #8
 800f068:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f06a:	2300      	movs	r3, #0
 800f06c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	7818      	ldrb	r0, [r3, #0]
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f07c:	b299      	uxth	r1, r3
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	78da      	ldrb	r2, [r3, #3]
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	889b      	ldrh	r3, [r3, #4]
 800f086:	b29c      	uxth	r4, r3
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	88db      	ldrh	r3, [r3, #6]
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	9300      	str	r3, [sp, #0]
 800f090:	4623      	mov	r3, r4
 800f092:	f000 ffba 	bl	801000a <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 800f096:	7bfb      	ldrb	r3, [r7, #15]
}
 800f098:	4618      	mov	r0, r3
 800f09a:	3714      	adds	r7, #20
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd90      	pop	{r4, r7, pc}

0800f0a0 <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b084      	sub	sp, #16
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f000 ffbc 	bl	8010032 <hci_hardware_error_event>

  return status;
 800f0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b0a6      	sub	sp, #152	; 0x98
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f0e4:	e02e      	b.n	800f144 <hci_number_of_completed_packets_event_process+0x80>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 800f0e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f0ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	4413      	add	r3, r2
 800f0f2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	3398      	adds	r3, #152	; 0x98
 800f100:	443b      	add	r3, r7
 800f102:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800f106:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f10a:	3302      	adds	r3, #2
 800f10c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 800f110:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f114:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	4413      	add	r3, r2
 800f11c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f120:	b29a      	uxth	r2, r3
 800f122:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f126:	009b      	lsls	r3, r3, #2
 800f128:	3398      	adds	r3, #152	; 0x98
 800f12a:	443b      	add	r3, r7
 800f12c:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800f130:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f134:	3302      	adds	r3, #2
 800f136:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800f13a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f13e:	3301      	adds	r3, #1
 800f140:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	461a      	mov	r2, r3
 800f14c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f150:	4293      	cmp	r3, r2
 800f152:	dbc8      	blt.n	800f0e6 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 800f154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f158:	781b      	ldrb	r3, [r3, #0]
 800f15a:	f107 0208 	add.w	r2, r7, #8
 800f15e:	4611      	mov	r1, r2
 800f160:	4618      	mov	r0, r3
 800f162:	f000 ff71 	bl	8010048 <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 800f166:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3798      	adds	r7, #152	; 0x98
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}

0800f172 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 800f172:	b580      	push	{r7, lr}
 800f174:	b084      	sub	sp, #16
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f17a:	2300      	movs	r3, #0
 800f17c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	4618      	mov	r0, r3
 800f188:	f000 ff6a 	bl	8010060 <hci_data_buffer_overflow_event>

  return status;
 800f18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}

0800f196 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 800f196:	b580      	push	{r7, lr}
 800f198:	b084      	sub	sp, #16
 800f19a:	af00      	add	r7, sp, #0
 800f19c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	781a      	ldrb	r2, [r3, #0]
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f1b0:	b29b      	uxth	r3, r3
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	4610      	mov	r0, r2
 800f1b6:	f000 ff5e 	bl	8010076 <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 800f1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3710      	adds	r7, #16
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f001 f9b8 	bl	801054e <aci_blue_initialized_event>

  return status;
 800f1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3710      	adds	r7, #16
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f001 f9b2 	bl	8010564 <aci_blue_events_lost_event>

  return status;
 800f200:	7bfb      	ldrb	r3, [r7, #15]
}
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}

0800f20a <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 800f20a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f20e:	b08d      	sub	sp, #52	; 0x34
 800f210:	af08      	add	r7, sp, #32
 800f212:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f214:	2300      	movs	r3, #0
 800f216:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	f893 c000 	ldrb.w	ip, [r3]
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	f8d3 e001 	ldr.w	lr, [r3, #1]
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	f8d3 8005 	ldr.w	r8, [r3, #5]
 800f22e:	68bb      	ldr	r3, [r7, #8]
 800f230:	f8d3 9009 	ldr.w	r9, [r3, #9]
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	f8d3 300d 	ldr.w	r3, [r3, #13]
 800f23a:	603b      	str	r3, [r7, #0]
 800f23c:	68ba      	ldr	r2, [r7, #8]
 800f23e:	f8d2 2011 	ldr.w	r2, [r2, #17]
 800f242:	68b9      	ldr	r1, [r7, #8]
 800f244:	f8d1 1015 	ldr.w	r1, [r1, #21]
 800f248:	68b8      	ldr	r0, [r7, #8]
 800f24a:	f8d0 0019 	ldr.w	r0, [r0, #25]
 800f24e:	68bc      	ldr	r4, [r7, #8]
 800f250:	f8d4 401d 	ldr.w	r4, [r4, #29]
 800f254:	68bd      	ldr	r5, [r7, #8]
 800f256:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 800f25a:	68be      	ldr	r6, [r7, #8]
 800f25c:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 800f264:	9307      	str	r3, [sp, #28]
 800f266:	9606      	str	r6, [sp, #24]
 800f268:	9505      	str	r5, [sp, #20]
 800f26a:	9404      	str	r4, [sp, #16]
 800f26c:	9003      	str	r0, [sp, #12]
 800f26e:	9102      	str	r1, [sp, #8]
 800f270:	9201      	str	r2, [sp, #4]
 800f272:	683b      	ldr	r3, [r7, #0]
 800f274:	9300      	str	r3, [sp, #0]
 800f276:	464b      	mov	r3, r9
 800f278:	4642      	mov	r2, r8
 800f27a:	4671      	mov	r1, lr
 800f27c:	4660      	mov	r0, ip
 800f27e:	f001 f97b 	bl	8010578 <aci_blue_crash_info_event>

  return status;
 800f282:	7bfb      	ldrb	r3, [r7, #15]
}
 800f284:	4618      	mov	r0, r3
 800f286:	3714      	adds	r7, #20
 800f288:	46bd      	mov	sp, r7
 800f28a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f28e <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 800f28e:	b580      	push	{r7, lr}
 800f290:	b084      	sub	sp, #16
 800f292:	af00      	add	r7, sp, #0
 800f294:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f296:	2300      	movs	r3, #0
 800f298:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	7818      	ldrb	r0, [r3, #0]
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	7859      	ldrb	r1, [r3, #1]
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	f001 f971 	bl	8010594 <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 800f2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3710      	adds	r7, #16
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b084      	sub	sp, #16
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	f993 0000 	ldrsb.w	r0, [r3]
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 800f2da:	461a      	mov	r2, r3
 800f2dc:	f001 f968 	bl	80105b0 <aci_hal_scan_req_report_event>

  return status;
 800f2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3710      	adds	r7, #16
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 800f2ea:	b580      	push	{r7, lr}
 800f2ec:	b084      	sub	sp, #16
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	7818      	ldrb	r0, [r3, #0]
 800f2fe:	68bb      	ldr	r3, [r7, #8]
 800f300:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 800f306:	461a      	mov	r2, r3
 800f308:	f001 f960 	bl	80105cc <aci_hal_fw_error_event>

  return status;
 800f30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3710      	adds	r7, #16
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}

0800f316 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 800f316:	b580      	push	{r7, lr}
 800f318:	b084      	sub	sp, #16
 800f31a:	af00      	add	r7, sp, #0
 800f31c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f31e:	2300      	movs	r3, #0
 800f320:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 800f322:	f000 ff3e 	bl	80101a2 <aci_gap_limited_discoverable_event>

  return status;
 800f326:	7bfb      	ldrb	r3, [r7, #15]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f338:	2300      	movs	r3, #0
 800f33a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	881b      	ldrh	r3, [r3, #0]
 800f344:	b298      	uxth	r0, r3
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	7899      	ldrb	r1, [r3, #2]
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	78db      	ldrb	r3, [r3, #3]
 800f34e:	461a      	mov	r2, r3
 800f350:	f7f7 f928 	bl	80065a4 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 800f354:	7bfb      	ldrb	r3, [r7, #15]
}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b084      	sub	sp, #16
 800f362:	af00      	add	r7, sp, #0
 800f364:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f366:	2300      	movs	r3, #0
 800f368:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	881b      	ldrh	r3, [r3, #0]
 800f372:	b29b      	uxth	r3, r3
 800f374:	4618      	mov	r0, r3
 800f376:	f7f7 f8ff 	bl	8006578 <aci_gap_pass_key_req_event>

  return status;
 800f37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f37c:	4618      	mov	r0, r3
 800f37e:	3710      	adds	r7, #16
 800f380:	46bd      	mov	sp, r7
 800f382:	bd80      	pop	{r7, pc}

0800f384 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f38c:	2300      	movs	r3, #0
 800f38e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 800f394:	68bb      	ldr	r3, [r7, #8]
 800f396:	881b      	ldrh	r3, [r3, #0]
 800f398:	b29b      	uxth	r3, r3
 800f39a:	4618      	mov	r0, r3
 800f39c:	f000 ff08 	bl	80101b0 <aci_gap_authorization_req_event>

  return status;
 800f3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3710      	adds	r7, #16
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b084      	sub	sp, #16
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 800f3b6:	f000 ff06 	bl	80101c6 <aci_gap_slave_security_initiated_event>

  return status;
 800f3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3710      	adds	r7, #16
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}

0800f3c4 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 800f3d0:	f000 ff00 	bl	80101d4 <aci_gap_bond_lost_event>

  return status;
 800f3d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3710      	adds	r7, #16
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd80      	pop	{r7, pc}

0800f3de <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 800f3de:	b580      	push	{r7, lr}
 800f3e0:	b084      	sub	sp, #16
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	7818      	ldrb	r0, [r3, #0]
 800f3f2:	68bb      	ldr	r3, [r7, #8]
 800f3f4:	7859      	ldrb	r1, [r3, #1]
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 800f3fa:	68bb      	ldr	r3, [r7, #8]
 800f3fc:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 800f3fe:	f000 fef0 	bl	80101e2 <aci_gap_proc_complete_event>

  return status;
 800f402:	7bfb      	ldrb	r3, [r7, #15]
}
 800f404:	4618      	mov	r0, r3
 800f406:	3710      	adds	r7, #16
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f414:	2300      	movs	r3, #0
 800f416:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	881b      	ldrh	r3, [r3, #0]
 800f420:	b29b      	uxth	r3, r3
 800f422:	4618      	mov	r0, r3
 800f424:	f000 feed 	bl	8010202 <aci_gap_addr_not_resolved_event>

  return status;
 800f428:	7bfb      	ldrb	r3, [r7, #15]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3710      	adds	r7, #16
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}

0800f432 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 800f432:	b580      	push	{r7, lr}
 800f434:	b084      	sub	sp, #16
 800f436:	af00      	add	r7, sp, #0
 800f438:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f43a:	2300      	movs	r3, #0
 800f43c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	881b      	ldrh	r3, [r3, #0]
 800f446:	b29a      	uxth	r2, r3
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f44e:	4619      	mov	r1, r3
 800f450:	4610      	mov	r0, r2
 800f452:	f000 fee1 	bl	8010218 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 800f456:	7bfb      	ldrb	r3, [r7, #15]
}
 800f458:	4618      	mov	r0, r3
 800f45a:	3710      	adds	r7, #16
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b084      	sub	sp, #16
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f468:	2300      	movs	r3, #0
 800f46a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 800f470:	68bb      	ldr	r3, [r7, #8]
 800f472:	881b      	ldrh	r3, [r3, #0]
 800f474:	b29a      	uxth	r2, r3
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	789b      	ldrb	r3, [r3, #2]
 800f47a:	4619      	mov	r1, r3
 800f47c:	4610      	mov	r0, r2
 800f47e:	f000 fed7 	bl	8010230 <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 800f482:	7bfb      	ldrb	r3, [r7, #15]
}
 800f484:	4618      	mov	r0, r3
 800f486:	3710      	adds	r7, #16
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f494:	2300      	movs	r3, #0
 800f496:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 800f49c:	68bb      	ldr	r3, [r7, #8]
 800f49e:	881b      	ldrh	r3, [r3, #0]
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	68bb      	ldr	r3, [r7, #8]
 800f4a4:	885b      	ldrh	r3, [r3, #2]
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	4619      	mov	r1, r3
 800f4aa:	4610      	mov	r0, r2
 800f4ac:	f001 f80b 	bl	80104c6 <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 800f4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3710      	adds	r7, #16
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 800f4ba:	b580      	push	{r7, lr}
 800f4bc:	b084      	sub	sp, #16
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	881b      	ldrh	r3, [r3, #0]
 800f4ce:	b298      	uxth	r0, r3
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 800f4d8:	461a      	mov	r2, r3
 800f4da:	f001 f802 	bl	80104e2 <aci_l2cap_proc_timeout_event>

  return status;
 800f4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3710      	adds	r7, #16
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 800f4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4ea:	b089      	sub	sp, #36	; 0x24
 800f4ec:	af04      	add	r7, sp, #16
 800f4ee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	881b      	ldrh	r3, [r3, #0]
 800f4fc:	b298      	uxth	r0, r3
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	789c      	ldrb	r4, [r3, #2]
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f508:	b29d      	uxth	r5, r3
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f510:	b29e      	uxth	r6, r3
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f518:	b29b      	uxth	r3, r3
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800f520:	b292      	uxth	r2, r2
 800f522:	68b9      	ldr	r1, [r7, #8]
 800f524:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 800f528:	b289      	uxth	r1, r1
 800f52a:	9102      	str	r1, [sp, #8]
 800f52c:	9201      	str	r2, [sp, #4]
 800f52e:	9300      	str	r3, [sp, #0]
 800f530:	4633      	mov	r3, r6
 800f532:	462a      	mov	r2, r5
 800f534:	4621      	mov	r1, r4
 800f536:	f000 ffe2 	bl	80104fe <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 800f53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f53c:	4618      	mov	r0, r3
 800f53e:	3714      	adds	r7, #20
 800f540:	46bd      	mov	sp, r7
 800f542:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f544 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 800f544:	b590      	push	{r4, r7, lr}
 800f546:	b087      	sub	sp, #28
 800f548:	af02      	add	r7, sp, #8
 800f54a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f54c:	2300      	movs	r3, #0
 800f54e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	881b      	ldrh	r3, [r3, #0]
 800f558:	b298      	uxth	r0, r3
 800f55a:	68bb      	ldr	r3, [r7, #8]
 800f55c:	7899      	ldrb	r1, [r3, #2]
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f564:	b29a      	uxth	r2, r3
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 800f56e:	9300      	str	r3, [sp, #0]
 800f570:	4623      	mov	r3, r4
 800f572:	f000 ffd8 	bl	8010526 <aci_l2cap_command_reject_event>

  return status;
 800f576:	7bfb      	ldrb	r3, [r7, #15]
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3714      	adds	r7, #20
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd90      	pop	{r4, r7, pc}

0800f580 <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 800f580:	b590      	push	{r4, r7, lr}
 800f582:	b087      	sub	sp, #28
 800f584:	af02      	add	r7, sp, #8
 800f586:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f588:	2300      	movs	r3, #0
 800f58a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	881b      	ldrh	r3, [r3, #0]
 800f594:	b298      	uxth	r0, r3
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	885b      	ldrh	r3, [r3, #2]
 800f59a:	b299      	uxth	r1, r3
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	889b      	ldrh	r3, [r3, #4]
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	88db      	ldrh	r3, [r3, #6]
 800f5a6:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 800f5a8:	68bb      	ldr	r3, [r7, #8]
 800f5aa:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 800f5ac:	9300      	str	r3, [sp, #0]
 800f5ae:	4623      	mov	r3, r4
 800f5b0:	f7f6 ffc5 	bl	800653e <aci_gatt_attribute_modified_event>

  return status;
 800f5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3714      	adds	r7, #20
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd90      	pop	{r4, r7, pc}

0800f5be <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b084      	sub	sp, #16
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	881b      	ldrh	r3, [r3, #0]
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	f000 fe39 	bl	801024c <aci_gatt_proc_timeout_event>

  return status;
 800f5da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	3710      	adds	r7, #16
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b084      	sub	sp, #16
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	881b      	ldrh	r3, [r3, #0]
 800f5f8:	b29a      	uxth	r2, r3
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	885b      	ldrh	r3, [r3, #2]
 800f5fe:	b29b      	uxth	r3, r3
 800f600:	4619      	mov	r1, r3
 800f602:	4610      	mov	r0, r2
 800f604:	f000 fe2d 	bl	8010262 <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 800f608:	7bfb      	ldrb	r3, [r7, #15]
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}

0800f612 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 800f612:	b580      	push	{r7, lr}
 800f614:	b084      	sub	sp, #16
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f61a:	2300      	movs	r3, #0
 800f61c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	b298      	uxth	r0, r3
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	7899      	ldrb	r1, [r3, #2]
 800f62c:	68bb      	ldr	r3, [r7, #8]
 800f62e:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 800f634:	f000 fe23 	bl	801027e <aci_att_find_info_resp_event>

  return status;
 800f638:	7bfb      	ldrb	r3, [r7, #15]
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3710      	adds	r7, #16
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}

0800f642 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b0a6      	sub	sp, #152	; 0x98
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f64a:	2300      	movs	r3, #0
 800f64c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 800f656:	2303      	movs	r3, #3
 800f658:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800f65c:	2300      	movs	r3, #0
 800f65e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f662:	e02e      	b.n	800f6c2 <aci_att_find_by_type_value_resp_event_process+0x80>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 800f664:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f66c:	009b      	lsls	r3, r3, #2
 800f66e:	4413      	add	r3, r2
 800f670:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f674:	b29a      	uxth	r2, r3
 800f676:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	3398      	adds	r3, #152	; 0x98
 800f67e:	443b      	add	r3, r7
 800f680:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800f684:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f688:	3302      	adds	r3, #2
 800f68a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 800f68e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	4413      	add	r3, r2
 800f69a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6a4:	009b      	lsls	r3, r3, #2
 800f6a6:	3398      	adds	r3, #152	; 0x98
 800f6a8:	443b      	add	r3, r7
 800f6aa:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800f6ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f6b2:	3302      	adds	r3, #2
 800f6b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 800f6b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6bc:	3301      	adds	r3, #1
 800f6be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f6c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6c6:	789b      	ldrb	r3, [r3, #2]
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	dbc8      	blt.n	800f664 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 800f6d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6d6:	881b      	ldrh	r3, [r3, #0]
 800f6d8:	b298      	uxth	r0, r3
 800f6da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f6de:	789b      	ldrb	r3, [r3, #2]
 800f6e0:	f107 0208 	add.w	r2, r7, #8
 800f6e4:	4619      	mov	r1, r3
 800f6e6:	f000 fdda 	bl	801029e <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 800f6ea:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	3798      	adds	r7, #152	; 0x98
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b084      	sub	sp, #16
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f6fe:	2300      	movs	r3, #0
 800f700:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	881b      	ldrh	r3, [r3, #0]
 800f70a:	b298      	uxth	r0, r3
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	7899      	ldrb	r1, [r3, #2]
 800f710:	68bb      	ldr	r3, [r7, #8]
 800f712:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 800f718:	f000 fdcf 	bl	80102ba <aci_att_read_by_type_resp_event>

  return status;
 800f71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3710      	adds	r7, #16
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b084      	sub	sp, #16
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f72e:	2300      	movs	r3, #0
 800f730:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	881b      	ldrh	r3, [r3, #0]
 800f73a:	b298      	uxth	r0, r3
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 800f744:	461a      	mov	r2, r3
 800f746:	f000 fdc8 	bl	80102da <aci_att_read_resp_event>

  return status;
 800f74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}

0800f754 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f75c:	2300      	movs	r3, #0
 800f75e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	881b      	ldrh	r3, [r3, #0]
 800f768:	b298      	uxth	r0, r3
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 800f772:	461a      	mov	r2, r3
 800f774:	f000 fdbf 	bl	80102f6 <aci_att_read_blob_resp_event>

  return status;
 800f778:	7bfb      	ldrb	r3, [r7, #15]
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3710      	adds	r7, #16
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}

0800f782 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 800f782:	b580      	push	{r7, lr}
 800f784:	b084      	sub	sp, #16
 800f786:	af00      	add	r7, sp, #0
 800f788:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f78a:	2300      	movs	r3, #0
 800f78c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	881b      	ldrh	r3, [r3, #0]
 800f796:	b298      	uxth	r0, r3
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	f000 fdb6 	bl	8010312 <aci_att_read_multiple_resp_event>

  return status;
 800f7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3710      	adds	r7, #16
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b084      	sub	sp, #16
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	b298      	uxth	r0, r3
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	7899      	ldrb	r1, [r3, #2]
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 800f7d2:	f000 fdac 	bl	801032e <aci_att_read_by_group_type_resp_event>

  return status;
 800f7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}

0800f7e0 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 800f7e0:	b590      	push	{r4, r7, lr}
 800f7e2:	b087      	sub	sp, #28
 800f7e4:	af02      	add	r7, sp, #8
 800f7e6:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	881b      	ldrh	r3, [r3, #0]
 800f7f4:	b298      	uxth	r0, r3
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	885b      	ldrh	r3, [r3, #2]
 800f7fa:	b299      	uxth	r1, r3
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	889b      	ldrh	r3, [r3, #4]
 800f800:	b29a      	uxth	r2, r3
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 800f80a:	9300      	str	r3, [sp, #0]
 800f80c:	4623      	mov	r3, r4
 800f80e:	f000 fd9e 	bl	801034e <aci_att_prepare_write_resp_event>

  return status;
 800f812:	7bfb      	ldrb	r3, [r7, #15]
}
 800f814:	4618      	mov	r0, r3
 800f816:	3714      	adds	r7, #20
 800f818:	46bd      	mov	sp, r7
 800f81a:	bd90      	pop	{r4, r7, pc}

0800f81c <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f824:	2300      	movs	r3, #0
 800f826:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	881b      	ldrh	r3, [r3, #0]
 800f830:	b29b      	uxth	r3, r3
 800f832:	4618      	mov	r0, r3
 800f834:	f000 fd9f 	bl	8010376 <aci_att_exec_write_resp_event>

  return status;
 800f838:	7bfb      	ldrb	r3, [r7, #15]
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	3710      	adds	r7, #16
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}

0800f842 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b084      	sub	sp, #16
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f84a:	2300      	movs	r3, #0
 800f84c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	881b      	ldrh	r3, [r3, #0]
 800f856:	b298      	uxth	r0, r3
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	885b      	ldrh	r3, [r3, #2]
 800f85c:	b299      	uxth	r1, r3
 800f85e:	68bb      	ldr	r3, [r7, #8]
 800f860:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 800f866:	f000 fd91 	bl	801038c <aci_gatt_indication_event>

  return status;
 800f86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	3710      	adds	r7, #16
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f87c:	2300      	movs	r3, #0
 800f87e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	881b      	ldrh	r3, [r3, #0]
 800f888:	b298      	uxth	r0, r3
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	885b      	ldrh	r3, [r3, #2]
 800f88e:	b299      	uxth	r1, r3
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 800f898:	f000 fd88 	bl	80103ac <aci_gatt_notification_event>

  return status;
 800f89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3710      	adds	r7, #16
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}

0800f8a6 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 800f8a6:	b580      	push	{r7, lr}
 800f8a8:	b084      	sub	sp, #16
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	881b      	ldrh	r3, [r3, #0]
 800f8ba:	b29a      	uxth	r2, r3
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	789b      	ldrb	r3, [r3, #2]
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	4610      	mov	r0, r2
 800f8c4:	f000 fd82 	bl	80103cc <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 800f8c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b084      	sub	sp, #16
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	881b      	ldrh	r3, [r3, #0]
 800f8e6:	b298      	uxth	r0, r3
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	7899      	ldrb	r1, [r3, #2]
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	68bb      	ldr	r3, [r7, #8]
 800f8f6:	795b      	ldrb	r3, [r3, #5]
 800f8f8:	f000 fd76 	bl	80103e8 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 800f8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3710      	adds	r7, #16
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}

0800f906 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 800f906:	b580      	push	{r7, lr}
 800f908:	b084      	sub	sp, #16
 800f90a:	af00      	add	r7, sp, #0
 800f90c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f90e:	2300      	movs	r3, #0
 800f910:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	881b      	ldrh	r3, [r3, #0]
 800f91a:	b298      	uxth	r0, r3
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	885b      	ldrh	r3, [r3, #2]
 800f920:	b299      	uxth	r1, r3
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 800f92a:	f000 fd71 	bl	8010410 <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 800f92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f930:	4618      	mov	r0, r3
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f940:	2300      	movs	r3, #0
 800f942:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	881b      	ldrh	r3, [r3, #0]
 800f94c:	b298      	uxth	r0, r3
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	885b      	ldrh	r3, [r3, #2]
 800f952:	b299      	uxth	r1, r3
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 800f95c:	f000 fd68 	bl	8010430 <aci_gatt_write_permit_req_event>

  return status;
 800f960:	7bfb      	ldrb	r3, [r7, #15]
}
 800f962:	4618      	mov	r0, r3
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}

0800f96a <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 800f96a:	b580      	push	{r7, lr}
 800f96c:	b084      	sub	sp, #16
 800f96e:	af00      	add	r7, sp, #0
 800f970:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f972:	2300      	movs	r3, #0
 800f974:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	881b      	ldrh	r3, [r3, #0]
 800f97e:	b298      	uxth	r0, r3
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	885b      	ldrh	r3, [r3, #2]
 800f984:	b299      	uxth	r1, r3
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	889b      	ldrh	r3, [r3, #4]
 800f98a:	b29b      	uxth	r3, r3
 800f98c:	461a      	mov	r2, r3
 800f98e:	f7f6 fdc5 	bl	800651c <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 800f992:	7bfb      	ldrb	r3, [r7, #15]
}
 800f994:	4618      	mov	r0, r3
 800f996:	3710      	adds	r7, #16
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b0a6      	sub	sp, #152	; 0x98
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 800f9b0:	2303      	movs	r3, #3
 800f9b2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f9bc:	e019      	b.n	800f9f2 <aci_gatt_read_multi_permit_req_event_process+0x56>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 800f9be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f9c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9c6:	005b      	lsls	r3, r3, #1
 800f9c8:	4413      	add	r3, r2
 800f9ca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9d4:	005b      	lsls	r3, r3, #1
 800f9d6:	3398      	adds	r3, #152	; 0x98
 800f9d8:	443b      	add	r3, r7
 800f9da:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 800f9de:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800f9e2:	3302      	adds	r3, #2
 800f9e4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 800f9e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f9f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f9f6:	789b      	ldrb	r3, [r3, #2]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	dbdd      	blt.n	800f9be <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 800fa02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa06:	881b      	ldrh	r3, [r3, #0]
 800fa08:	b298      	uxth	r0, r3
 800fa0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fa0e:	789b      	ldrb	r3, [r3, #2]
 800fa10:	f107 0208 	add.w	r2, r7, #8
 800fa14:	4619      	mov	r1, r3
 800fa16:	f000 fd1b 	bl	8010450 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 800fa1a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3798      	adds	r7, #152	; 0x98
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b084      	sub	sp, #16
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	881b      	ldrh	r3, [r3, #0]
 800fa3a:	b29a      	uxth	r2, r3
 800fa3c:	68bb      	ldr	r3, [r7, #8]
 800fa3e:	885b      	ldrh	r3, [r3, #2]
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	4619      	mov	r1, r3
 800fa44:	4610      	mov	r0, r2
 800fa46:	f000 fd11 	bl	801046c <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 800fa4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	3710      	adds	r7, #16
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd80      	pop	{r7, pc}

0800fa54 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b084      	sub	sp, #16
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 800fa64:	68bb      	ldr	r3, [r7, #8]
 800fa66:	881b      	ldrh	r3, [r3, #0]
 800fa68:	b29b      	uxth	r3, r3
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f000 fd0c 	bl	8010488 <aci_gatt_server_confirmation_event>

  return status;
 800fa70:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3710      	adds	r7, #16
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}

0800fa7a <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 800fa7a:	b590      	push	{r4, r7, lr}
 800fa7c:	b087      	sub	sp, #28
 800fa7e:	af02      	add	r7, sp, #8
 800fa80:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fa82:	2300      	movs	r3, #0
 800fa84:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	881b      	ldrh	r3, [r3, #0]
 800fa8e:	b298      	uxth	r0, r3
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	885b      	ldrh	r3, [r3, #2]
 800fa94:	b299      	uxth	r1, r3
 800fa96:	68bb      	ldr	r3, [r7, #8]
 800fa98:	889b      	ldrh	r3, [r3, #4]
 800fa9a:	b29a      	uxth	r2, r3
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 800faa4:	9300      	str	r3, [sp, #0]
 800faa6:	4623      	mov	r3, r4
 800faa8:	f000 fcf9 	bl	801049e <aci_gatt_prepare_write_permit_req_event>

  return status;
 800faac:	7bfb      	ldrb	r3, [r7, #15]
}
 800faae:	4618      	mov	r0, r3
 800fab0:	3714      	adds	r7, #20
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd90      	pop	{r4, r7, pc}

0800fab6 <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 800fab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fab8:	b08b      	sub	sp, #44	; 0x2c
 800faba:	af06      	add	r7, sp, #24
 800fabc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fabe:	2300      	movs	r3, #0
 800fac0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	781d      	ldrb	r5, [r3, #0]
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fad0:	b29e      	uxth	r6, r3
 800fad2:	68bb      	ldr	r3, [r7, #8]
 800fad4:	f893 c003 	ldrb.w	ip, [r3, #3]
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 800fae2:	68ba      	ldr	r2, [r7, #8]
 800fae4:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 800fae8:	b292      	uxth	r2, r2
 800faea:	68b9      	ldr	r1, [r7, #8]
 800faec:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 800faf0:	b289      	uxth	r1, r1
 800faf2:	68b8      	ldr	r0, [r7, #8]
 800faf4:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 800faf8:	b280      	uxth	r0, r0
 800fafa:	68bc      	ldr	r4, [r7, #8]
 800fafc:	7c64      	ldrb	r4, [r4, #17]
 800fafe:	9404      	str	r4, [sp, #16]
 800fb00:	9003      	str	r0, [sp, #12]
 800fb02:	9102      	str	r1, [sp, #8]
 800fb04:	9201      	str	r2, [sp, #4]
 800fb06:	9300      	str	r3, [sp, #0]
 800fb08:	4673      	mov	r3, lr
 800fb0a:	4662      	mov	r2, ip
 800fb0c:	4631      	mov	r1, r6
 800fb0e:	4628      	mov	r0, r5
 800fb10:	f7f6 fcb0 	bl	8006474 <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 800fb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3714      	adds	r7, #20
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb1e <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b0a4      	sub	sp, #144	; 0x90
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fb26:	2300      	movs	r3, #0
 800fb28:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 800fb32:	2301      	movs	r3, #1
 800fb34:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800fb38:	2300      	movs	r3, #0
 800fb3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fb3e:	e0b3      	b.n	800fca8 <hci_le_advertising_report_event_process+0x18a>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 800fb40:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fb44:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fb48:	4613      	mov	r3, r2
 800fb4a:	009b      	lsls	r3, r3, #2
 800fb4c:	4413      	add	r3, r2
 800fb4e:	005b      	lsls	r3, r3, #1
 800fb50:	4413      	add	r3, r2
 800fb52:	440b      	add	r3, r1
 800fb54:	3301      	adds	r3, #1
 800fb56:	7819      	ldrb	r1, [r3, #0]
 800fb58:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fb5c:	4613      	mov	r3, r2
 800fb5e:	009b      	lsls	r3, r3, #2
 800fb60:	4413      	add	r3, r2
 800fb62:	009b      	lsls	r3, r3, #2
 800fb64:	3390      	adds	r3, #144	; 0x90
 800fb66:	443b      	add	r3, r7
 800fb68:	3b88      	subs	r3, #136	; 0x88
 800fb6a:	460a      	mov	r2, r1
 800fb6c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800fb6e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fb72:	3301      	adds	r3, #1
 800fb74:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800fb78:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fb7c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fb80:	4613      	mov	r3, r2
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	4413      	add	r3, r2
 800fb86:	005b      	lsls	r3, r3, #1
 800fb88:	4413      	add	r3, r2
 800fb8a:	440b      	add	r3, r1
 800fb8c:	3302      	adds	r3, #2
 800fb8e:	7819      	ldrb	r1, [r3, #0]
 800fb90:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fb94:	4613      	mov	r3, r2
 800fb96:	009b      	lsls	r3, r3, #2
 800fb98:	4413      	add	r3, r2
 800fb9a:	009b      	lsls	r3, r3, #2
 800fb9c:	3390      	adds	r3, #144	; 0x90
 800fb9e:	443b      	add	r3, r7
 800fba0:	3b87      	subs	r3, #135	; 0x87
 800fba2:	460a      	mov	r2, r1
 800fba4:	701a      	strb	r2, [r3, #0]
    size += 1;
 800fba6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fbaa:	3301      	adds	r3, #1
 800fbac:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 800fbb0:	f107 0108 	add.w	r1, r7, #8
 800fbb4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fbb8:	4613      	mov	r3, r2
 800fbba:	009b      	lsls	r3, r3, #2
 800fbbc:	4413      	add	r3, r2
 800fbbe:	009b      	lsls	r3, r3, #2
 800fbc0:	440b      	add	r3, r1
 800fbc2:	1c98      	adds	r0, r3, #2
 800fbc4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fbc8:	4613      	mov	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4413      	add	r3, r2
 800fbce:	005b      	lsls	r3, r3, #1
 800fbd0:	4413      	add	r3, r2
 800fbd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fbd6:	4413      	add	r3, r2
 800fbd8:	3303      	adds	r3, #3
 800fbda:	2206      	movs	r2, #6
 800fbdc:	4619      	mov	r1, r3
 800fbde:	f001 fd2d 	bl	801163c <memcpy>
    size += 6;
 800fbe2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fbe6:	3306      	adds	r3, #6
 800fbe8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 800fbec:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fbf0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fbf4:	4613      	mov	r3, r2
 800fbf6:	009b      	lsls	r3, r3, #2
 800fbf8:	4413      	add	r3, r2
 800fbfa:	005b      	lsls	r3, r3, #1
 800fbfc:	4413      	add	r3, r2
 800fbfe:	440b      	add	r3, r1
 800fc00:	3309      	adds	r3, #9
 800fc02:	7819      	ldrb	r1, [r3, #0]
 800fc04:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fc08:	4613      	mov	r3, r2
 800fc0a:	009b      	lsls	r3, r3, #2
 800fc0c:	4413      	add	r3, r2
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	3390      	adds	r3, #144	; 0x90
 800fc12:	443b      	add	r3, r7
 800fc14:	3b80      	subs	r3, #128	; 0x80
 800fc16:	460a      	mov	r2, r1
 800fc18:	701a      	strb	r2, [r3, #0]
    size += 1;
 800fc1a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fc1e:	3301      	adds	r3, #1
 800fc20:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800fc24:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fc28:	4613      	mov	r3, r2
 800fc2a:	009b      	lsls	r3, r3, #2
 800fc2c:	4413      	add	r3, r2
 800fc2e:	005b      	lsls	r3, r3, #1
 800fc30:	4413      	add	r3, r2
 800fc32:	3308      	adds	r3, #8
 800fc34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fc38:	4413      	add	r3, r2
 800fc3a:	1c99      	adds	r1, r3, #2
 800fc3c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fc40:	4613      	mov	r3, r2
 800fc42:	009b      	lsls	r3, r3, #2
 800fc44:	4413      	add	r3, r2
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	3390      	adds	r3, #144	; 0x90
 800fc4a:	443b      	add	r3, r7
 800fc4c:	3b7c      	subs	r3, #124	; 0x7c
 800fc4e:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 800fc50:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800fc54:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fc58:	4613      	mov	r3, r2
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	4413      	add	r3, r2
 800fc5e:	005b      	lsls	r3, r3, #1
 800fc60:	4413      	add	r3, r2
 800fc62:	440b      	add	r3, r1
 800fc64:	3309      	adds	r3, #9
 800fc66:	781a      	ldrb	r2, [r3, #0]
 800fc68:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fc6c:	4413      	add	r3, r2
 800fc6e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800fc72:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fc76:	687a      	ldr	r2, [r7, #4]
 800fc78:	4413      	add	r3, r2
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	b259      	sxtb	r1, r3
 800fc7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fc82:	4613      	mov	r3, r2
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	4413      	add	r3, r2
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	3390      	adds	r3, #144	; 0x90
 800fc8c:	443b      	add	r3, r7
 800fc8e:	3b78      	subs	r3, #120	; 0x78
 800fc90:	460a      	mov	r2, r1
 800fc92:	701a      	strb	r2, [r3, #0]
    size += 1;
 800fc94:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800fc98:	3301      	adds	r3, #1
 800fc9a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800fc9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fca2:	3301      	adds	r3, #1
 800fca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fca8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fcac:	781b      	ldrb	r3, [r3, #0]
 800fcae:	461a      	mov	r2, r3
 800fcb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fcb4:	4293      	cmp	r3, r2
 800fcb6:	f6ff af43 	blt.w	800fb40 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 800fcba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fcbe:	781b      	ldrb	r3, [r3, #0]
 800fcc0:	f107 0208 	add.w	r2, r7, #8
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f000 f9e3 	bl	8010092 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 800fccc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3790      	adds	r7, #144	; 0x90
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 800fcd8:	b590      	push	{r4, r7, lr}
 800fcda:	b087      	sub	sp, #28
 800fcdc:	af02      	add	r7, sp, #8
 800fcde:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fce0:	2300      	movs	r3, #0
 800fce2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	7818      	ldrb	r0, [r3, #0]
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fcf2:	b299      	uxth	r1, r3
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fcfa:	b29a      	uxth	r2, r3
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800fd02:	b29c      	uxth	r4, r3
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	9300      	str	r3, [sp, #0]
 800fd0e:	4623      	mov	r3, r4
 800fd10:	f000 f9cb 	bl	80100aa <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 800fd14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3714      	adds	r7, #20
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd90      	pop	{r4, r7, pc}

0800fd1e <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800fd1e:	b580      	push	{r7, lr}
 800fd20:	b084      	sub	sp, #16
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fd26:	2300      	movs	r3, #0
 800fd28:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	7818      	ldrb	r0, [r3, #0]
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fd38:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800fd3e:	461a      	mov	r2, r3
 800fd40:	f000 f9c7 	bl	80100d2 <hci_le_read_remote_used_features_complete_event>

  return status;
 800fd44:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}

0800fd4e <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800fd4e:	b580      	push	{r7, lr}
 800fd50:	b084      	sub	sp, #16
 800fd52:	af00      	add	r7, sp, #0
 800fd54:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fd56:	2300      	movs	r3, #0
 800fd58:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800fd5e:	68bb      	ldr	r3, [r7, #8]
 800fd60:	881b      	ldrh	r3, [r3, #0]
 800fd62:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	895b      	ldrh	r3, [r3, #10]
 800fd6c:	b29b      	uxth	r3, r3
 800fd6e:	461a      	mov	r2, r3
 800fd70:	f000 f9bd 	bl	80100ee <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 800fd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3710      	adds	r7, #16
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}

0800fd7e <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800fd7e:	b590      	push	{r4, r7, lr}
 800fd80:	b087      	sub	sp, #28
 800fd82:	af02      	add	r7, sp, #8
 800fd84:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fd86:	2300      	movs	r3, #0
 800fd88:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	881b      	ldrh	r3, [r3, #0]
 800fd92:	b298      	uxth	r0, r3
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	885b      	ldrh	r3, [r3, #2]
 800fd98:	b299      	uxth	r1, r3
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	889b      	ldrh	r3, [r3, #4]
 800fd9e:	b29a      	uxth	r2, r3
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	88db      	ldrh	r3, [r3, #6]
 800fda4:	b29c      	uxth	r4, r3
 800fda6:	68bb      	ldr	r3, [r7, #8]
 800fda8:	891b      	ldrh	r3, [r3, #8]
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	9300      	str	r3, [sp, #0]
 800fdae:	4623      	mov	r3, r4
 800fdb0:	f000 f9ab 	bl	801010a <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 800fdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3714      	adds	r7, #20
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd90      	pop	{r4, r7, pc}

0800fdbe <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 800fdbe:	b580      	push	{r7, lr}
 800fdc0:	b084      	sub	sp, #16
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	4610      	mov	r0, r2
 800fdda:	f000 f9aa 	bl	8010132 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 800fdde:	7bfb      	ldrb	r3, [r7, #15]
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3710      	adds	r7, #16
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}

0800fde8 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b084      	sub	sp, #16
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 800fe00:	4619      	mov	r1, r3
 800fe02:	4610      	mov	r0, r2
 800fe04:	f000 f9a1 	bl	801014a <hci_le_generate_dhkey_complete_event>

  return status;
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3710      	adds	r7, #16
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 800fe12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe16:	b08d      	sub	sp, #52	; 0x34
 800fe18:	af08      	add	r7, sp, #32
 800fe1a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800fe24:	68bb      	ldr	r3, [r7, #8]
 800fe26:	f893 c000 	ldrb.w	ip, [r3]
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fe30:	fa1f fe83 	uxth.w	lr, r3
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	f893 8003 	ldrb.w	r8, [r3, #3]
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 800fe44:	68ba      	ldr	r2, [r7, #8]
 800fe46:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 800fe48:	68b9      	ldr	r1, [r7, #8]
 800fe4a:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800fe4c:	68b8      	ldr	r0, [r7, #8]
 800fe4e:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 800fe52:	b280      	uxth	r0, r0
 800fe54:	68bc      	ldr	r4, [r7, #8]
 800fe56:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 800fe5a:	b2a4      	uxth	r4, r4
 800fe5c:	68bd      	ldr	r5, [r7, #8]
 800fe5e:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 800fe62:	b2ad      	uxth	r5, r5
 800fe64:	68be      	ldr	r6, [r7, #8]
 800fe66:	7f76      	ldrb	r6, [r6, #29]
 800fe68:	9606      	str	r6, [sp, #24]
 800fe6a:	9505      	str	r5, [sp, #20]
 800fe6c:	9404      	str	r4, [sp, #16]
 800fe6e:	9003      	str	r0, [sp, #12]
 800fe70:	9102      	str	r1, [sp, #8]
 800fe72:	9201      	str	r2, [sp, #4]
 800fe74:	9300      	str	r3, [sp, #0]
 800fe76:	464b      	mov	r3, r9
 800fe78:	4642      	mov	r2, r8
 800fe7a:	4671      	mov	r1, lr
 800fe7c:	4660      	mov	r0, ip
 800fe7e:	f000 f970 	bl	8010162 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 800fe82:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	3714      	adds	r7, #20
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800fe8e <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800fe8e:	b580      	push	{r7, lr}
 800fe90:	b0a6      	sub	sp, #152	; 0x98
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800fe96:	2300      	movs	r3, #0
 800fe98:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 800fea2:	2301      	movs	r3, #1
 800fea4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800fea8:	2300      	movs	r3, #0
 800feaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800feae:	e085      	b.n	800ffbc <hci_le_direct_advertising_report_event_process+0x12e>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 800feb0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800feb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800feb8:	011b      	lsls	r3, r3, #4
 800feba:	4413      	add	r3, r2
 800febc:	3301      	adds	r3, #1
 800febe:	781a      	ldrb	r2, [r3, #0]
 800fec0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fec4:	011b      	lsls	r3, r3, #4
 800fec6:	3398      	adds	r3, #152	; 0x98
 800fec8:	443b      	add	r3, r7
 800feca:	3b90      	subs	r3, #144	; 0x90
 800fecc:	701a      	strb	r2, [r3, #0]
    size += 1;
 800fece:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fed2:	3301      	adds	r3, #1
 800fed4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 800fed8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800fedc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fee0:	011b      	lsls	r3, r3, #4
 800fee2:	4413      	add	r3, r2
 800fee4:	3302      	adds	r3, #2
 800fee6:	781a      	ldrb	r2, [r3, #0]
 800fee8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800feec:	011b      	lsls	r3, r3, #4
 800feee:	3398      	adds	r3, #152	; 0x98
 800fef0:	443b      	add	r3, r7
 800fef2:	3b8f      	subs	r3, #143	; 0x8f
 800fef4:	701a      	strb	r2, [r3, #0]
    size += 1;
 800fef6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800fefa:	3301      	adds	r3, #1
 800fefc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 800ff00:	f107 0208 	add.w	r2, r7, #8
 800ff04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff08:	011b      	lsls	r3, r3, #4
 800ff0a:	4413      	add	r3, r2
 800ff0c:	1c98      	adds	r0, r3, #2
 800ff0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff12:	011b      	lsls	r3, r3, #4
 800ff14:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff18:	4413      	add	r3, r2
 800ff1a:	3303      	adds	r3, #3
 800ff1c:	2206      	movs	r2, #6
 800ff1e:	4619      	mov	r1, r3
 800ff20:	f001 fb8c 	bl	801163c <memcpy>
    size += 6;
 800ff24:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ff28:	3306      	adds	r3, #6
 800ff2a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 800ff2e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff36:	011b      	lsls	r3, r3, #4
 800ff38:	4413      	add	r3, r2
 800ff3a:	3309      	adds	r3, #9
 800ff3c:	781a      	ldrb	r2, [r3, #0]
 800ff3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff42:	011b      	lsls	r3, r3, #4
 800ff44:	3398      	adds	r3, #152	; 0x98
 800ff46:	443b      	add	r3, r7
 800ff48:	3b88      	subs	r3, #136	; 0x88
 800ff4a:	701a      	strb	r2, [r3, #0]
    size += 1;
 800ff4c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ff50:	3301      	adds	r3, #1
 800ff52:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800ff56:	f107 0208 	add.w	r2, r7, #8
 800ff5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff5e:	011b      	lsls	r3, r3, #4
 800ff60:	3308      	adds	r3, #8
 800ff62:	4413      	add	r3, r2
 800ff64:	1c58      	adds	r0, r3, #1
 800ff66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff6a:	011b      	lsls	r3, r3, #4
 800ff6c:	3308      	adds	r3, #8
 800ff6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff72:	4413      	add	r3, r2
 800ff74:	3302      	adds	r3, #2
 800ff76:	2206      	movs	r2, #6
 800ff78:	4619      	mov	r1, r3
 800ff7a:	f001 fb5f 	bl	801163c <memcpy>
    size += 6;
 800ff7e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ff82:	3306      	adds	r3, #6
 800ff84:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800ff88:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff90:	011b      	lsls	r3, r3, #4
 800ff92:	4413      	add	r3, r2
 800ff94:	3310      	adds	r3, #16
 800ff96:	f993 2000 	ldrsb.w	r2, [r3]
 800ff9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff9e:	011b      	lsls	r3, r3, #4
 800ffa0:	3398      	adds	r3, #152	; 0x98
 800ffa2:	443b      	add	r3, r7
 800ffa4:	3b81      	subs	r3, #129	; 0x81
 800ffa6:	701a      	strb	r2, [r3, #0]
    size += 1;
 800ffa8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800ffac:	3301      	adds	r3, #1
 800ffae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 800ffb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ffbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ffc8:	4293      	cmp	r3, r2
 800ffca:	f6ff af71 	blt.w	800feb0 <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 800ffce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	f107 0208 	add.w	r2, r7, #8
 800ffd8:	4611      	mov	r1, r2
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f000 f8d5 	bl	801018a <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 800ffe0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3798      	adds	r7, #152	; 0x98
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	4603      	mov	r3, r0
 800fff4:	71fb      	strb	r3, [r7, #7]
 800fff6:	460b      	mov	r3, r1
 800fff8:	80bb      	strh	r3, [r7, #4]
 800fffa:	4613      	mov	r3, r2
 800fffc:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 800fffe:	bf00      	nop
 8010000:	370c      	adds	r7, #12
 8010002:	46bd      	mov	sp, r7
 8010004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010008:	4770      	bx	lr

0801000a <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 801000a:	b490      	push	{r4, r7}
 801000c:	b082      	sub	sp, #8
 801000e:	af00      	add	r7, sp, #0
 8010010:	4604      	mov	r4, r0
 8010012:	4608      	mov	r0, r1
 8010014:	4611      	mov	r1, r2
 8010016:	461a      	mov	r2, r3
 8010018:	4623      	mov	r3, r4
 801001a:	71fb      	strb	r3, [r7, #7]
 801001c:	4603      	mov	r3, r0
 801001e:	80bb      	strh	r3, [r7, #4]
 8010020:	460b      	mov	r3, r1
 8010022:	71bb      	strb	r3, [r7, #6]
 8010024:	4613      	mov	r3, r2
 8010026:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 8010028:	bf00      	nop
 801002a:	3708      	adds	r7, #8
 801002c:	46bd      	mov	sp, r7
 801002e:	bc90      	pop	{r4, r7}
 8010030:	4770      	bx	lr

08010032 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8010032:	b480      	push	{r7}
 8010034:	b083      	sub	sp, #12
 8010036:	af00      	add	r7, sp, #0
 8010038:	4603      	mov	r3, r0
 801003a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 801003c:	bf00      	nop
 801003e:	370c      	adds	r7, #12
 8010040:	46bd      	mov	sp, r7
 8010042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010046:	4770      	bx	lr

08010048 <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	4603      	mov	r3, r0
 8010050:	6039      	str	r1, [r7, #0]
 8010052:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 8010054:	bf00      	nop
 8010056:	370c      	adds	r7, #12
 8010058:	46bd      	mov	sp, r7
 801005a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005e:	4770      	bx	lr

08010060 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8010060:	b480      	push	{r7}
 8010062:	b083      	sub	sp, #12
 8010064:	af00      	add	r7, sp, #0
 8010066:	4603      	mov	r3, r0
 8010068:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 801006a:	bf00      	nop
 801006c:	370c      	adds	r7, #12
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr

08010076 <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 8010076:	b480      	push	{r7}
 8010078:	b083      	sub	sp, #12
 801007a:	af00      	add	r7, sp, #0
 801007c:	4603      	mov	r3, r0
 801007e:	460a      	mov	r2, r1
 8010080:	71fb      	strb	r3, [r7, #7]
 8010082:	4613      	mov	r3, r2
 8010084:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 8010086:	bf00      	nop
 8010088:	370c      	adds	r7, #12
 801008a:	46bd      	mov	sp, r7
 801008c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010090:	4770      	bx	lr

08010092 <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 8010092:	b480      	push	{r7}
 8010094:	b083      	sub	sp, #12
 8010096:	af00      	add	r7, sp, #0
 8010098:	4603      	mov	r3, r0
 801009a:	6039      	str	r1, [r7, #0]
 801009c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 801009e:	bf00      	nop
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr

080100aa <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 80100aa:	b490      	push	{r4, r7}
 80100ac:	b082      	sub	sp, #8
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	4604      	mov	r4, r0
 80100b2:	4608      	mov	r0, r1
 80100b4:	4611      	mov	r1, r2
 80100b6:	461a      	mov	r2, r3
 80100b8:	4623      	mov	r3, r4
 80100ba:	71fb      	strb	r3, [r7, #7]
 80100bc:	4603      	mov	r3, r0
 80100be:	80bb      	strh	r3, [r7, #4]
 80100c0:	460b      	mov	r3, r1
 80100c2:	807b      	strh	r3, [r7, #2]
 80100c4:	4613      	mov	r3, r2
 80100c6:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 80100c8:	bf00      	nop
 80100ca:	3708      	adds	r7, #8
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bc90      	pop	{r4, r7}
 80100d0:	4770      	bx	lr

080100d2 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 80100d2:	b480      	push	{r7}
 80100d4:	b083      	sub	sp, #12
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	4603      	mov	r3, r0
 80100da:	603a      	str	r2, [r7, #0]
 80100dc:	71fb      	strb	r3, [r7, #7]
 80100de:	460b      	mov	r3, r1
 80100e0:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 80100e2:	bf00      	nop
 80100e4:	370c      	adds	r7, #12
 80100e6:	46bd      	mov	sp, r7
 80100e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ec:	4770      	bx	lr

080100ee <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 80100ee:	b480      	push	{r7}
 80100f0:	b083      	sub	sp, #12
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	4603      	mov	r3, r0
 80100f6:	6039      	str	r1, [r7, #0]
 80100f8:	80fb      	strh	r3, [r7, #6]
 80100fa:	4613      	mov	r3, r2
 80100fc:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 80100fe:	bf00      	nop
 8010100:	370c      	adds	r7, #12
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr

0801010a <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 801010a:	b490      	push	{r4, r7}
 801010c:	b082      	sub	sp, #8
 801010e:	af00      	add	r7, sp, #0
 8010110:	4604      	mov	r4, r0
 8010112:	4608      	mov	r0, r1
 8010114:	4611      	mov	r1, r2
 8010116:	461a      	mov	r2, r3
 8010118:	4623      	mov	r3, r4
 801011a:	80fb      	strh	r3, [r7, #6]
 801011c:	4603      	mov	r3, r0
 801011e:	80bb      	strh	r3, [r7, #4]
 8010120:	460b      	mov	r3, r1
 8010122:	807b      	strh	r3, [r7, #2]
 8010124:	4613      	mov	r3, r2
 8010126:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 8010128:	bf00      	nop
 801012a:	3708      	adds	r7, #8
 801012c:	46bd      	mov	sp, r7
 801012e:	bc90      	pop	{r4, r7}
 8010130:	4770      	bx	lr

08010132 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8010132:	b480      	push	{r7}
 8010134:	b083      	sub	sp, #12
 8010136:	af00      	add	r7, sp, #0
 8010138:	4603      	mov	r3, r0
 801013a:	6039      	str	r1, [r7, #0]
 801013c:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 801013e:	bf00      	nop
 8010140:	370c      	adds	r7, #12
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr

0801014a <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 801014a:	b480      	push	{r7}
 801014c:	b083      	sub	sp, #12
 801014e:	af00      	add	r7, sp, #0
 8010150:	4603      	mov	r3, r0
 8010152:	6039      	str	r1, [r7, #0]
 8010154:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 8010156:	bf00      	nop
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr

08010162 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8010162:	b490      	push	{r4, r7}
 8010164:	b082      	sub	sp, #8
 8010166:	af00      	add	r7, sp, #0
 8010168:	4604      	mov	r4, r0
 801016a:	4608      	mov	r0, r1
 801016c:	4611      	mov	r1, r2
 801016e:	461a      	mov	r2, r3
 8010170:	4623      	mov	r3, r4
 8010172:	71fb      	strb	r3, [r7, #7]
 8010174:	4603      	mov	r3, r0
 8010176:	80bb      	strh	r3, [r7, #4]
 8010178:	460b      	mov	r3, r1
 801017a:	71bb      	strb	r3, [r7, #6]
 801017c:	4613      	mov	r3, r2
 801017e:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8010180:	bf00      	nop
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bc90      	pop	{r4, r7}
 8010188:	4770      	bx	lr

0801018a <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 801018a:	b480      	push	{r7}
 801018c:	b083      	sub	sp, #12
 801018e:	af00      	add	r7, sp, #0
 8010190:	4603      	mov	r3, r0
 8010192:	6039      	str	r1, [r7, #0]
 8010194:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 8010196:	bf00      	nop
 8010198:	370c      	adds	r7, #12
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr

080101a2 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 80101a2:	b480      	push	{r7}
 80101a4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 80101a6:	bf00      	nop
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr

080101b0 <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 80101b0:	b480      	push	{r7}
 80101b2:	b083      	sub	sp, #12
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	4603      	mov	r3, r0
 80101b8:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 80101ba:	bf00      	nop
 80101bc:	370c      	adds	r7, #12
 80101be:	46bd      	mov	sp, r7
 80101c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c4:	4770      	bx	lr

080101c6 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 80101c6:	b480      	push	{r7}
 80101c8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 80101ca:	bf00      	nop
 80101cc:	46bd      	mov	sp, r7
 80101ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d2:	4770      	bx	lr

080101d4 <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 80101d4:	b480      	push	{r7}
 80101d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 80101d8:	bf00      	nop
 80101da:	46bd      	mov	sp, r7
 80101dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e0:	4770      	bx	lr

080101e2 <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 80101e2:	b480      	push	{r7}
 80101e4:	b083      	sub	sp, #12
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	603b      	str	r3, [r7, #0]
 80101ea:	4603      	mov	r3, r0
 80101ec:	71fb      	strb	r3, [r7, #7]
 80101ee:	460b      	mov	r3, r1
 80101f0:	71bb      	strb	r3, [r7, #6]
 80101f2:	4613      	mov	r3, r2
 80101f4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 80101f6:	bf00      	nop
 80101f8:	370c      	adds	r7, #12
 80101fa:	46bd      	mov	sp, r7
 80101fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010200:	4770      	bx	lr

08010202 <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 8010202:	b480      	push	{r7}
 8010204:	b083      	sub	sp, #12
 8010206:	af00      	add	r7, sp, #0
 8010208:	4603      	mov	r3, r0
 801020a:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 801020c:	bf00      	nop
 801020e:	370c      	adds	r7, #12
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8010218:	b480      	push	{r7}
 801021a:	b083      	sub	sp, #12
 801021c:	af00      	add	r7, sp, #0
 801021e:	4603      	mov	r3, r0
 8010220:	6039      	str	r1, [r7, #0]
 8010222:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 8010224:	bf00      	nop
 8010226:	370c      	adds	r7, #12
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 8010230:	b480      	push	{r7}
 8010232:	b083      	sub	sp, #12
 8010234:	af00      	add	r7, sp, #0
 8010236:	4603      	mov	r3, r0
 8010238:	460a      	mov	r2, r1
 801023a:	80fb      	strh	r3, [r7, #6]
 801023c:	4613      	mov	r3, r2
 801023e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 8010240:	bf00      	nop
 8010242:	370c      	adds	r7, #12
 8010244:	46bd      	mov	sp, r7
 8010246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024a:	4770      	bx	lr

0801024c <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 801024c:	b480      	push	{r7}
 801024e:	b083      	sub	sp, #12
 8010250:	af00      	add	r7, sp, #0
 8010252:	4603      	mov	r3, r0
 8010254:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8010256:	bf00      	nop
 8010258:	370c      	adds	r7, #12
 801025a:	46bd      	mov	sp, r7
 801025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010260:	4770      	bx	lr

08010262 <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 8010262:	b480      	push	{r7}
 8010264:	b083      	sub	sp, #12
 8010266:	af00      	add	r7, sp, #0
 8010268:	4603      	mov	r3, r0
 801026a:	460a      	mov	r2, r1
 801026c:	80fb      	strh	r3, [r7, #6]
 801026e:	4613      	mov	r3, r2
 8010270:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 8010272:	bf00      	nop
 8010274:	370c      	adds	r7, #12
 8010276:	46bd      	mov	sp, r7
 8010278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027c:	4770      	bx	lr

0801027e <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 801027e:	b480      	push	{r7}
 8010280:	b083      	sub	sp, #12
 8010282:	af00      	add	r7, sp, #0
 8010284:	603b      	str	r3, [r7, #0]
 8010286:	4603      	mov	r3, r0
 8010288:	80fb      	strh	r3, [r7, #6]
 801028a:	460b      	mov	r3, r1
 801028c:	717b      	strb	r3, [r7, #5]
 801028e:	4613      	mov	r3, r2
 8010290:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 8010292:	bf00      	nop
 8010294:	370c      	adds	r7, #12
 8010296:	46bd      	mov	sp, r7
 8010298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029c:	4770      	bx	lr

0801029e <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 801029e:	b480      	push	{r7}
 80102a0:	b083      	sub	sp, #12
 80102a2:	af00      	add	r7, sp, #0
 80102a4:	4603      	mov	r3, r0
 80102a6:	603a      	str	r2, [r7, #0]
 80102a8:	80fb      	strh	r3, [r7, #6]
 80102aa:	460b      	mov	r3, r1
 80102ac:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 80102ae:	bf00      	nop
 80102b0:	370c      	adds	r7, #12
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr

080102ba <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 80102ba:	b480      	push	{r7}
 80102bc:	b083      	sub	sp, #12
 80102be:	af00      	add	r7, sp, #0
 80102c0:	603b      	str	r3, [r7, #0]
 80102c2:	4603      	mov	r3, r0
 80102c4:	80fb      	strh	r3, [r7, #6]
 80102c6:	460b      	mov	r3, r1
 80102c8:	717b      	strb	r3, [r7, #5]
 80102ca:	4613      	mov	r3, r2
 80102cc:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 80102ce:	bf00      	nop
 80102d0:	370c      	adds	r7, #12
 80102d2:	46bd      	mov	sp, r7
 80102d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d8:	4770      	bx	lr

080102da <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 80102da:	b480      	push	{r7}
 80102dc:	b083      	sub	sp, #12
 80102de:	af00      	add	r7, sp, #0
 80102e0:	4603      	mov	r3, r0
 80102e2:	603a      	str	r2, [r7, #0]
 80102e4:	80fb      	strh	r3, [r7, #6]
 80102e6:	460b      	mov	r3, r1
 80102e8:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 80102ea:	bf00      	nop
 80102ec:	370c      	adds	r7, #12
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr

080102f6 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 80102f6:	b480      	push	{r7}
 80102f8:	b083      	sub	sp, #12
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	4603      	mov	r3, r0
 80102fe:	603a      	str	r2, [r7, #0]
 8010300:	80fb      	strh	r3, [r7, #6]
 8010302:	460b      	mov	r3, r1
 8010304:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8010306:	bf00      	nop
 8010308:	370c      	adds	r7, #12
 801030a:	46bd      	mov	sp, r7
 801030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010310:	4770      	bx	lr

08010312 <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 8010312:	b480      	push	{r7}
 8010314:	b083      	sub	sp, #12
 8010316:	af00      	add	r7, sp, #0
 8010318:	4603      	mov	r3, r0
 801031a:	603a      	str	r2, [r7, #0]
 801031c:	80fb      	strh	r3, [r7, #6]
 801031e:	460b      	mov	r3, r1
 8010320:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 8010322:	bf00      	nop
 8010324:	370c      	adds	r7, #12
 8010326:	46bd      	mov	sp, r7
 8010328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032c:	4770      	bx	lr

0801032e <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 801032e:	b480      	push	{r7}
 8010330:	b083      	sub	sp, #12
 8010332:	af00      	add	r7, sp, #0
 8010334:	603b      	str	r3, [r7, #0]
 8010336:	4603      	mov	r3, r0
 8010338:	80fb      	strh	r3, [r7, #6]
 801033a:	460b      	mov	r3, r1
 801033c:	717b      	strb	r3, [r7, #5]
 801033e:	4613      	mov	r3, r2
 8010340:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 8010342:	bf00      	nop
 8010344:	370c      	adds	r7, #12
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr

0801034e <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 801034e:	b490      	push	{r4, r7}
 8010350:	b082      	sub	sp, #8
 8010352:	af00      	add	r7, sp, #0
 8010354:	4604      	mov	r4, r0
 8010356:	4608      	mov	r0, r1
 8010358:	4611      	mov	r1, r2
 801035a:	461a      	mov	r2, r3
 801035c:	4623      	mov	r3, r4
 801035e:	80fb      	strh	r3, [r7, #6]
 8010360:	4603      	mov	r3, r0
 8010362:	80bb      	strh	r3, [r7, #4]
 8010364:	460b      	mov	r3, r1
 8010366:	807b      	strh	r3, [r7, #2]
 8010368:	4613      	mov	r3, r2
 801036a:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 801036c:	bf00      	nop
 801036e:	3708      	adds	r7, #8
 8010370:	46bd      	mov	sp, r7
 8010372:	bc90      	pop	{r4, r7}
 8010374:	4770      	bx	lr

08010376 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 8010376:	b480      	push	{r7}
 8010378:	b083      	sub	sp, #12
 801037a:	af00      	add	r7, sp, #0
 801037c:	4603      	mov	r3, r0
 801037e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 8010380:	bf00      	nop
 8010382:	370c      	adds	r7, #12
 8010384:	46bd      	mov	sp, r7
 8010386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038a:	4770      	bx	lr

0801038c <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 801038c:	b480      	push	{r7}
 801038e:	b085      	sub	sp, #20
 8010390:	af00      	add	r7, sp, #0
 8010392:	607b      	str	r3, [r7, #4]
 8010394:	4603      	mov	r3, r0
 8010396:	81fb      	strh	r3, [r7, #14]
 8010398:	460b      	mov	r3, r1
 801039a:	81bb      	strh	r3, [r7, #12]
 801039c:	4613      	mov	r3, r2
 801039e:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 80103a0:	bf00      	nop
 80103a2:	3714      	adds	r7, #20
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <aci_gatt_notification_event>:
*/
WEAK_FUNCTION(void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[]))
{
 80103ac:	b480      	push	{r7}
 80103ae:	b085      	sub	sp, #20
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	607b      	str	r3, [r7, #4]
 80103b4:	4603      	mov	r3, r0
 80103b6:	81fb      	strh	r3, [r7, #14]
 80103b8:	460b      	mov	r3, r1
 80103ba:	81bb      	strh	r3, [r7, #12]
 80103bc:	4613      	mov	r3, r2
 80103be:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_notification_event\r\n");
}
 80103c0:	bf00      	nop
 80103c2:	3714      	adds	r7, #20
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 80103cc:	b480      	push	{r7}
 80103ce:	b083      	sub	sp, #12
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	4603      	mov	r3, r0
 80103d4:	460a      	mov	r2, r1
 80103d6:	80fb      	strh	r3, [r7, #6]
 80103d8:	4613      	mov	r3, r2
 80103da:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 80103dc:	bf00      	nop
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 80103e8:	b490      	push	{r4, r7}
 80103ea:	b082      	sub	sp, #8
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	4604      	mov	r4, r0
 80103f0:	4608      	mov	r0, r1
 80103f2:	4611      	mov	r1, r2
 80103f4:	461a      	mov	r2, r3
 80103f6:	4623      	mov	r3, r4
 80103f8:	80fb      	strh	r3, [r7, #6]
 80103fa:	4603      	mov	r3, r0
 80103fc:	717b      	strb	r3, [r7, #5]
 80103fe:	460b      	mov	r3, r1
 8010400:	807b      	strh	r3, [r7, #2]
 8010402:	4613      	mov	r3, r2
 8010404:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8010406:	bf00      	nop
 8010408:	3708      	adds	r7, #8
 801040a:	46bd      	mov	sp, r7
 801040c:	bc90      	pop	{r4, r7}
 801040e:	4770      	bx	lr

08010410 <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 8010410:	b480      	push	{r7}
 8010412:	b085      	sub	sp, #20
 8010414:	af00      	add	r7, sp, #0
 8010416:	607b      	str	r3, [r7, #4]
 8010418:	4603      	mov	r3, r0
 801041a:	81fb      	strh	r3, [r7, #14]
 801041c:	460b      	mov	r3, r1
 801041e:	81bb      	strh	r3, [r7, #12]
 8010420:	4613      	mov	r3, r2
 8010422:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 8010424:	bf00      	nop
 8010426:	3714      	adds	r7, #20
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 8010430:	b480      	push	{r7}
 8010432:	b085      	sub	sp, #20
 8010434:	af00      	add	r7, sp, #0
 8010436:	607b      	str	r3, [r7, #4]
 8010438:	4603      	mov	r3, r0
 801043a:	81fb      	strh	r3, [r7, #14]
 801043c:	460b      	mov	r3, r1
 801043e:	81bb      	strh	r3, [r7, #12]
 8010440:	4613      	mov	r3, r2
 8010442:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 8010444:	bf00      	nop
 8010446:	3714      	adds	r7, #20
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr

08010450 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8010450:	b480      	push	{r7}
 8010452:	b083      	sub	sp, #12
 8010454:	af00      	add	r7, sp, #0
 8010456:	4603      	mov	r3, r0
 8010458:	603a      	str	r2, [r7, #0]
 801045a:	80fb      	strh	r3, [r7, #6]
 801045c:	460b      	mov	r3, r1
 801045e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8010460:	bf00      	nop
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr

0801046c <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
 8010472:	4603      	mov	r3, r0
 8010474:	460a      	mov	r2, r1
 8010476:	80fb      	strh	r3, [r7, #6]
 8010478:	4613      	mov	r3, r2
 801047a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 801047c:	bf00      	nop
 801047e:	370c      	adds	r7, #12
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr

08010488 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 8010488:	b480      	push	{r7}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	4603      	mov	r3, r0
 8010490:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 8010492:	bf00      	nop
 8010494:	370c      	adds	r7, #12
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 801049e:	b490      	push	{r4, r7}
 80104a0:	b082      	sub	sp, #8
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	4604      	mov	r4, r0
 80104a6:	4608      	mov	r0, r1
 80104a8:	4611      	mov	r1, r2
 80104aa:	461a      	mov	r2, r3
 80104ac:	4623      	mov	r3, r4
 80104ae:	80fb      	strh	r3, [r7, #6]
 80104b0:	4603      	mov	r3, r0
 80104b2:	80bb      	strh	r3, [r7, #4]
 80104b4:	460b      	mov	r3, r1
 80104b6:	807b      	strh	r3, [r7, #2]
 80104b8:	4613      	mov	r3, r2
 80104ba:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 80104bc:	bf00      	nop
 80104be:	3708      	adds	r7, #8
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bc90      	pop	{r4, r7}
 80104c4:	4770      	bx	lr

080104c6 <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 80104c6:	b480      	push	{r7}
 80104c8:	b083      	sub	sp, #12
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	4603      	mov	r3, r0
 80104ce:	460a      	mov	r2, r1
 80104d0:	80fb      	strh	r3, [r7, #6]
 80104d2:	4613      	mov	r3, r2
 80104d4:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 80104d6:	bf00      	nop
 80104d8:	370c      	adds	r7, #12
 80104da:	46bd      	mov	sp, r7
 80104dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e0:	4770      	bx	lr

080104e2 <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 80104e2:	b480      	push	{r7}
 80104e4:	b083      	sub	sp, #12
 80104e6:	af00      	add	r7, sp, #0
 80104e8:	4603      	mov	r3, r0
 80104ea:	603a      	str	r2, [r7, #0]
 80104ec:	80fb      	strh	r3, [r7, #6]
 80104ee:	460b      	mov	r3, r1
 80104f0:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 80104f2:	bf00      	nop
 80104f4:	370c      	adds	r7, #12
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 80104fe:	b490      	push	{r4, r7}
 8010500:	b082      	sub	sp, #8
 8010502:	af00      	add	r7, sp, #0
 8010504:	4604      	mov	r4, r0
 8010506:	4608      	mov	r0, r1
 8010508:	4611      	mov	r1, r2
 801050a:	461a      	mov	r2, r3
 801050c:	4623      	mov	r3, r4
 801050e:	80fb      	strh	r3, [r7, #6]
 8010510:	4603      	mov	r3, r0
 8010512:	717b      	strb	r3, [r7, #5]
 8010514:	460b      	mov	r3, r1
 8010516:	807b      	strh	r3, [r7, #2]
 8010518:	4613      	mov	r3, r2
 801051a:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 801051c:	bf00      	nop
 801051e:	3708      	adds	r7, #8
 8010520:	46bd      	mov	sp, r7
 8010522:	bc90      	pop	{r4, r7}
 8010524:	4770      	bx	lr

08010526 <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8010526:	b490      	push	{r4, r7}
 8010528:	b082      	sub	sp, #8
 801052a:	af00      	add	r7, sp, #0
 801052c:	4604      	mov	r4, r0
 801052e:	4608      	mov	r0, r1
 8010530:	4611      	mov	r1, r2
 8010532:	461a      	mov	r2, r3
 8010534:	4623      	mov	r3, r4
 8010536:	80fb      	strh	r3, [r7, #6]
 8010538:	4603      	mov	r3, r0
 801053a:	717b      	strb	r3, [r7, #5]
 801053c:	460b      	mov	r3, r1
 801053e:	807b      	strh	r3, [r7, #2]
 8010540:	4613      	mov	r3, r2
 8010542:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8010544:	bf00      	nop
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bc90      	pop	{r4, r7}
 801054c:	4770      	bx	lr

0801054e <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 801054e:	b480      	push	{r7}
 8010550:	b083      	sub	sp, #12
 8010552:	af00      	add	r7, sp, #0
 8010554:	4603      	mov	r3, r0
 8010556:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8010558:	bf00      	nop
 801055a:	370c      	adds	r7, #12
 801055c:	46bd      	mov	sp, r7
 801055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010562:	4770      	bx	lr

08010564 <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8010564:	b480      	push	{r7}
 8010566:	b083      	sub	sp, #12
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 801056c:	bf00      	nop
 801056e:	370c      	adds	r7, #12
 8010570:	46bd      	mov	sp, r7
 8010572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010576:	4770      	bx	lr

08010578 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	60b9      	str	r1, [r7, #8]
 8010580:	607a      	str	r2, [r7, #4]
 8010582:	603b      	str	r3, [r7, #0]
 8010584:	4603      	mov	r3, r0
 8010586:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8010588:	bf00      	nop
 801058a:	3714      	adds	r7, #20
 801058c:	46bd      	mov	sp, r7
 801058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010592:	4770      	bx	lr

08010594 <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	4603      	mov	r3, r0
 801059c:	603a      	str	r2, [r7, #0]
 801059e:	71fb      	strb	r3, [r7, #7]
 80105a0:	460b      	mov	r3, r1
 80105a2:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 80105a4:	bf00      	nop
 80105a6:	370c      	adds	r7, #12
 80105a8:	46bd      	mov	sp, r7
 80105aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ae:	4770      	bx	lr

080105b0 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	4603      	mov	r3, r0
 80105b8:	603a      	str	r2, [r7, #0]
 80105ba:	71fb      	strb	r3, [r7, #7]
 80105bc:	460b      	mov	r3, r1
 80105be:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 80105c0:	bf00      	nop
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	4603      	mov	r3, r0
 80105d4:	603a      	str	r2, [r7, #0]
 80105d6:	71fb      	strb	r3, [r7, #7]
 80105d8:	460b      	mov	r3, r1
 80105da:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 80105dc:	bf00      	nop
 80105de:	370c      	adds	r7, #12
 80105e0:	46bd      	mov	sp, r7
 80105e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e6:	4770      	bx	lr

080105e8 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b088      	sub	sp, #32
 80105ec:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80105ee:	2300      	movs	r3, #0
 80105f0:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80105f2:	f107 0308 	add.w	r3, r7, #8
 80105f6:	2218      	movs	r2, #24
 80105f8:	2100      	movs	r1, #0
 80105fa:	4618      	mov	r0, r3
 80105fc:	f000 ff92 	bl	8011524 <memset>
  rq.ogf = 0x03;
 8010600:	2303      	movs	r3, #3
 8010602:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8010604:	2303      	movs	r3, #3
 8010606:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010608:	1dfb      	adds	r3, r7, #7
 801060a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801060c:	2301      	movs	r3, #1
 801060e:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8010610:	f107 0308 	add.w	r3, r7, #8
 8010614:	2100      	movs	r1, #0
 8010616:	4618      	mov	r0, r3
 8010618:	f000 f9ca 	bl	80109b0 <hci_send_req>
 801061c:	4603      	mov	r3, r0
 801061e:	2b00      	cmp	r3, #0
 8010620:	da01      	bge.n	8010626 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010622:	23ff      	movs	r3, #255	; 0xff
 8010624:	e005      	b.n	8010632 <hci_reset+0x4a>
  if (status) {
 8010626:	79fb      	ldrb	r3, [r7, #7]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d001      	beq.n	8010630 <hci_reset+0x48>
    return status;
 801062c:	79fb      	ldrb	r3, [r7, #7]
 801062e:	e000      	b.n	8010632 <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8010630:	2300      	movs	r3, #0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3720      	adds	r7, #32
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}

0801063a <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information(uint8_t *HCI_Version,
                                              uint16_t *HCI_Revision,
                                              uint8_t *LMP_PAL_Version,
                                              uint16_t *Manufacturer_Name,
                                              uint16_t *LMP_PAL_Subversion)
{
 801063a:	b580      	push	{r7, lr}
 801063c:	b08e      	sub	sp, #56	; 0x38
 801063e:	af00      	add	r7, sp, #0
 8010640:	60f8      	str	r0, [r7, #12]
 8010642:	60b9      	str	r1, [r7, #8]
 8010644:	607a      	str	r2, [r7, #4]
 8010646:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8010648:	f107 0314 	add.w	r3, r7, #20
 801064c:	2209      	movs	r2, #9
 801064e:	2100      	movs	r1, #0
 8010650:	4618      	mov	r0, r3
 8010652:	f000 ff67 	bl	8011524 <memset>
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8010656:	f107 0320 	add.w	r3, r7, #32
 801065a:	2218      	movs	r2, #24
 801065c:	2100      	movs	r1, #0
 801065e:	4618      	mov	r0, r3
 8010660:	f000 ff60 	bl	8011524 <memset>
  rq.ogf = 0x04;
 8010664:	2304      	movs	r3, #4
 8010666:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 8010668:	2301      	movs	r3, #1
 801066a:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 801066c:	f107 0314 	add.w	r3, r7, #20
 8010670:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 8010672:	2309      	movs	r3, #9
 8010674:	637b      	str	r3, [r7, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 8010676:	f107 0320 	add.w	r3, r7, #32
 801067a:	2100      	movs	r1, #0
 801067c:	4618      	mov	r0, r3
 801067e:	f000 f997 	bl	80109b0 <hci_send_req>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	da01      	bge.n	801068c <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 8010688:	23ff      	movs	r3, #255	; 0xff
 801068a:	e018      	b.n	80106be <hci_read_local_version_information+0x84>
  if (resp.Status) {
 801068c:	7d3b      	ldrb	r3, [r7, #20]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d001      	beq.n	8010696 <hci_read_local_version_information+0x5c>
    return resp.Status;
 8010692:	7d3b      	ldrb	r3, [r7, #20]
 8010694:	e013      	b.n	80106be <hci_read_local_version_information+0x84>
  }
  *HCI_Version = btoh(resp.HCI_Version, 1);
 8010696:	7d7a      	ldrb	r2, [r7, #21]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	701a      	strb	r2, [r3, #0]
  *HCI_Revision = btoh(resp.HCI_Revision, 2);
 801069c:	8afa      	ldrh	r2, [r7, #22]
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Version = btoh(resp.LMP_PAL_Version, 1);
 80106a2:	7e3a      	ldrb	r2, [r7, #24]
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	701a      	strb	r2, [r3, #0]
  *Manufacturer_Name = btoh(resp.Manufacturer_Name, 2);
 80106a8:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80106ac:	b29a      	uxth	r2, r3
 80106ae:	683b      	ldr	r3, [r7, #0]
 80106b0:	801a      	strh	r2, [r3, #0]
  *LMP_PAL_Subversion = btoh(resp.LMP_PAL_Subversion, 2);
 80106b2:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106ba:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80106bc:	2300      	movs	r3, #0
}
 80106be:	4618      	mov	r0, r3
 80106c0:	3738      	adds	r7, #56	; 0x38
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}

080106c6 <hci_le_set_scan_response_data>:
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_le_set_scan_response_data(uint8_t Scan_Response_Data_Length,
                                         uint8_t Scan_Response_Data[31])
{
 80106c6:	b580      	push	{r7, lr}
 80106c8:	b0cc      	sub	sp, #304	; 0x130
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	4602      	mov	r2, r0
 80106ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80106d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80106d6:	6019      	str	r1, [r3, #0]
 80106d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80106dc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80106e0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 80106e2:	f107 030c 	add.w	r3, r7, #12
 80106e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80106ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80106ee:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80106f2:	2200      	movs	r2, #0
 80106f4:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 80106f6:	2300      	movs	r3, #0
 80106f8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Scan_Response_Data_Length = htob(Scan_Response_Data_Length, 1);
 80106fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010700:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8010704:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8010708:	7812      	ldrb	r2, [r2, #0]
 801070a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801070c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8010710:	3301      	adds	r3, #1
 8010712:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* FIX: check on Scan_Response_Data introduced to fix issue in projects for Cortex-M33 */
  if (Scan_Response_Data != NULL) {
 8010716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801071a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d00a      	beq.n	801073a <hci_le_set_scan_response_data+0x74>
    BLUENRG_memcpy((void *) &cp0->Scan_Response_Data, (const void *) Scan_Response_Data, 31);
 8010724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010728:	1c58      	adds	r0, r3, #1
 801072a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801072e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8010732:	221f      	movs	r2, #31
 8010734:	6819      	ldr	r1, [r3, #0]
 8010736:	f000 ff81 	bl	801163c <memcpy>
  }
  index_input += 31;
 801073a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 801073e:	331f      	adds	r3, #31
 8010740:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8010744:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010748:	2218      	movs	r2, #24
 801074a:	2100      	movs	r1, #0
 801074c:	4618      	mov	r0, r3
 801074e:	f000 fee9 	bl	8011524 <memset>
  rq.ogf = 0x08;
 8010752:	2308      	movs	r3, #8
 8010754:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 8010758:	2309      	movs	r3, #9
 801075a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801075e:	f107 030c 	add.w	r3, r7, #12
 8010762:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8010766:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 801076a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801076e:	f107 030b 	add.w	r3, r7, #11
 8010772:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8010776:	2301      	movs	r3, #1
 8010778:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 801077c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8010780:	2100      	movs	r1, #0
 8010782:	4618      	mov	r0, r3
 8010784:	f000 f914 	bl	80109b0 <hci_send_req>
 8010788:	4603      	mov	r3, r0
 801078a:	2b00      	cmp	r3, #0
 801078c:	da01      	bge.n	8010792 <hci_le_set_scan_response_data+0xcc>
    return BLE_STATUS_TIMEOUT;
 801078e:	23ff      	movs	r3, #255	; 0xff
 8010790:	e00d      	b.n	80107ae <hci_le_set_scan_response_data+0xe8>
  if (status) {
 8010792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8010796:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 801079a:	781b      	ldrb	r3, [r3, #0]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d005      	beq.n	80107ac <hci_le_set_scan_response_data+0xe6>
    return status;
 80107a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80107a4:	f2a3 1325 	subw	r3, r3, #293	; 0x125
 80107a8:	781b      	ldrb	r3, [r3, #0]
 80107aa:	e000      	b.n	80107ae <hci_le_set_scan_response_data+0xe8>
  }
  return BLE_STATUS_SUCCESS;
 80107ac:	2300      	movs	r3, #0
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80107b4:	46bd      	mov	sp, r7
 80107b6:	bd80      	pop	{r7, pc}

080107b8 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b085      	sub	sp, #20
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	3308      	adds	r3, #8
 80107c4:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	781b      	ldrb	r3, [r3, #0]
 80107ca:	2b04      	cmp	r3, #4
 80107cc:	d001      	beq.n	80107d2 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80107ce:	2301      	movs	r3, #1
 80107d0:	e00c      	b.n	80107ec <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	3302      	adds	r3, #2
 80107d6:	781b      	ldrb	r3, [r3, #0]
 80107d8:	461a      	mov	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80107e0:	3b03      	subs	r3, #3
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d001      	beq.n	80107ea <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 80107e6:	2302      	movs	r3, #2
 80107e8:	e000      	b.n	80107ec <verify_packet+0x34>
  
  return 0;      
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3714      	adds	r7, #20
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b0a6      	sub	sp, #152	; 0x98
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	607b      	str	r3, [r7, #4]
 8010800:	4603      	mov	r3, r0
 8010802:	81fb      	strh	r3, [r7, #14]
 8010804:	460b      	mov	r3, r1
 8010806:	81bb      	strh	r3, [r7, #12]
 8010808:	4613      	mov	r3, r2
 801080a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 801080c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010810:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010814:	b21a      	sxth	r2, r3
 8010816:	89fb      	ldrh	r3, [r7, #14]
 8010818:	029b      	lsls	r3, r3, #10
 801081a:	b21b      	sxth	r3, r3
 801081c:	4313      	orrs	r3, r2
 801081e:	b21b      	sxth	r3, r3
 8010820:	b29b      	uxth	r3, r3
 8010822:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8010824:	7afb      	ldrb	r3, [r7, #11]
 8010826:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8010828:	2301      	movs	r3, #1
 801082a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 801082c:	f107 0318 	add.w	r3, r7, #24
 8010830:	3301      	adds	r3, #1
 8010832:	461a      	mov	r2, r3
 8010834:	f107 0314 	add.w	r3, r7, #20
 8010838:	8819      	ldrh	r1, [r3, #0]
 801083a:	789b      	ldrb	r3, [r3, #2]
 801083c:	8011      	strh	r1, [r2, #0]
 801083e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8010840:	f107 0318 	add.w	r3, r7, #24
 8010844:	3304      	adds	r3, #4
 8010846:	7afa      	ldrb	r2, [r7, #11]
 8010848:	6879      	ldr	r1, [r7, #4]
 801084a:	4618      	mov	r0, r3
 801084c:	f000 fef6 	bl	801163c <memcpy>
  
  if (hciContext.io.Send)
 8010850:	4b08      	ldr	r3, [pc, #32]	; (8010874 <send_cmd+0x7c>)
 8010852:	691b      	ldr	r3, [r3, #16]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d009      	beq.n	801086c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8010858:	4b06      	ldr	r3, [pc, #24]	; (8010874 <send_cmd+0x7c>)
 801085a:	691b      	ldr	r3, [r3, #16]
 801085c:	7afa      	ldrb	r2, [r7, #11]
 801085e:	b292      	uxth	r2, r2
 8010860:	3204      	adds	r2, #4
 8010862:	b291      	uxth	r1, r2
 8010864:	f107 0218 	add.w	r2, r7, #24
 8010868:	4610      	mov	r0, r2
 801086a:	4798      	blx	r3
  }
}
 801086c:	bf00      	nop
 801086e:	3798      	adds	r7, #152	; 0x98
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	20000ae4 	.word	0x20000ae4

08010878 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b084      	sub	sp, #16
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8010882:	e00a      	b.n	801089a <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8010884:	f107 030c 	add.w	r3, r7, #12
 8010888:	4619      	mov	r1, r3
 801088a:	6838      	ldr	r0, [r7, #0]
 801088c:	f000 fae8 	bl	8010e60 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	4619      	mov	r1, r3
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f000 fa4f 	bl	8010d38 <list_insert_head>
  while (!list_is_empty(src_list))
 801089a:	6838      	ldr	r0, [r7, #0]
 801089c:	f000 fa2a 	bl	8010cf4 <list_is_empty>
 80108a0:	4603      	mov	r3, r0
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d0ee      	beq.n	8010884 <move_list+0xc>
  }
}
 80108a6:	bf00      	nop
 80108a8:	bf00      	nop
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80108b6:	e009      	b.n	80108cc <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80108b8:	1d3b      	adds	r3, r7, #4
 80108ba:	4619      	mov	r1, r3
 80108bc:	4809      	ldr	r0, [pc, #36]	; (80108e4 <free_event_list+0x34>)
 80108be:	f000 faa8 	bl	8010e12 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	4619      	mov	r1, r3
 80108c6:	4808      	ldr	r0, [pc, #32]	; (80108e8 <free_event_list+0x38>)
 80108c8:	f000 fa5c 	bl	8010d84 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80108cc:	4806      	ldr	r0, [pc, #24]	; (80108e8 <free_event_list+0x38>)
 80108ce:	f000 faee 	bl	8010eae <list_get_size>
 80108d2:	4603      	mov	r3, r0
 80108d4:	2b04      	cmp	r3, #4
 80108d6:	ddef      	ble.n	80108b8 <free_event_list+0x8>
  }
}
 80108d8:	bf00      	nop
 80108da:	bf00      	nop
 80108dc:	3708      	adds	r7, #8
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}
 80108e2:	bf00      	nop
 80108e4:	20000564 	.word	0x20000564
 80108e8:	2000055c 	.word	0x2000055c

080108ec <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d002      	beq.n	8010902 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 80108fc:	4a18      	ldr	r2, [pc, #96]	; (8010960 <hci_init+0x74>)
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8010902:	4818      	ldr	r0, [pc, #96]	; (8010964 <hci_init+0x78>)
 8010904:	f000 f9e6 	bl	8010cd4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8010908:	4817      	ldr	r0, [pc, #92]	; (8010968 <hci_init+0x7c>)
 801090a:	f000 f9e3 	bl	8010cd4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 801090e:	f7f6 ff47 	bl	80077a0 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8010912:	2300      	movs	r3, #0
 8010914:	73fb      	strb	r3, [r7, #15]
 8010916:	e00c      	b.n	8010932 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8010918:	7bfb      	ldrb	r3, [r7, #15]
 801091a:	228c      	movs	r2, #140	; 0x8c
 801091c:	fb02 f303 	mul.w	r3, r2, r3
 8010920:	4a12      	ldr	r2, [pc, #72]	; (801096c <hci_init+0x80>)
 8010922:	4413      	add	r3, r2
 8010924:	4619      	mov	r1, r3
 8010926:	480f      	ldr	r0, [pc, #60]	; (8010964 <hci_init+0x78>)
 8010928:	f000 fa2c 	bl	8010d84 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 801092c:	7bfb      	ldrb	r3, [r7, #15]
 801092e:	3301      	adds	r3, #1
 8010930:	73fb      	strb	r3, [r7, #15]
 8010932:	7bfb      	ldrb	r3, [r7, #15]
 8010934:	2b09      	cmp	r3, #9
 8010936:	d9ef      	bls.n	8010918 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8010938:	4b09      	ldr	r3, [pc, #36]	; (8010960 <hci_init+0x74>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d003      	beq.n	8010948 <hci_init+0x5c>
 8010940:	4b07      	ldr	r3, [pc, #28]	; (8010960 <hci_init+0x74>)
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	2000      	movs	r0, #0
 8010946:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8010948:	4b05      	ldr	r3, [pc, #20]	; (8010960 <hci_init+0x74>)
 801094a:	689b      	ldr	r3, [r3, #8]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <hci_init+0x6a>
 8010950:	4b03      	ldr	r3, [pc, #12]	; (8010960 <hci_init+0x74>)
 8010952:	689b      	ldr	r3, [r3, #8]
 8010954:	4798      	blx	r3
}
 8010956:	bf00      	nop
 8010958:	3710      	adds	r7, #16
 801095a:	46bd      	mov	sp, r7
 801095c:	bd80      	pop	{r7, pc}
 801095e:	bf00      	nop
 8010960:	20000ae4 	.word	0x20000ae4
 8010964:	2000055c 	.word	0x2000055c
 8010968:	20000564 	.word	0x20000564
 801096c:	2000056c 	.word	0x2000056c

08010970 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8010970:	b480      	push	{r7}
 8010972:	b083      	sub	sp, #12
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4a0b      	ldr	r2, [pc, #44]	; (80109ac <hci_register_io_bus+0x3c>)
 801097e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	4a09      	ldr	r2, [pc, #36]	; (80109ac <hci_register_io_bus+0x3c>)
 8010986:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	691b      	ldr	r3, [r3, #16]
 801098c:	4a07      	ldr	r2, [pc, #28]	; (80109ac <hci_register_io_bus+0x3c>)
 801098e:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	699b      	ldr	r3, [r3, #24]
 8010994:	4a05      	ldr	r2, [pc, #20]	; (80109ac <hci_register_io_bus+0x3c>)
 8010996:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	689b      	ldr	r3, [r3, #8]
 801099c:	4a03      	ldr	r2, [pc, #12]	; (80109ac <hci_register_io_bus+0x3c>)
 801099e:	6093      	str	r3, [r2, #8]
}
 80109a0:	bf00      	nop
 80109a2:	370c      	adds	r7, #12
 80109a4:	46bd      	mov	sp, r7
 80109a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109aa:	4770      	bx	lr
 80109ac:	20000ae4 	.word	0x20000ae4

080109b0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b08e      	sub	sp, #56	; 0x38
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	460b      	mov	r3, r1
 80109ba:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	885b      	ldrh	r3, [r3, #2]
 80109c0:	b21b      	sxth	r3, r3
 80109c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80109c6:	b21a      	sxth	r2, r3
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	881b      	ldrh	r3, [r3, #0]
 80109cc:	029b      	lsls	r3, r3, #10
 80109ce:	b21b      	sxth	r3, r3
 80109d0:	4313      	orrs	r3, r2
 80109d2:	b21b      	sxth	r3, r3
 80109d4:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80109d6:	2300      	movs	r3, #0
 80109d8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80109da:	f107 0308 	add.w	r3, r7, #8
 80109de:	4618      	mov	r0, r3
 80109e0:	f000 f978 	bl	8010cd4 <list_init_head>

  free_event_list();
 80109e4:	f7ff ff64 	bl	80108b0 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	8818      	ldrh	r0, [r3, #0]
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	8859      	ldrh	r1, [r3, #2]
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	68db      	ldr	r3, [r3, #12]
 80109f4:	b2da      	uxtb	r2, r3
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	689b      	ldr	r3, [r3, #8]
 80109fa:	f7ff fefd 	bl	80107f8 <send_cmd>
  
  if (async)
 80109fe:	78fb      	ldrb	r3, [r7, #3]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d001      	beq.n	8010a08 <hci_send_req+0x58>
  {
    return 0;
 8010a04:	2300      	movs	r3, #0
 8010a06:	e0e2      	b.n	8010bce <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8010a08:	f7f8 f8ce 	bl	8008ba8 <HAL_GetTick>
 8010a0c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8010a0e:	f7f8 f8cb 	bl	8008ba8 <HAL_GetTick>
 8010a12:	4602      	mov	r2, r0
 8010a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a16:	1ad3      	subs	r3, r2, r3
 8010a18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010a1c:	f200 80b3 	bhi.w	8010b86 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8010a20:	486d      	ldr	r0, [pc, #436]	; (8010bd8 <hci_send_req+0x228>)
 8010a22:	f000 f967 	bl	8010cf4 <list_is_empty>
 8010a26:	4603      	mov	r3, r0
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d000      	beq.n	8010a2e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8010a2c:	e7ef      	b.n	8010a0e <hci_send_req+0x5e>
      {
        break;
 8010a2e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8010a30:	f107 0310 	add.w	r3, r7, #16
 8010a34:	4619      	mov	r1, r3
 8010a36:	4868      	ldr	r0, [pc, #416]	; (8010bd8 <hci_send_req+0x228>)
 8010a38:	f000 f9eb 	bl	8010e12 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8010a3c:	693b      	ldr	r3, [r7, #16]
 8010a3e:	3308      	adds	r3, #8
 8010a40:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8010a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a44:	781b      	ldrb	r3, [r3, #0]
 8010a46:	2b04      	cmp	r3, #4
 8010a48:	d17f      	bne.n	8010b4a <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8010a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	3308      	adds	r3, #8
 8010a54:	3303      	adds	r3, #3
 8010a56:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8010a5e:	3b03      	subs	r3, #3
 8010a60:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8010a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	2b3e      	cmp	r3, #62	; 0x3e
 8010a68:	d04c      	beq.n	8010b04 <hci_send_req+0x154>
 8010a6a:	2b3e      	cmp	r3, #62	; 0x3e
 8010a6c:	dc68      	bgt.n	8010b40 <hci_send_req+0x190>
 8010a6e:	2b10      	cmp	r3, #16
 8010a70:	f000 808b 	beq.w	8010b8a <hci_send_req+0x1da>
 8010a74:	2b10      	cmp	r3, #16
 8010a76:	dc63      	bgt.n	8010b40 <hci_send_req+0x190>
 8010a78:	2b0e      	cmp	r3, #14
 8010a7a:	d023      	beq.n	8010ac4 <hci_send_req+0x114>
 8010a7c:	2b0f      	cmp	r3, #15
 8010a7e:	d15f      	bne.n	8010b40 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8010a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a82:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8010a84:	69bb      	ldr	r3, [r7, #24]
 8010a86:	885b      	ldrh	r3, [r3, #2]
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d17e      	bne.n	8010b8e <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	2b0f      	cmp	r3, #15
 8010a96:	d004      	beq.n	8010aa2 <hci_send_req+0xf2>
          if (cs->status) {
 8010a98:	69bb      	ldr	r3, [r7, #24]
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d051      	beq.n	8010b44 <hci_send_req+0x194>
            goto failed;
 8010aa0:	e078      	b.n	8010b94 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	695a      	ldr	r2, [r3, #20]
 8010aa6:	6a3b      	ldr	r3, [r7, #32]
 8010aa8:	429a      	cmp	r2, r3
 8010aaa:	bf28      	it	cs
 8010aac:	461a      	movcs	r2, r3
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	6918      	ldr	r0, [r3, #16]
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	695b      	ldr	r3, [r3, #20]
 8010aba:	461a      	mov	r2, r3
 8010abc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010abe:	f000 fdbd 	bl	801163c <memcpy>
        goto done;
 8010ac2:	e078      	b.n	8010bb6 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8010ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac6:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010ace:	b29b      	uxth	r3, r3
 8010ad0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010ad2:	429a      	cmp	r2, r3
 8010ad4:	d15d      	bne.n	8010b92 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8010ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad8:	3303      	adds	r3, #3
 8010ada:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8010adc:	6a3b      	ldr	r3, [r7, #32]
 8010ade:	3b03      	subs	r3, #3
 8010ae0:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	695a      	ldr	r2, [r3, #20]
 8010ae6:	6a3b      	ldr	r3, [r7, #32]
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	bf28      	it	cs
 8010aec:	461a      	movcs	r2, r3
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6918      	ldr	r0, [r3, #16]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	695b      	ldr	r3, [r3, #20]
 8010afa:	461a      	mov	r2, r3
 8010afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010afe:	f000 fd9d 	bl	801163c <memcpy>
        goto done;
 8010b02:	e058      	b.n	8010bb6 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8010b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b06:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8010b08:	69fb      	ldr	r3, [r7, #28]
 8010b0a:	781b      	ldrb	r3, [r3, #0]
 8010b0c:	461a      	mov	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	685b      	ldr	r3, [r3, #4]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d118      	bne.n	8010b48 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8010b16:	6a3b      	ldr	r3, [r7, #32]
 8010b18:	3b01      	subs	r3, #1
 8010b1a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	695a      	ldr	r2, [r3, #20]
 8010b20:	6a3b      	ldr	r3, [r7, #32]
 8010b22:	429a      	cmp	r2, r3
 8010b24:	bf28      	it	cs
 8010b26:	461a      	movcs	r2, r3
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6918      	ldr	r0, [r3, #16]
 8010b30:	69fb      	ldr	r3, [r7, #28]
 8010b32:	1c59      	adds	r1, r3, #1
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	695b      	ldr	r3, [r3, #20]
 8010b38:	461a      	mov	r2, r3
 8010b3a:	f000 fd7f 	bl	801163c <memcpy>
        goto done;
 8010b3e:	e03a      	b.n	8010bb6 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8010b40:	bf00      	nop
 8010b42:	e002      	b.n	8010b4a <hci_send_req+0x19a>
          break;
 8010b44:	bf00      	nop
 8010b46:	e000      	b.n	8010b4a <hci_send_req+0x19a>
          break;
 8010b48:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8010b4a:	4824      	ldr	r0, [pc, #144]	; (8010bdc <hci_send_req+0x22c>)
 8010b4c:	f000 f8d2 	bl	8010cf4 <list_is_empty>
 8010b50:	4603      	mov	r3, r0
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d00d      	beq.n	8010b72 <hci_send_req+0x1c2>
 8010b56:	4820      	ldr	r0, [pc, #128]	; (8010bd8 <hci_send_req+0x228>)
 8010b58:	f000 f8cc 	bl	8010cf4 <list_is_empty>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d007      	beq.n	8010b72 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8010b62:	693b      	ldr	r3, [r7, #16]
 8010b64:	4619      	mov	r1, r3
 8010b66:	481d      	ldr	r0, [pc, #116]	; (8010bdc <hci_send_req+0x22c>)
 8010b68:	f000 f90c 	bl	8010d84 <list_insert_tail>
      hciReadPacket=NULL;
 8010b6c:	2300      	movs	r3, #0
 8010b6e:	613b      	str	r3, [r7, #16]
 8010b70:	e008      	b.n	8010b84 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8010b72:	693a      	ldr	r2, [r7, #16]
 8010b74:	f107 0308 	add.w	r3, r7, #8
 8010b78:	4611      	mov	r1, r2
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f000 f902 	bl	8010d84 <list_insert_tail>
      hciReadPacket=NULL;
 8010b80:	2300      	movs	r3, #0
 8010b82:	613b      	str	r3, [r7, #16]
  {
 8010b84:	e740      	b.n	8010a08 <hci_send_req+0x58>
        goto failed;
 8010b86:	bf00      	nop
 8010b88:	e004      	b.n	8010b94 <hci_send_req+0x1e4>
        goto failed;
 8010b8a:	bf00      	nop
 8010b8c:	e002      	b.n	8010b94 <hci_send_req+0x1e4>
          goto failed;
 8010b8e:	bf00      	nop
 8010b90:	e000      	b.n	8010b94 <hci_send_req+0x1e4>
          goto failed;
 8010b92:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 8010b94:	693b      	ldr	r3, [r7, #16]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d004      	beq.n	8010ba4 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	4619      	mov	r1, r3
 8010b9e:	480f      	ldr	r0, [pc, #60]	; (8010bdc <hci_send_req+0x22c>)
 8010ba0:	f000 f8ca 	bl	8010d38 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8010ba4:	f107 0308 	add.w	r3, r7, #8
 8010ba8:	4619      	mov	r1, r3
 8010baa:	480b      	ldr	r0, [pc, #44]	; (8010bd8 <hci_send_req+0x228>)
 8010bac:	f7ff fe64 	bl	8010878 <move_list>

  return -1;
 8010bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8010bb4:	e00b      	b.n	8010bce <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	4619      	mov	r1, r3
 8010bba:	4808      	ldr	r0, [pc, #32]	; (8010bdc <hci_send_req+0x22c>)
 8010bbc:	f000 f8bc 	bl	8010d38 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8010bc0:	f107 0308 	add.w	r3, r7, #8
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	4804      	ldr	r0, [pc, #16]	; (8010bd8 <hci_send_req+0x228>)
 8010bc8:	f7ff fe56 	bl	8010878 <move_list>

  return 0;
 8010bcc:	2300      	movs	r3, #0
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3738      	adds	r7, #56	; 0x38
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	20000564 	.word	0x20000564
 8010bdc:	2000055c 	.word	0x2000055c

08010be0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b082      	sub	sp, #8
 8010be4:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8010be6:	2300      	movs	r3, #0
 8010be8:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8010bea:	e013      	b.n	8010c14 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8010bec:	1d3b      	adds	r3, r7, #4
 8010bee:	4619      	mov	r1, r3
 8010bf0:	480e      	ldr	r0, [pc, #56]	; (8010c2c <hci_user_evt_proc+0x4c>)
 8010bf2:	f000 f90e 	bl	8010e12 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8010bf6:	4b0e      	ldr	r3, [pc, #56]	; (8010c30 <hci_user_evt_proc+0x50>)
 8010bf8:	69db      	ldr	r3, [r3, #28]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d005      	beq.n	8010c0a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8010bfe:	4b0c      	ldr	r3, [pc, #48]	; (8010c30 <hci_user_evt_proc+0x50>)
 8010c00:	69db      	ldr	r3, [r3, #28]
 8010c02:	687a      	ldr	r2, [r7, #4]
 8010c04:	3208      	adds	r2, #8
 8010c06:	4610      	mov	r0, r2
 8010c08:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	4809      	ldr	r0, [pc, #36]	; (8010c34 <hci_user_evt_proc+0x54>)
 8010c10:	f000 f8b8 	bl	8010d84 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8010c14:	4805      	ldr	r0, [pc, #20]	; (8010c2c <hci_user_evt_proc+0x4c>)
 8010c16:	f000 f86d 	bl	8010cf4 <list_is_empty>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d0e5      	beq.n	8010bec <hci_user_evt_proc+0xc>
  }
}
 8010c20:	bf00      	nop
 8010c22:	bf00      	nop
 8010c24:	3708      	adds	r7, #8
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	20000564 	.word	0x20000564
 8010c30:	20000ae4 	.word	0x20000ae4
 8010c34:	2000055c 	.word	0x2000055c

08010c38 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b086      	sub	sp, #24
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8010c40:	2300      	movs	r3, #0
 8010c42:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8010c44:	2300      	movs	r3, #0
 8010c46:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8010c48:	481f      	ldr	r0, [pc, #124]	; (8010cc8 <hci_notify_asynch_evt+0x90>)
 8010c4a:	f000 f853 	bl	8010cf4 <list_is_empty>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d132      	bne.n	8010cba <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8010c54:	f107 030c 	add.w	r3, r7, #12
 8010c58:	4619      	mov	r1, r3
 8010c5a:	481b      	ldr	r0, [pc, #108]	; (8010cc8 <hci_notify_asynch_evt+0x90>)
 8010c5c:	f000 f8d9 	bl	8010e12 <list_remove_head>
    
    if (hciContext.io.Receive)
 8010c60:	4b1a      	ldr	r3, [pc, #104]	; (8010ccc <hci_notify_asynch_evt+0x94>)
 8010c62:	68db      	ldr	r3, [r3, #12]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d02a      	beq.n	8010cbe <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8010c68:	4b18      	ldr	r3, [pc, #96]	; (8010ccc <hci_notify_asynch_evt+0x94>)
 8010c6a:	68db      	ldr	r3, [r3, #12]
 8010c6c:	68fa      	ldr	r2, [r7, #12]
 8010c6e:	3208      	adds	r2, #8
 8010c70:	2180      	movs	r1, #128	; 0x80
 8010c72:	4610      	mov	r0, r2
 8010c74:	4798      	blx	r3
 8010c76:	4603      	mov	r3, r0
 8010c78:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 8010c7a:	7cfb      	ldrb	r3, [r7, #19]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d016      	beq.n	8010cae <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	7cfa      	ldrb	r2, [r7, #19]
 8010c84:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7ff fd94 	bl	80107b8 <verify_packet>
 8010c90:	4603      	mov	r3, r0
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d105      	bne.n	8010ca2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	4619      	mov	r1, r3
 8010c9a:	480d      	ldr	r0, [pc, #52]	; (8010cd0 <hci_notify_asynch_evt+0x98>)
 8010c9c:	f000 f872 	bl	8010d84 <list_insert_tail>
 8010ca0:	e00d      	b.n	8010cbe <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	4808      	ldr	r0, [pc, #32]	; (8010cc8 <hci_notify_asynch_evt+0x90>)
 8010ca8:	f000 f846 	bl	8010d38 <list_insert_head>
 8010cac:	e007      	b.n	8010cbe <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	4805      	ldr	r0, [pc, #20]	; (8010cc8 <hci_notify_asynch_evt+0x90>)
 8010cb4:	f000 f840 	bl	8010d38 <list_insert_head>
 8010cb8:	e001      	b.n	8010cbe <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 8010cba:	2301      	movs	r3, #1
 8010cbc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8010cbe:	697b      	ldr	r3, [r7, #20]
  
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	3718      	adds	r7, #24
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}
 8010cc8:	2000055c 	.word	0x2000055c
 8010ccc:	20000ae4 	.word	0x20000ae4
 8010cd0:	20000564 	.word	0x20000564

08010cd4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8010cd4:	b480      	push	{r7}
 8010cd6:	b083      	sub	sp, #12
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	687a      	ldr	r2, [r7, #4]
 8010ce0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	605a      	str	r2, [r3, #4]
}
 8010ce8:	bf00      	nop
 8010cea:	370c      	adds	r7, #12
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr

08010cf4 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	b087      	sub	sp, #28
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8010d00:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d02:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010d04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d06:	b672      	cpsid	i
}
 8010d08:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	687a      	ldr	r2, [r7, #4]
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d102      	bne.n	8010d1a <list_is_empty+0x26>
  {
    return_value = 1;
 8010d14:	2301      	movs	r3, #1
 8010d16:	75fb      	strb	r3, [r7, #23]
 8010d18:	e001      	b.n	8010d1e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	75fb      	strb	r3, [r7, #23]
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	f383 8810 	msr	PRIMASK, r3
}
 8010d28:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 8010d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	371c      	adds	r7, #28
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr

08010d38 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8010d38:	b480      	push	{r7}
 8010d3a:	b087      	sub	sp, #28
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d42:	f3ef 8310 	mrs	r3, PRIMASK
 8010d46:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d48:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010d4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d4c:	b672      	cpsid	i
}
 8010d4e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	683a      	ldr	r2, [r7, #0]
 8010d62:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	683a      	ldr	r2, [r7, #0]
 8010d6a:	605a      	str	r2, [r3, #4]
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	f383 8810 	msr	PRIMASK, r3
}
 8010d76:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8010d78:	bf00      	nop
 8010d7a:	371c      	adds	r7, #28
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 8010d84:	b480      	push	{r7}
 8010d86:	b087      	sub	sp, #28
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
 8010d8c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8010d92:	60fb      	str	r3, [r7, #12]
  return(result);
 8010d94:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010d96:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d98:	b672      	cpsid	i
}
 8010d9a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	687a      	ldr	r2, [r7, #4]
 8010da0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	685a      	ldr	r2, [r3, #4]
 8010da6:	683b      	ldr	r3, [r7, #0]
 8010da8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	683a      	ldr	r2, [r7, #0]
 8010dae:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	685b      	ldr	r3, [r3, #4]
 8010db4:	683a      	ldr	r2, [r7, #0]
 8010db6:	601a      	str	r2, [r3, #0]
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	f383 8810 	msr	PRIMASK, r3
}
 8010dc2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8010dc4:	bf00      	nop
 8010dc6:	371c      	adds	r7, #28
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b087      	sub	sp, #28
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8010ddc:	60fb      	str	r3, [r7, #12]
  return(result);
 8010dde:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010de0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010de2:	b672      	cpsid	i
}
 8010de4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	685b      	ldr	r3, [r3, #4]
 8010dea:	687a      	ldr	r2, [r7, #4]
 8010dec:	6812      	ldr	r2, [r2, #0]
 8010dee:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	687a      	ldr	r2, [r7, #4]
 8010df6:	6852      	ldr	r2, [r2, #4]
 8010df8:	605a      	str	r2, [r3, #4]
 8010dfa:	697b      	ldr	r3, [r7, #20]
 8010dfc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	f383 8810 	msr	PRIMASK, r3
}
 8010e04:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8010e06:	bf00      	nop
 8010e08:	371c      	adds	r7, #28
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e10:	4770      	bx	lr

08010e12 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8010e12:	b580      	push	{r7, lr}
 8010e14:	b086      	sub	sp, #24
 8010e16:	af00      	add	r7, sp, #0
 8010e18:	6078      	str	r0, [r7, #4]
 8010e1a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8010e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e22:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010e24:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e26:	b672      	cpsid	i
}
 8010e28:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7ff ffca 	bl	8010dd0 <list_remove_node>
  (*node)->next = NULL;
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	2200      	movs	r2, #0
 8010e42:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8010e44:	683b      	ldr	r3, [r7, #0]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	2200      	movs	r2, #0
 8010e4a:	605a      	str	r2, [r3, #4]
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e50:	693b      	ldr	r3, [r7, #16]
 8010e52:	f383 8810 	msr	PRIMASK, r3
}
 8010e56:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8010e58:	bf00      	nop
 8010e5a:	3718      	adds	r7, #24
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}

08010e60 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	b086      	sub	sp, #24
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8010e6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010e70:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010e72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e74:	b672      	cpsid	i
}
 8010e76:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	685a      	ldr	r2, [r3, #4]
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7ff ffa3 	bl	8010dd0 <list_remove_node>
  (*node)->next = NULL;
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2200      	movs	r2, #0
 8010e98:	605a      	str	r2, [r3, #4]
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	f383 8810 	msr	PRIMASK, r3
}
 8010ea4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8010ea6:	bf00      	nop
 8010ea8:	3718      	adds	r7, #24
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd80      	pop	{r7, pc}

08010eae <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8010eae:	b480      	push	{r7}
 8010eb0:	b089      	sub	sp, #36	; 0x24
 8010eb2:	af00      	add	r7, sp, #0
 8010eb4:	6078      	str	r0, [r7, #4]
  int size = 0;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010eba:	f3ef 8310 	mrs	r3, PRIMASK
 8010ebe:	613b      	str	r3, [r7, #16]
  return(result);
 8010ec0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010ec2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010ec4:	b672      	cpsid	i
}
 8010ec6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8010ece:	e005      	b.n	8010edc <list_get_size+0x2e>
  {
    size++;
 8010ed0:	69fb      	ldr	r3, [r7, #28]
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8010ed6:	69bb      	ldr	r3, [r7, #24]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8010edc:	69ba      	ldr	r2, [r7, #24]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d1f5      	bne.n	8010ed0 <list_get_size+0x22>
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f383 8810 	msr	PRIMASK, r3
}
 8010eee:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8010ef0:	69fb      	ldr	r3, [r7, #28]
}
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3724      	adds	r7, #36	; 0x24
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr

08010efe <atoi>:
 8010efe:	220a      	movs	r2, #10
 8010f00:	2100      	movs	r1, #0
 8010f02:	f000 b8ef 	b.w	80110e4 <strtol>
	...

08010f08 <srand>:
 8010f08:	b538      	push	{r3, r4, r5, lr}
 8010f0a:	4b10      	ldr	r3, [pc, #64]	; (8010f4c <srand+0x44>)
 8010f0c:	681d      	ldr	r5, [r3, #0]
 8010f0e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010f10:	4604      	mov	r4, r0
 8010f12:	b9b3      	cbnz	r3, 8010f42 <srand+0x3a>
 8010f14:	2018      	movs	r0, #24
 8010f16:	f000 fc09 	bl	801172c <malloc>
 8010f1a:	4602      	mov	r2, r0
 8010f1c:	6328      	str	r0, [r5, #48]	; 0x30
 8010f1e:	b920      	cbnz	r0, 8010f2a <srand+0x22>
 8010f20:	4b0b      	ldr	r3, [pc, #44]	; (8010f50 <srand+0x48>)
 8010f22:	480c      	ldr	r0, [pc, #48]	; (8010f54 <srand+0x4c>)
 8010f24:	2146      	movs	r1, #70	; 0x46
 8010f26:	f000 fb97 	bl	8011658 <__assert_func>
 8010f2a:	490b      	ldr	r1, [pc, #44]	; (8010f58 <srand+0x50>)
 8010f2c:	4b0b      	ldr	r3, [pc, #44]	; (8010f5c <srand+0x54>)
 8010f2e:	e9c0 1300 	strd	r1, r3, [r0]
 8010f32:	4b0b      	ldr	r3, [pc, #44]	; (8010f60 <srand+0x58>)
 8010f34:	6083      	str	r3, [r0, #8]
 8010f36:	230b      	movs	r3, #11
 8010f38:	8183      	strh	r3, [r0, #12]
 8010f3a:	2100      	movs	r1, #0
 8010f3c:	2001      	movs	r0, #1
 8010f3e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010f42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8010f44:	2200      	movs	r2, #0
 8010f46:	611c      	str	r4, [r3, #16]
 8010f48:	615a      	str	r2, [r3, #20]
 8010f4a:	bd38      	pop	{r3, r4, r5, pc}
 8010f4c:	200000a4 	.word	0x200000a4
 8010f50:	08012b04 	.word	0x08012b04
 8010f54:	08012b1b 	.word	0x08012b1b
 8010f58:	abcd330e 	.word	0xabcd330e
 8010f5c:	e66d1234 	.word	0xe66d1234
 8010f60:	0005deec 	.word	0x0005deec

08010f64 <rand>:
 8010f64:	4b16      	ldr	r3, [pc, #88]	; (8010fc0 <rand+0x5c>)
 8010f66:	b510      	push	{r4, lr}
 8010f68:	681c      	ldr	r4, [r3, #0]
 8010f6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010f6c:	b9b3      	cbnz	r3, 8010f9c <rand+0x38>
 8010f6e:	2018      	movs	r0, #24
 8010f70:	f000 fbdc 	bl	801172c <malloc>
 8010f74:	4602      	mov	r2, r0
 8010f76:	6320      	str	r0, [r4, #48]	; 0x30
 8010f78:	b920      	cbnz	r0, 8010f84 <rand+0x20>
 8010f7a:	4b12      	ldr	r3, [pc, #72]	; (8010fc4 <rand+0x60>)
 8010f7c:	4812      	ldr	r0, [pc, #72]	; (8010fc8 <rand+0x64>)
 8010f7e:	2152      	movs	r1, #82	; 0x52
 8010f80:	f000 fb6a 	bl	8011658 <__assert_func>
 8010f84:	4911      	ldr	r1, [pc, #68]	; (8010fcc <rand+0x68>)
 8010f86:	4b12      	ldr	r3, [pc, #72]	; (8010fd0 <rand+0x6c>)
 8010f88:	e9c0 1300 	strd	r1, r3, [r0]
 8010f8c:	4b11      	ldr	r3, [pc, #68]	; (8010fd4 <rand+0x70>)
 8010f8e:	6083      	str	r3, [r0, #8]
 8010f90:	230b      	movs	r3, #11
 8010f92:	8183      	strh	r3, [r0, #12]
 8010f94:	2100      	movs	r1, #0
 8010f96:	2001      	movs	r0, #1
 8010f98:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010f9c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010f9e:	480e      	ldr	r0, [pc, #56]	; (8010fd8 <rand+0x74>)
 8010fa0:	690b      	ldr	r3, [r1, #16]
 8010fa2:	694c      	ldr	r4, [r1, #20]
 8010fa4:	4a0d      	ldr	r2, [pc, #52]	; (8010fdc <rand+0x78>)
 8010fa6:	4358      	muls	r0, r3
 8010fa8:	fb02 0004 	mla	r0, r2, r4, r0
 8010fac:	fba3 3202 	umull	r3, r2, r3, r2
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	eb40 0002 	adc.w	r0, r0, r2
 8010fb6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8010fba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8010fbe:	bd10      	pop	{r4, pc}
 8010fc0:	200000a4 	.word	0x200000a4
 8010fc4:	08012b04 	.word	0x08012b04
 8010fc8:	08012b1b 	.word	0x08012b1b
 8010fcc:	abcd330e 	.word	0xabcd330e
 8010fd0:	e66d1234 	.word	0xe66d1234
 8010fd4:	0005deec 	.word	0x0005deec
 8010fd8:	5851f42d 	.word	0x5851f42d
 8010fdc:	4c957f2d 	.word	0x4c957f2d

08010fe0 <_strtol_l.constprop.0>:
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fe6:	d001      	beq.n	8010fec <_strtol_l.constprop.0+0xc>
 8010fe8:	2b24      	cmp	r3, #36	; 0x24
 8010fea:	d906      	bls.n	8010ffa <_strtol_l.constprop.0+0x1a>
 8010fec:	f000 fafa 	bl	80115e4 <__errno>
 8010ff0:	2316      	movs	r3, #22
 8010ff2:	6003      	str	r3, [r0, #0]
 8010ff4:	2000      	movs	r0, #0
 8010ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ffa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80110e0 <_strtol_l.constprop.0+0x100>
 8010ffe:	460d      	mov	r5, r1
 8011000:	462e      	mov	r6, r5
 8011002:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011006:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801100a:	f017 0708 	ands.w	r7, r7, #8
 801100e:	d1f7      	bne.n	8011000 <_strtol_l.constprop.0+0x20>
 8011010:	2c2d      	cmp	r4, #45	; 0x2d
 8011012:	d132      	bne.n	801107a <_strtol_l.constprop.0+0x9a>
 8011014:	782c      	ldrb	r4, [r5, #0]
 8011016:	2701      	movs	r7, #1
 8011018:	1cb5      	adds	r5, r6, #2
 801101a:	2b00      	cmp	r3, #0
 801101c:	d05b      	beq.n	80110d6 <_strtol_l.constprop.0+0xf6>
 801101e:	2b10      	cmp	r3, #16
 8011020:	d109      	bne.n	8011036 <_strtol_l.constprop.0+0x56>
 8011022:	2c30      	cmp	r4, #48	; 0x30
 8011024:	d107      	bne.n	8011036 <_strtol_l.constprop.0+0x56>
 8011026:	782c      	ldrb	r4, [r5, #0]
 8011028:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801102c:	2c58      	cmp	r4, #88	; 0x58
 801102e:	d14d      	bne.n	80110cc <_strtol_l.constprop.0+0xec>
 8011030:	786c      	ldrb	r4, [r5, #1]
 8011032:	2310      	movs	r3, #16
 8011034:	3502      	adds	r5, #2
 8011036:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801103a:	f108 38ff 	add.w	r8, r8, #4294967295
 801103e:	f04f 0e00 	mov.w	lr, #0
 8011042:	fbb8 f9f3 	udiv	r9, r8, r3
 8011046:	4676      	mov	r6, lr
 8011048:	fb03 8a19 	mls	sl, r3, r9, r8
 801104c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011050:	f1bc 0f09 	cmp.w	ip, #9
 8011054:	d816      	bhi.n	8011084 <_strtol_l.constprop.0+0xa4>
 8011056:	4664      	mov	r4, ip
 8011058:	42a3      	cmp	r3, r4
 801105a:	dd24      	ble.n	80110a6 <_strtol_l.constprop.0+0xc6>
 801105c:	f1be 3fff 	cmp.w	lr, #4294967295
 8011060:	d008      	beq.n	8011074 <_strtol_l.constprop.0+0x94>
 8011062:	45b1      	cmp	r9, r6
 8011064:	d31c      	bcc.n	80110a0 <_strtol_l.constprop.0+0xc0>
 8011066:	d101      	bne.n	801106c <_strtol_l.constprop.0+0x8c>
 8011068:	45a2      	cmp	sl, r4
 801106a:	db19      	blt.n	80110a0 <_strtol_l.constprop.0+0xc0>
 801106c:	fb06 4603 	mla	r6, r6, r3, r4
 8011070:	f04f 0e01 	mov.w	lr, #1
 8011074:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011078:	e7e8      	b.n	801104c <_strtol_l.constprop.0+0x6c>
 801107a:	2c2b      	cmp	r4, #43	; 0x2b
 801107c:	bf04      	itt	eq
 801107e:	782c      	ldrbeq	r4, [r5, #0]
 8011080:	1cb5      	addeq	r5, r6, #2
 8011082:	e7ca      	b.n	801101a <_strtol_l.constprop.0+0x3a>
 8011084:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011088:	f1bc 0f19 	cmp.w	ip, #25
 801108c:	d801      	bhi.n	8011092 <_strtol_l.constprop.0+0xb2>
 801108e:	3c37      	subs	r4, #55	; 0x37
 8011090:	e7e2      	b.n	8011058 <_strtol_l.constprop.0+0x78>
 8011092:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011096:	f1bc 0f19 	cmp.w	ip, #25
 801109a:	d804      	bhi.n	80110a6 <_strtol_l.constprop.0+0xc6>
 801109c:	3c57      	subs	r4, #87	; 0x57
 801109e:	e7db      	b.n	8011058 <_strtol_l.constprop.0+0x78>
 80110a0:	f04f 3eff 	mov.w	lr, #4294967295
 80110a4:	e7e6      	b.n	8011074 <_strtol_l.constprop.0+0x94>
 80110a6:	f1be 3fff 	cmp.w	lr, #4294967295
 80110aa:	d105      	bne.n	80110b8 <_strtol_l.constprop.0+0xd8>
 80110ac:	2322      	movs	r3, #34	; 0x22
 80110ae:	6003      	str	r3, [r0, #0]
 80110b0:	4646      	mov	r6, r8
 80110b2:	b942      	cbnz	r2, 80110c6 <_strtol_l.constprop.0+0xe6>
 80110b4:	4630      	mov	r0, r6
 80110b6:	e79e      	b.n	8010ff6 <_strtol_l.constprop.0+0x16>
 80110b8:	b107      	cbz	r7, 80110bc <_strtol_l.constprop.0+0xdc>
 80110ba:	4276      	negs	r6, r6
 80110bc:	2a00      	cmp	r2, #0
 80110be:	d0f9      	beq.n	80110b4 <_strtol_l.constprop.0+0xd4>
 80110c0:	f1be 0f00 	cmp.w	lr, #0
 80110c4:	d000      	beq.n	80110c8 <_strtol_l.constprop.0+0xe8>
 80110c6:	1e69      	subs	r1, r5, #1
 80110c8:	6011      	str	r1, [r2, #0]
 80110ca:	e7f3      	b.n	80110b4 <_strtol_l.constprop.0+0xd4>
 80110cc:	2430      	movs	r4, #48	; 0x30
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d1b1      	bne.n	8011036 <_strtol_l.constprop.0+0x56>
 80110d2:	2308      	movs	r3, #8
 80110d4:	e7af      	b.n	8011036 <_strtol_l.constprop.0+0x56>
 80110d6:	2c30      	cmp	r4, #48	; 0x30
 80110d8:	d0a5      	beq.n	8011026 <_strtol_l.constprop.0+0x46>
 80110da:	230a      	movs	r3, #10
 80110dc:	e7ab      	b.n	8011036 <_strtol_l.constprop.0+0x56>
 80110de:	bf00      	nop
 80110e0:	08012b74 	.word	0x08012b74

080110e4 <strtol>:
 80110e4:	4613      	mov	r3, r2
 80110e6:	460a      	mov	r2, r1
 80110e8:	4601      	mov	r1, r0
 80110ea:	4802      	ldr	r0, [pc, #8]	; (80110f4 <strtol+0x10>)
 80110ec:	6800      	ldr	r0, [r0, #0]
 80110ee:	f7ff bf77 	b.w	8010fe0 <_strtol_l.constprop.0>
 80110f2:	bf00      	nop
 80110f4:	200000a4 	.word	0x200000a4

080110f8 <std>:
 80110f8:	2300      	movs	r3, #0
 80110fa:	b510      	push	{r4, lr}
 80110fc:	4604      	mov	r4, r0
 80110fe:	e9c0 3300 	strd	r3, r3, [r0]
 8011102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011106:	6083      	str	r3, [r0, #8]
 8011108:	8181      	strh	r1, [r0, #12]
 801110a:	6643      	str	r3, [r0, #100]	; 0x64
 801110c:	81c2      	strh	r2, [r0, #14]
 801110e:	6183      	str	r3, [r0, #24]
 8011110:	4619      	mov	r1, r3
 8011112:	2208      	movs	r2, #8
 8011114:	305c      	adds	r0, #92	; 0x5c
 8011116:	f000 fa05 	bl	8011524 <memset>
 801111a:	4b05      	ldr	r3, [pc, #20]	; (8011130 <std+0x38>)
 801111c:	6263      	str	r3, [r4, #36]	; 0x24
 801111e:	4b05      	ldr	r3, [pc, #20]	; (8011134 <std+0x3c>)
 8011120:	62a3      	str	r3, [r4, #40]	; 0x28
 8011122:	4b05      	ldr	r3, [pc, #20]	; (8011138 <std+0x40>)
 8011124:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011126:	4b05      	ldr	r3, [pc, #20]	; (801113c <std+0x44>)
 8011128:	6224      	str	r4, [r4, #32]
 801112a:	6323      	str	r3, [r4, #48]	; 0x30
 801112c:	bd10      	pop	{r4, pc}
 801112e:	bf00      	nop
 8011130:	08011375 	.word	0x08011375
 8011134:	08011397 	.word	0x08011397
 8011138:	080113cf 	.word	0x080113cf
 801113c:	080113f3 	.word	0x080113f3

08011140 <stdio_exit_handler>:
 8011140:	4a02      	ldr	r2, [pc, #8]	; (801114c <stdio_exit_handler+0xc>)
 8011142:	4903      	ldr	r1, [pc, #12]	; (8011150 <stdio_exit_handler+0x10>)
 8011144:	4803      	ldr	r0, [pc, #12]	; (8011154 <stdio_exit_handler+0x14>)
 8011146:	f000 b869 	b.w	801121c <_fwalk_sglue>
 801114a:	bf00      	nop
 801114c:	2000004c 	.word	0x2000004c
 8011150:	080121f9 	.word	0x080121f9
 8011154:	20000058 	.word	0x20000058

08011158 <cleanup_stdio>:
 8011158:	6841      	ldr	r1, [r0, #4]
 801115a:	4b0c      	ldr	r3, [pc, #48]	; (801118c <cleanup_stdio+0x34>)
 801115c:	4299      	cmp	r1, r3
 801115e:	b510      	push	{r4, lr}
 8011160:	4604      	mov	r4, r0
 8011162:	d001      	beq.n	8011168 <cleanup_stdio+0x10>
 8011164:	f001 f848 	bl	80121f8 <_fflush_r>
 8011168:	68a1      	ldr	r1, [r4, #8]
 801116a:	4b09      	ldr	r3, [pc, #36]	; (8011190 <cleanup_stdio+0x38>)
 801116c:	4299      	cmp	r1, r3
 801116e:	d002      	beq.n	8011176 <cleanup_stdio+0x1e>
 8011170:	4620      	mov	r0, r4
 8011172:	f001 f841 	bl	80121f8 <_fflush_r>
 8011176:	68e1      	ldr	r1, [r4, #12]
 8011178:	4b06      	ldr	r3, [pc, #24]	; (8011194 <cleanup_stdio+0x3c>)
 801117a:	4299      	cmp	r1, r3
 801117c:	d004      	beq.n	8011188 <cleanup_stdio+0x30>
 801117e:	4620      	mov	r0, r4
 8011180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011184:	f001 b838 	b.w	80121f8 <_fflush_r>
 8011188:	bd10      	pop	{r4, pc}
 801118a:	bf00      	nop
 801118c:	20000b04 	.word	0x20000b04
 8011190:	20000b6c 	.word	0x20000b6c
 8011194:	20000bd4 	.word	0x20000bd4

08011198 <global_stdio_init.part.0>:
 8011198:	b510      	push	{r4, lr}
 801119a:	4b0b      	ldr	r3, [pc, #44]	; (80111c8 <global_stdio_init.part.0+0x30>)
 801119c:	4c0b      	ldr	r4, [pc, #44]	; (80111cc <global_stdio_init.part.0+0x34>)
 801119e:	4a0c      	ldr	r2, [pc, #48]	; (80111d0 <global_stdio_init.part.0+0x38>)
 80111a0:	601a      	str	r2, [r3, #0]
 80111a2:	4620      	mov	r0, r4
 80111a4:	2200      	movs	r2, #0
 80111a6:	2104      	movs	r1, #4
 80111a8:	f7ff ffa6 	bl	80110f8 <std>
 80111ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80111b0:	2201      	movs	r2, #1
 80111b2:	2109      	movs	r1, #9
 80111b4:	f7ff ffa0 	bl	80110f8 <std>
 80111b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80111bc:	2202      	movs	r2, #2
 80111be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111c2:	2112      	movs	r1, #18
 80111c4:	f7ff bf98 	b.w	80110f8 <std>
 80111c8:	20000c3c 	.word	0x20000c3c
 80111cc:	20000b04 	.word	0x20000b04
 80111d0:	08011141 	.word	0x08011141

080111d4 <__sfp_lock_acquire>:
 80111d4:	4801      	ldr	r0, [pc, #4]	; (80111dc <__sfp_lock_acquire+0x8>)
 80111d6:	f000 ba2f 	b.w	8011638 <__retarget_lock_acquire_recursive>
 80111da:	bf00      	nop
 80111dc:	20000c45 	.word	0x20000c45

080111e0 <__sfp_lock_release>:
 80111e0:	4801      	ldr	r0, [pc, #4]	; (80111e8 <__sfp_lock_release+0x8>)
 80111e2:	f000 ba2a 	b.w	801163a <__retarget_lock_release_recursive>
 80111e6:	bf00      	nop
 80111e8:	20000c45 	.word	0x20000c45

080111ec <__sinit>:
 80111ec:	b510      	push	{r4, lr}
 80111ee:	4604      	mov	r4, r0
 80111f0:	f7ff fff0 	bl	80111d4 <__sfp_lock_acquire>
 80111f4:	6a23      	ldr	r3, [r4, #32]
 80111f6:	b11b      	cbz	r3, 8011200 <__sinit+0x14>
 80111f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111fc:	f7ff bff0 	b.w	80111e0 <__sfp_lock_release>
 8011200:	4b04      	ldr	r3, [pc, #16]	; (8011214 <__sinit+0x28>)
 8011202:	6223      	str	r3, [r4, #32]
 8011204:	4b04      	ldr	r3, [pc, #16]	; (8011218 <__sinit+0x2c>)
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d1f5      	bne.n	80111f8 <__sinit+0xc>
 801120c:	f7ff ffc4 	bl	8011198 <global_stdio_init.part.0>
 8011210:	e7f2      	b.n	80111f8 <__sinit+0xc>
 8011212:	bf00      	nop
 8011214:	08011159 	.word	0x08011159
 8011218:	20000c3c 	.word	0x20000c3c

0801121c <_fwalk_sglue>:
 801121c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011220:	4607      	mov	r7, r0
 8011222:	4688      	mov	r8, r1
 8011224:	4614      	mov	r4, r2
 8011226:	2600      	movs	r6, #0
 8011228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801122c:	f1b9 0901 	subs.w	r9, r9, #1
 8011230:	d505      	bpl.n	801123e <_fwalk_sglue+0x22>
 8011232:	6824      	ldr	r4, [r4, #0]
 8011234:	2c00      	cmp	r4, #0
 8011236:	d1f7      	bne.n	8011228 <_fwalk_sglue+0xc>
 8011238:	4630      	mov	r0, r6
 801123a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801123e:	89ab      	ldrh	r3, [r5, #12]
 8011240:	2b01      	cmp	r3, #1
 8011242:	d907      	bls.n	8011254 <_fwalk_sglue+0x38>
 8011244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011248:	3301      	adds	r3, #1
 801124a:	d003      	beq.n	8011254 <_fwalk_sglue+0x38>
 801124c:	4629      	mov	r1, r5
 801124e:	4638      	mov	r0, r7
 8011250:	47c0      	blx	r8
 8011252:	4306      	orrs	r6, r0
 8011254:	3568      	adds	r5, #104	; 0x68
 8011256:	e7e9      	b.n	801122c <_fwalk_sglue+0x10>

08011258 <iprintf>:
 8011258:	b40f      	push	{r0, r1, r2, r3}
 801125a:	b507      	push	{r0, r1, r2, lr}
 801125c:	4906      	ldr	r1, [pc, #24]	; (8011278 <iprintf+0x20>)
 801125e:	ab04      	add	r3, sp, #16
 8011260:	6808      	ldr	r0, [r1, #0]
 8011262:	f853 2b04 	ldr.w	r2, [r3], #4
 8011266:	6881      	ldr	r1, [r0, #8]
 8011268:	9301      	str	r3, [sp, #4]
 801126a:	f000 fc95 	bl	8011b98 <_vfiprintf_r>
 801126e:	b003      	add	sp, #12
 8011270:	f85d eb04 	ldr.w	lr, [sp], #4
 8011274:	b004      	add	sp, #16
 8011276:	4770      	bx	lr
 8011278:	200000a4 	.word	0x200000a4

0801127c <_puts_r>:
 801127c:	6a03      	ldr	r3, [r0, #32]
 801127e:	b570      	push	{r4, r5, r6, lr}
 8011280:	6884      	ldr	r4, [r0, #8]
 8011282:	4605      	mov	r5, r0
 8011284:	460e      	mov	r6, r1
 8011286:	b90b      	cbnz	r3, 801128c <_puts_r+0x10>
 8011288:	f7ff ffb0 	bl	80111ec <__sinit>
 801128c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801128e:	07db      	lsls	r3, r3, #31
 8011290:	d405      	bmi.n	801129e <_puts_r+0x22>
 8011292:	89a3      	ldrh	r3, [r4, #12]
 8011294:	0598      	lsls	r0, r3, #22
 8011296:	d402      	bmi.n	801129e <_puts_r+0x22>
 8011298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801129a:	f000 f9cd 	bl	8011638 <__retarget_lock_acquire_recursive>
 801129e:	89a3      	ldrh	r3, [r4, #12]
 80112a0:	0719      	lsls	r1, r3, #28
 80112a2:	d513      	bpl.n	80112cc <_puts_r+0x50>
 80112a4:	6923      	ldr	r3, [r4, #16]
 80112a6:	b18b      	cbz	r3, 80112cc <_puts_r+0x50>
 80112a8:	3e01      	subs	r6, #1
 80112aa:	68a3      	ldr	r3, [r4, #8]
 80112ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80112b0:	3b01      	subs	r3, #1
 80112b2:	60a3      	str	r3, [r4, #8]
 80112b4:	b9e9      	cbnz	r1, 80112f2 <_puts_r+0x76>
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	da2e      	bge.n	8011318 <_puts_r+0x9c>
 80112ba:	4622      	mov	r2, r4
 80112bc:	210a      	movs	r1, #10
 80112be:	4628      	mov	r0, r5
 80112c0:	f000 f89b 	bl	80113fa <__swbuf_r>
 80112c4:	3001      	adds	r0, #1
 80112c6:	d007      	beq.n	80112d8 <_puts_r+0x5c>
 80112c8:	250a      	movs	r5, #10
 80112ca:	e007      	b.n	80112dc <_puts_r+0x60>
 80112cc:	4621      	mov	r1, r4
 80112ce:	4628      	mov	r0, r5
 80112d0:	f000 f8d0 	bl	8011474 <__swsetup_r>
 80112d4:	2800      	cmp	r0, #0
 80112d6:	d0e7      	beq.n	80112a8 <_puts_r+0x2c>
 80112d8:	f04f 35ff 	mov.w	r5, #4294967295
 80112dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112de:	07da      	lsls	r2, r3, #31
 80112e0:	d405      	bmi.n	80112ee <_puts_r+0x72>
 80112e2:	89a3      	ldrh	r3, [r4, #12]
 80112e4:	059b      	lsls	r3, r3, #22
 80112e6:	d402      	bmi.n	80112ee <_puts_r+0x72>
 80112e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112ea:	f000 f9a6 	bl	801163a <__retarget_lock_release_recursive>
 80112ee:	4628      	mov	r0, r5
 80112f0:	bd70      	pop	{r4, r5, r6, pc}
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	da04      	bge.n	8011300 <_puts_r+0x84>
 80112f6:	69a2      	ldr	r2, [r4, #24]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	dc06      	bgt.n	801130a <_puts_r+0x8e>
 80112fc:	290a      	cmp	r1, #10
 80112fe:	d004      	beq.n	801130a <_puts_r+0x8e>
 8011300:	6823      	ldr	r3, [r4, #0]
 8011302:	1c5a      	adds	r2, r3, #1
 8011304:	6022      	str	r2, [r4, #0]
 8011306:	7019      	strb	r1, [r3, #0]
 8011308:	e7cf      	b.n	80112aa <_puts_r+0x2e>
 801130a:	4622      	mov	r2, r4
 801130c:	4628      	mov	r0, r5
 801130e:	f000 f874 	bl	80113fa <__swbuf_r>
 8011312:	3001      	adds	r0, #1
 8011314:	d1c9      	bne.n	80112aa <_puts_r+0x2e>
 8011316:	e7df      	b.n	80112d8 <_puts_r+0x5c>
 8011318:	6823      	ldr	r3, [r4, #0]
 801131a:	250a      	movs	r5, #10
 801131c:	1c5a      	adds	r2, r3, #1
 801131e:	6022      	str	r2, [r4, #0]
 8011320:	701d      	strb	r5, [r3, #0]
 8011322:	e7db      	b.n	80112dc <_puts_r+0x60>

08011324 <puts>:
 8011324:	4b02      	ldr	r3, [pc, #8]	; (8011330 <puts+0xc>)
 8011326:	4601      	mov	r1, r0
 8011328:	6818      	ldr	r0, [r3, #0]
 801132a:	f7ff bfa7 	b.w	801127c <_puts_r>
 801132e:	bf00      	nop
 8011330:	200000a4 	.word	0x200000a4

08011334 <siprintf>:
 8011334:	b40e      	push	{r1, r2, r3}
 8011336:	b500      	push	{lr}
 8011338:	b09c      	sub	sp, #112	; 0x70
 801133a:	ab1d      	add	r3, sp, #116	; 0x74
 801133c:	9002      	str	r0, [sp, #8]
 801133e:	9006      	str	r0, [sp, #24]
 8011340:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011344:	4809      	ldr	r0, [pc, #36]	; (801136c <siprintf+0x38>)
 8011346:	9107      	str	r1, [sp, #28]
 8011348:	9104      	str	r1, [sp, #16]
 801134a:	4909      	ldr	r1, [pc, #36]	; (8011370 <siprintf+0x3c>)
 801134c:	f853 2b04 	ldr.w	r2, [r3], #4
 8011350:	9105      	str	r1, [sp, #20]
 8011352:	6800      	ldr	r0, [r0, #0]
 8011354:	9301      	str	r3, [sp, #4]
 8011356:	a902      	add	r1, sp, #8
 8011358:	f000 faf6 	bl	8011948 <_svfiprintf_r>
 801135c:	9b02      	ldr	r3, [sp, #8]
 801135e:	2200      	movs	r2, #0
 8011360:	701a      	strb	r2, [r3, #0]
 8011362:	b01c      	add	sp, #112	; 0x70
 8011364:	f85d eb04 	ldr.w	lr, [sp], #4
 8011368:	b003      	add	sp, #12
 801136a:	4770      	bx	lr
 801136c:	200000a4 	.word	0x200000a4
 8011370:	ffff0208 	.word	0xffff0208

08011374 <__sread>:
 8011374:	b510      	push	{r4, lr}
 8011376:	460c      	mov	r4, r1
 8011378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801137c:	f000 f90e 	bl	801159c <_read_r>
 8011380:	2800      	cmp	r0, #0
 8011382:	bfab      	itete	ge
 8011384:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011386:	89a3      	ldrhlt	r3, [r4, #12]
 8011388:	181b      	addge	r3, r3, r0
 801138a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801138e:	bfac      	ite	ge
 8011390:	6563      	strge	r3, [r4, #84]	; 0x54
 8011392:	81a3      	strhlt	r3, [r4, #12]
 8011394:	bd10      	pop	{r4, pc}

08011396 <__swrite>:
 8011396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801139a:	461f      	mov	r7, r3
 801139c:	898b      	ldrh	r3, [r1, #12]
 801139e:	05db      	lsls	r3, r3, #23
 80113a0:	4605      	mov	r5, r0
 80113a2:	460c      	mov	r4, r1
 80113a4:	4616      	mov	r6, r2
 80113a6:	d505      	bpl.n	80113b4 <__swrite+0x1e>
 80113a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113ac:	2302      	movs	r3, #2
 80113ae:	2200      	movs	r2, #0
 80113b0:	f000 f8e2 	bl	8011578 <_lseek_r>
 80113b4:	89a3      	ldrh	r3, [r4, #12]
 80113b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80113be:	81a3      	strh	r3, [r4, #12]
 80113c0:	4632      	mov	r2, r6
 80113c2:	463b      	mov	r3, r7
 80113c4:	4628      	mov	r0, r5
 80113c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113ca:	f000 b8f9 	b.w	80115c0 <_write_r>

080113ce <__sseek>:
 80113ce:	b510      	push	{r4, lr}
 80113d0:	460c      	mov	r4, r1
 80113d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113d6:	f000 f8cf 	bl	8011578 <_lseek_r>
 80113da:	1c43      	adds	r3, r0, #1
 80113dc:	89a3      	ldrh	r3, [r4, #12]
 80113de:	bf15      	itete	ne
 80113e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80113e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80113e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80113ea:	81a3      	strheq	r3, [r4, #12]
 80113ec:	bf18      	it	ne
 80113ee:	81a3      	strhne	r3, [r4, #12]
 80113f0:	bd10      	pop	{r4, pc}

080113f2 <__sclose>:
 80113f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113f6:	f000 b8af 	b.w	8011558 <_close_r>

080113fa <__swbuf_r>:
 80113fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113fc:	460e      	mov	r6, r1
 80113fe:	4614      	mov	r4, r2
 8011400:	4605      	mov	r5, r0
 8011402:	b118      	cbz	r0, 801140c <__swbuf_r+0x12>
 8011404:	6a03      	ldr	r3, [r0, #32]
 8011406:	b90b      	cbnz	r3, 801140c <__swbuf_r+0x12>
 8011408:	f7ff fef0 	bl	80111ec <__sinit>
 801140c:	69a3      	ldr	r3, [r4, #24]
 801140e:	60a3      	str	r3, [r4, #8]
 8011410:	89a3      	ldrh	r3, [r4, #12]
 8011412:	071a      	lsls	r2, r3, #28
 8011414:	d525      	bpl.n	8011462 <__swbuf_r+0x68>
 8011416:	6923      	ldr	r3, [r4, #16]
 8011418:	b31b      	cbz	r3, 8011462 <__swbuf_r+0x68>
 801141a:	6823      	ldr	r3, [r4, #0]
 801141c:	6922      	ldr	r2, [r4, #16]
 801141e:	1a98      	subs	r0, r3, r2
 8011420:	6963      	ldr	r3, [r4, #20]
 8011422:	b2f6      	uxtb	r6, r6
 8011424:	4283      	cmp	r3, r0
 8011426:	4637      	mov	r7, r6
 8011428:	dc04      	bgt.n	8011434 <__swbuf_r+0x3a>
 801142a:	4621      	mov	r1, r4
 801142c:	4628      	mov	r0, r5
 801142e:	f000 fee3 	bl	80121f8 <_fflush_r>
 8011432:	b9e0      	cbnz	r0, 801146e <__swbuf_r+0x74>
 8011434:	68a3      	ldr	r3, [r4, #8]
 8011436:	3b01      	subs	r3, #1
 8011438:	60a3      	str	r3, [r4, #8]
 801143a:	6823      	ldr	r3, [r4, #0]
 801143c:	1c5a      	adds	r2, r3, #1
 801143e:	6022      	str	r2, [r4, #0]
 8011440:	701e      	strb	r6, [r3, #0]
 8011442:	6962      	ldr	r2, [r4, #20]
 8011444:	1c43      	adds	r3, r0, #1
 8011446:	429a      	cmp	r2, r3
 8011448:	d004      	beq.n	8011454 <__swbuf_r+0x5a>
 801144a:	89a3      	ldrh	r3, [r4, #12]
 801144c:	07db      	lsls	r3, r3, #31
 801144e:	d506      	bpl.n	801145e <__swbuf_r+0x64>
 8011450:	2e0a      	cmp	r6, #10
 8011452:	d104      	bne.n	801145e <__swbuf_r+0x64>
 8011454:	4621      	mov	r1, r4
 8011456:	4628      	mov	r0, r5
 8011458:	f000 fece 	bl	80121f8 <_fflush_r>
 801145c:	b938      	cbnz	r0, 801146e <__swbuf_r+0x74>
 801145e:	4638      	mov	r0, r7
 8011460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011462:	4621      	mov	r1, r4
 8011464:	4628      	mov	r0, r5
 8011466:	f000 f805 	bl	8011474 <__swsetup_r>
 801146a:	2800      	cmp	r0, #0
 801146c:	d0d5      	beq.n	801141a <__swbuf_r+0x20>
 801146e:	f04f 37ff 	mov.w	r7, #4294967295
 8011472:	e7f4      	b.n	801145e <__swbuf_r+0x64>

08011474 <__swsetup_r>:
 8011474:	b538      	push	{r3, r4, r5, lr}
 8011476:	4b2a      	ldr	r3, [pc, #168]	; (8011520 <__swsetup_r+0xac>)
 8011478:	4605      	mov	r5, r0
 801147a:	6818      	ldr	r0, [r3, #0]
 801147c:	460c      	mov	r4, r1
 801147e:	b118      	cbz	r0, 8011488 <__swsetup_r+0x14>
 8011480:	6a03      	ldr	r3, [r0, #32]
 8011482:	b90b      	cbnz	r3, 8011488 <__swsetup_r+0x14>
 8011484:	f7ff feb2 	bl	80111ec <__sinit>
 8011488:	89a3      	ldrh	r3, [r4, #12]
 801148a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801148e:	0718      	lsls	r0, r3, #28
 8011490:	d422      	bmi.n	80114d8 <__swsetup_r+0x64>
 8011492:	06d9      	lsls	r1, r3, #27
 8011494:	d407      	bmi.n	80114a6 <__swsetup_r+0x32>
 8011496:	2309      	movs	r3, #9
 8011498:	602b      	str	r3, [r5, #0]
 801149a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801149e:	81a3      	strh	r3, [r4, #12]
 80114a0:	f04f 30ff 	mov.w	r0, #4294967295
 80114a4:	e034      	b.n	8011510 <__swsetup_r+0x9c>
 80114a6:	0758      	lsls	r0, r3, #29
 80114a8:	d512      	bpl.n	80114d0 <__swsetup_r+0x5c>
 80114aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114ac:	b141      	cbz	r1, 80114c0 <__swsetup_r+0x4c>
 80114ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80114b2:	4299      	cmp	r1, r3
 80114b4:	d002      	beq.n	80114bc <__swsetup_r+0x48>
 80114b6:	4628      	mov	r0, r5
 80114b8:	f000 f8ec 	bl	8011694 <_free_r>
 80114bc:	2300      	movs	r3, #0
 80114be:	6363      	str	r3, [r4, #52]	; 0x34
 80114c0:	89a3      	ldrh	r3, [r4, #12]
 80114c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80114c6:	81a3      	strh	r3, [r4, #12]
 80114c8:	2300      	movs	r3, #0
 80114ca:	6063      	str	r3, [r4, #4]
 80114cc:	6923      	ldr	r3, [r4, #16]
 80114ce:	6023      	str	r3, [r4, #0]
 80114d0:	89a3      	ldrh	r3, [r4, #12]
 80114d2:	f043 0308 	orr.w	r3, r3, #8
 80114d6:	81a3      	strh	r3, [r4, #12]
 80114d8:	6923      	ldr	r3, [r4, #16]
 80114da:	b94b      	cbnz	r3, 80114f0 <__swsetup_r+0x7c>
 80114dc:	89a3      	ldrh	r3, [r4, #12]
 80114de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80114e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80114e6:	d003      	beq.n	80114f0 <__swsetup_r+0x7c>
 80114e8:	4621      	mov	r1, r4
 80114ea:	4628      	mov	r0, r5
 80114ec:	f000 fee4 	bl	80122b8 <__smakebuf_r>
 80114f0:	89a0      	ldrh	r0, [r4, #12]
 80114f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80114f6:	f010 0301 	ands.w	r3, r0, #1
 80114fa:	d00a      	beq.n	8011512 <__swsetup_r+0x9e>
 80114fc:	2300      	movs	r3, #0
 80114fe:	60a3      	str	r3, [r4, #8]
 8011500:	6963      	ldr	r3, [r4, #20]
 8011502:	425b      	negs	r3, r3
 8011504:	61a3      	str	r3, [r4, #24]
 8011506:	6923      	ldr	r3, [r4, #16]
 8011508:	b943      	cbnz	r3, 801151c <__swsetup_r+0xa8>
 801150a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801150e:	d1c4      	bne.n	801149a <__swsetup_r+0x26>
 8011510:	bd38      	pop	{r3, r4, r5, pc}
 8011512:	0781      	lsls	r1, r0, #30
 8011514:	bf58      	it	pl
 8011516:	6963      	ldrpl	r3, [r4, #20]
 8011518:	60a3      	str	r3, [r4, #8]
 801151a:	e7f4      	b.n	8011506 <__swsetup_r+0x92>
 801151c:	2000      	movs	r0, #0
 801151e:	e7f7      	b.n	8011510 <__swsetup_r+0x9c>
 8011520:	200000a4 	.word	0x200000a4

08011524 <memset>:
 8011524:	4402      	add	r2, r0
 8011526:	4603      	mov	r3, r0
 8011528:	4293      	cmp	r3, r2
 801152a:	d100      	bne.n	801152e <memset+0xa>
 801152c:	4770      	bx	lr
 801152e:	f803 1b01 	strb.w	r1, [r3], #1
 8011532:	e7f9      	b.n	8011528 <memset+0x4>

08011534 <strncmp>:
 8011534:	b510      	push	{r4, lr}
 8011536:	b16a      	cbz	r2, 8011554 <strncmp+0x20>
 8011538:	3901      	subs	r1, #1
 801153a:	1884      	adds	r4, r0, r2
 801153c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011540:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011544:	429a      	cmp	r2, r3
 8011546:	d103      	bne.n	8011550 <strncmp+0x1c>
 8011548:	42a0      	cmp	r0, r4
 801154a:	d001      	beq.n	8011550 <strncmp+0x1c>
 801154c:	2a00      	cmp	r2, #0
 801154e:	d1f5      	bne.n	801153c <strncmp+0x8>
 8011550:	1ad0      	subs	r0, r2, r3
 8011552:	bd10      	pop	{r4, pc}
 8011554:	4610      	mov	r0, r2
 8011556:	e7fc      	b.n	8011552 <strncmp+0x1e>

08011558 <_close_r>:
 8011558:	b538      	push	{r3, r4, r5, lr}
 801155a:	4d06      	ldr	r5, [pc, #24]	; (8011574 <_close_r+0x1c>)
 801155c:	2300      	movs	r3, #0
 801155e:	4604      	mov	r4, r0
 8011560:	4608      	mov	r0, r1
 8011562:	602b      	str	r3, [r5, #0]
 8011564:	f7f6 ff4f 	bl	8008406 <_close>
 8011568:	1c43      	adds	r3, r0, #1
 801156a:	d102      	bne.n	8011572 <_close_r+0x1a>
 801156c:	682b      	ldr	r3, [r5, #0]
 801156e:	b103      	cbz	r3, 8011572 <_close_r+0x1a>
 8011570:	6023      	str	r3, [r4, #0]
 8011572:	bd38      	pop	{r3, r4, r5, pc}
 8011574:	20000c40 	.word	0x20000c40

08011578 <_lseek_r>:
 8011578:	b538      	push	{r3, r4, r5, lr}
 801157a:	4d07      	ldr	r5, [pc, #28]	; (8011598 <_lseek_r+0x20>)
 801157c:	4604      	mov	r4, r0
 801157e:	4608      	mov	r0, r1
 8011580:	4611      	mov	r1, r2
 8011582:	2200      	movs	r2, #0
 8011584:	602a      	str	r2, [r5, #0]
 8011586:	461a      	mov	r2, r3
 8011588:	f7f6 ff64 	bl	8008454 <_lseek>
 801158c:	1c43      	adds	r3, r0, #1
 801158e:	d102      	bne.n	8011596 <_lseek_r+0x1e>
 8011590:	682b      	ldr	r3, [r5, #0]
 8011592:	b103      	cbz	r3, 8011596 <_lseek_r+0x1e>
 8011594:	6023      	str	r3, [r4, #0]
 8011596:	bd38      	pop	{r3, r4, r5, pc}
 8011598:	20000c40 	.word	0x20000c40

0801159c <_read_r>:
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	4d07      	ldr	r5, [pc, #28]	; (80115bc <_read_r+0x20>)
 80115a0:	4604      	mov	r4, r0
 80115a2:	4608      	mov	r0, r1
 80115a4:	4611      	mov	r1, r2
 80115a6:	2200      	movs	r2, #0
 80115a8:	602a      	str	r2, [r5, #0]
 80115aa:	461a      	mov	r2, r3
 80115ac:	f7f6 fef2 	bl	8008394 <_read>
 80115b0:	1c43      	adds	r3, r0, #1
 80115b2:	d102      	bne.n	80115ba <_read_r+0x1e>
 80115b4:	682b      	ldr	r3, [r5, #0]
 80115b6:	b103      	cbz	r3, 80115ba <_read_r+0x1e>
 80115b8:	6023      	str	r3, [r4, #0]
 80115ba:	bd38      	pop	{r3, r4, r5, pc}
 80115bc:	20000c40 	.word	0x20000c40

080115c0 <_write_r>:
 80115c0:	b538      	push	{r3, r4, r5, lr}
 80115c2:	4d07      	ldr	r5, [pc, #28]	; (80115e0 <_write_r+0x20>)
 80115c4:	4604      	mov	r4, r0
 80115c6:	4608      	mov	r0, r1
 80115c8:	4611      	mov	r1, r2
 80115ca:	2200      	movs	r2, #0
 80115cc:	602a      	str	r2, [r5, #0]
 80115ce:	461a      	mov	r2, r3
 80115d0:	f7f6 fefd 	bl	80083ce <_write>
 80115d4:	1c43      	adds	r3, r0, #1
 80115d6:	d102      	bne.n	80115de <_write_r+0x1e>
 80115d8:	682b      	ldr	r3, [r5, #0]
 80115da:	b103      	cbz	r3, 80115de <_write_r+0x1e>
 80115dc:	6023      	str	r3, [r4, #0]
 80115de:	bd38      	pop	{r3, r4, r5, pc}
 80115e0:	20000c40 	.word	0x20000c40

080115e4 <__errno>:
 80115e4:	4b01      	ldr	r3, [pc, #4]	; (80115ec <__errno+0x8>)
 80115e6:	6818      	ldr	r0, [r3, #0]
 80115e8:	4770      	bx	lr
 80115ea:	bf00      	nop
 80115ec:	200000a4 	.word	0x200000a4

080115f0 <__libc_init_array>:
 80115f0:	b570      	push	{r4, r5, r6, lr}
 80115f2:	4d0d      	ldr	r5, [pc, #52]	; (8011628 <__libc_init_array+0x38>)
 80115f4:	4c0d      	ldr	r4, [pc, #52]	; (801162c <__libc_init_array+0x3c>)
 80115f6:	1b64      	subs	r4, r4, r5
 80115f8:	10a4      	asrs	r4, r4, #2
 80115fa:	2600      	movs	r6, #0
 80115fc:	42a6      	cmp	r6, r4
 80115fe:	d109      	bne.n	8011614 <__libc_init_array+0x24>
 8011600:	4d0b      	ldr	r5, [pc, #44]	; (8011630 <__libc_init_array+0x40>)
 8011602:	4c0c      	ldr	r4, [pc, #48]	; (8011634 <__libc_init_array+0x44>)
 8011604:	f000 ff62 	bl	80124cc <_init>
 8011608:	1b64      	subs	r4, r4, r5
 801160a:	10a4      	asrs	r4, r4, #2
 801160c:	2600      	movs	r6, #0
 801160e:	42a6      	cmp	r6, r4
 8011610:	d105      	bne.n	801161e <__libc_init_array+0x2e>
 8011612:	bd70      	pop	{r4, r5, r6, pc}
 8011614:	f855 3b04 	ldr.w	r3, [r5], #4
 8011618:	4798      	blx	r3
 801161a:	3601      	adds	r6, #1
 801161c:	e7ee      	b.n	80115fc <__libc_init_array+0xc>
 801161e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011622:	4798      	blx	r3
 8011624:	3601      	adds	r6, #1
 8011626:	e7f2      	b.n	801160e <__libc_init_array+0x1e>
 8011628:	08012cec 	.word	0x08012cec
 801162c:	08012cec 	.word	0x08012cec
 8011630:	08012cec 	.word	0x08012cec
 8011634:	08012cf0 	.word	0x08012cf0

08011638 <__retarget_lock_acquire_recursive>:
 8011638:	4770      	bx	lr

0801163a <__retarget_lock_release_recursive>:
 801163a:	4770      	bx	lr

0801163c <memcpy>:
 801163c:	440a      	add	r2, r1
 801163e:	4291      	cmp	r1, r2
 8011640:	f100 33ff 	add.w	r3, r0, #4294967295
 8011644:	d100      	bne.n	8011648 <memcpy+0xc>
 8011646:	4770      	bx	lr
 8011648:	b510      	push	{r4, lr}
 801164a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801164e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011652:	4291      	cmp	r1, r2
 8011654:	d1f9      	bne.n	801164a <memcpy+0xe>
 8011656:	bd10      	pop	{r4, pc}

08011658 <__assert_func>:
 8011658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801165a:	4614      	mov	r4, r2
 801165c:	461a      	mov	r2, r3
 801165e:	4b09      	ldr	r3, [pc, #36]	; (8011684 <__assert_func+0x2c>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	4605      	mov	r5, r0
 8011664:	68d8      	ldr	r0, [r3, #12]
 8011666:	b14c      	cbz	r4, 801167c <__assert_func+0x24>
 8011668:	4b07      	ldr	r3, [pc, #28]	; (8011688 <__assert_func+0x30>)
 801166a:	9100      	str	r1, [sp, #0]
 801166c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011670:	4906      	ldr	r1, [pc, #24]	; (801168c <__assert_func+0x34>)
 8011672:	462b      	mov	r3, r5
 8011674:	f000 fde8 	bl	8012248 <fiprintf>
 8011678:	f000 fea6 	bl	80123c8 <abort>
 801167c:	4b04      	ldr	r3, [pc, #16]	; (8011690 <__assert_func+0x38>)
 801167e:	461c      	mov	r4, r3
 8011680:	e7f3      	b.n	801166a <__assert_func+0x12>
 8011682:	bf00      	nop
 8011684:	200000a4 	.word	0x200000a4
 8011688:	08012c74 	.word	0x08012c74
 801168c:	08012c81 	.word	0x08012c81
 8011690:	08012caf 	.word	0x08012caf

08011694 <_free_r>:
 8011694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011696:	2900      	cmp	r1, #0
 8011698:	d044      	beq.n	8011724 <_free_r+0x90>
 801169a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801169e:	9001      	str	r0, [sp, #4]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	f1a1 0404 	sub.w	r4, r1, #4
 80116a6:	bfb8      	it	lt
 80116a8:	18e4      	addlt	r4, r4, r3
 80116aa:	f000 f8e7 	bl	801187c <__malloc_lock>
 80116ae:	4a1e      	ldr	r2, [pc, #120]	; (8011728 <_free_r+0x94>)
 80116b0:	9801      	ldr	r0, [sp, #4]
 80116b2:	6813      	ldr	r3, [r2, #0]
 80116b4:	b933      	cbnz	r3, 80116c4 <_free_r+0x30>
 80116b6:	6063      	str	r3, [r4, #4]
 80116b8:	6014      	str	r4, [r2, #0]
 80116ba:	b003      	add	sp, #12
 80116bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116c0:	f000 b8e2 	b.w	8011888 <__malloc_unlock>
 80116c4:	42a3      	cmp	r3, r4
 80116c6:	d908      	bls.n	80116da <_free_r+0x46>
 80116c8:	6825      	ldr	r5, [r4, #0]
 80116ca:	1961      	adds	r1, r4, r5
 80116cc:	428b      	cmp	r3, r1
 80116ce:	bf01      	itttt	eq
 80116d0:	6819      	ldreq	r1, [r3, #0]
 80116d2:	685b      	ldreq	r3, [r3, #4]
 80116d4:	1949      	addeq	r1, r1, r5
 80116d6:	6021      	streq	r1, [r4, #0]
 80116d8:	e7ed      	b.n	80116b6 <_free_r+0x22>
 80116da:	461a      	mov	r2, r3
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	b10b      	cbz	r3, 80116e4 <_free_r+0x50>
 80116e0:	42a3      	cmp	r3, r4
 80116e2:	d9fa      	bls.n	80116da <_free_r+0x46>
 80116e4:	6811      	ldr	r1, [r2, #0]
 80116e6:	1855      	adds	r5, r2, r1
 80116e8:	42a5      	cmp	r5, r4
 80116ea:	d10b      	bne.n	8011704 <_free_r+0x70>
 80116ec:	6824      	ldr	r4, [r4, #0]
 80116ee:	4421      	add	r1, r4
 80116f0:	1854      	adds	r4, r2, r1
 80116f2:	42a3      	cmp	r3, r4
 80116f4:	6011      	str	r1, [r2, #0]
 80116f6:	d1e0      	bne.n	80116ba <_free_r+0x26>
 80116f8:	681c      	ldr	r4, [r3, #0]
 80116fa:	685b      	ldr	r3, [r3, #4]
 80116fc:	6053      	str	r3, [r2, #4]
 80116fe:	440c      	add	r4, r1
 8011700:	6014      	str	r4, [r2, #0]
 8011702:	e7da      	b.n	80116ba <_free_r+0x26>
 8011704:	d902      	bls.n	801170c <_free_r+0x78>
 8011706:	230c      	movs	r3, #12
 8011708:	6003      	str	r3, [r0, #0]
 801170a:	e7d6      	b.n	80116ba <_free_r+0x26>
 801170c:	6825      	ldr	r5, [r4, #0]
 801170e:	1961      	adds	r1, r4, r5
 8011710:	428b      	cmp	r3, r1
 8011712:	bf04      	itt	eq
 8011714:	6819      	ldreq	r1, [r3, #0]
 8011716:	685b      	ldreq	r3, [r3, #4]
 8011718:	6063      	str	r3, [r4, #4]
 801171a:	bf04      	itt	eq
 801171c:	1949      	addeq	r1, r1, r5
 801171e:	6021      	streq	r1, [r4, #0]
 8011720:	6054      	str	r4, [r2, #4]
 8011722:	e7ca      	b.n	80116ba <_free_r+0x26>
 8011724:	b003      	add	sp, #12
 8011726:	bd30      	pop	{r4, r5, pc}
 8011728:	20000c48 	.word	0x20000c48

0801172c <malloc>:
 801172c:	4b02      	ldr	r3, [pc, #8]	; (8011738 <malloc+0xc>)
 801172e:	4601      	mov	r1, r0
 8011730:	6818      	ldr	r0, [r3, #0]
 8011732:	f000 b823 	b.w	801177c <_malloc_r>
 8011736:	bf00      	nop
 8011738:	200000a4 	.word	0x200000a4

0801173c <sbrk_aligned>:
 801173c:	b570      	push	{r4, r5, r6, lr}
 801173e:	4e0e      	ldr	r6, [pc, #56]	; (8011778 <sbrk_aligned+0x3c>)
 8011740:	460c      	mov	r4, r1
 8011742:	6831      	ldr	r1, [r6, #0]
 8011744:	4605      	mov	r5, r0
 8011746:	b911      	cbnz	r1, 801174e <sbrk_aligned+0x12>
 8011748:	f000 fe2e 	bl	80123a8 <_sbrk_r>
 801174c:	6030      	str	r0, [r6, #0]
 801174e:	4621      	mov	r1, r4
 8011750:	4628      	mov	r0, r5
 8011752:	f000 fe29 	bl	80123a8 <_sbrk_r>
 8011756:	1c43      	adds	r3, r0, #1
 8011758:	d00a      	beq.n	8011770 <sbrk_aligned+0x34>
 801175a:	1cc4      	adds	r4, r0, #3
 801175c:	f024 0403 	bic.w	r4, r4, #3
 8011760:	42a0      	cmp	r0, r4
 8011762:	d007      	beq.n	8011774 <sbrk_aligned+0x38>
 8011764:	1a21      	subs	r1, r4, r0
 8011766:	4628      	mov	r0, r5
 8011768:	f000 fe1e 	bl	80123a8 <_sbrk_r>
 801176c:	3001      	adds	r0, #1
 801176e:	d101      	bne.n	8011774 <sbrk_aligned+0x38>
 8011770:	f04f 34ff 	mov.w	r4, #4294967295
 8011774:	4620      	mov	r0, r4
 8011776:	bd70      	pop	{r4, r5, r6, pc}
 8011778:	20000c4c 	.word	0x20000c4c

0801177c <_malloc_r>:
 801177c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011780:	1ccd      	adds	r5, r1, #3
 8011782:	f025 0503 	bic.w	r5, r5, #3
 8011786:	3508      	adds	r5, #8
 8011788:	2d0c      	cmp	r5, #12
 801178a:	bf38      	it	cc
 801178c:	250c      	movcc	r5, #12
 801178e:	2d00      	cmp	r5, #0
 8011790:	4607      	mov	r7, r0
 8011792:	db01      	blt.n	8011798 <_malloc_r+0x1c>
 8011794:	42a9      	cmp	r1, r5
 8011796:	d905      	bls.n	80117a4 <_malloc_r+0x28>
 8011798:	230c      	movs	r3, #12
 801179a:	603b      	str	r3, [r7, #0]
 801179c:	2600      	movs	r6, #0
 801179e:	4630      	mov	r0, r6
 80117a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011878 <_malloc_r+0xfc>
 80117a8:	f000 f868 	bl	801187c <__malloc_lock>
 80117ac:	f8d8 3000 	ldr.w	r3, [r8]
 80117b0:	461c      	mov	r4, r3
 80117b2:	bb5c      	cbnz	r4, 801180c <_malloc_r+0x90>
 80117b4:	4629      	mov	r1, r5
 80117b6:	4638      	mov	r0, r7
 80117b8:	f7ff ffc0 	bl	801173c <sbrk_aligned>
 80117bc:	1c43      	adds	r3, r0, #1
 80117be:	4604      	mov	r4, r0
 80117c0:	d155      	bne.n	801186e <_malloc_r+0xf2>
 80117c2:	f8d8 4000 	ldr.w	r4, [r8]
 80117c6:	4626      	mov	r6, r4
 80117c8:	2e00      	cmp	r6, #0
 80117ca:	d145      	bne.n	8011858 <_malloc_r+0xdc>
 80117cc:	2c00      	cmp	r4, #0
 80117ce:	d048      	beq.n	8011862 <_malloc_r+0xe6>
 80117d0:	6823      	ldr	r3, [r4, #0]
 80117d2:	4631      	mov	r1, r6
 80117d4:	4638      	mov	r0, r7
 80117d6:	eb04 0903 	add.w	r9, r4, r3
 80117da:	f000 fde5 	bl	80123a8 <_sbrk_r>
 80117de:	4581      	cmp	r9, r0
 80117e0:	d13f      	bne.n	8011862 <_malloc_r+0xe6>
 80117e2:	6821      	ldr	r1, [r4, #0]
 80117e4:	1a6d      	subs	r5, r5, r1
 80117e6:	4629      	mov	r1, r5
 80117e8:	4638      	mov	r0, r7
 80117ea:	f7ff ffa7 	bl	801173c <sbrk_aligned>
 80117ee:	3001      	adds	r0, #1
 80117f0:	d037      	beq.n	8011862 <_malloc_r+0xe6>
 80117f2:	6823      	ldr	r3, [r4, #0]
 80117f4:	442b      	add	r3, r5
 80117f6:	6023      	str	r3, [r4, #0]
 80117f8:	f8d8 3000 	ldr.w	r3, [r8]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d038      	beq.n	8011872 <_malloc_r+0xf6>
 8011800:	685a      	ldr	r2, [r3, #4]
 8011802:	42a2      	cmp	r2, r4
 8011804:	d12b      	bne.n	801185e <_malloc_r+0xe2>
 8011806:	2200      	movs	r2, #0
 8011808:	605a      	str	r2, [r3, #4]
 801180a:	e00f      	b.n	801182c <_malloc_r+0xb0>
 801180c:	6822      	ldr	r2, [r4, #0]
 801180e:	1b52      	subs	r2, r2, r5
 8011810:	d41f      	bmi.n	8011852 <_malloc_r+0xd6>
 8011812:	2a0b      	cmp	r2, #11
 8011814:	d917      	bls.n	8011846 <_malloc_r+0xca>
 8011816:	1961      	adds	r1, r4, r5
 8011818:	42a3      	cmp	r3, r4
 801181a:	6025      	str	r5, [r4, #0]
 801181c:	bf18      	it	ne
 801181e:	6059      	strne	r1, [r3, #4]
 8011820:	6863      	ldr	r3, [r4, #4]
 8011822:	bf08      	it	eq
 8011824:	f8c8 1000 	streq.w	r1, [r8]
 8011828:	5162      	str	r2, [r4, r5]
 801182a:	604b      	str	r3, [r1, #4]
 801182c:	4638      	mov	r0, r7
 801182e:	f104 060b 	add.w	r6, r4, #11
 8011832:	f000 f829 	bl	8011888 <__malloc_unlock>
 8011836:	f026 0607 	bic.w	r6, r6, #7
 801183a:	1d23      	adds	r3, r4, #4
 801183c:	1af2      	subs	r2, r6, r3
 801183e:	d0ae      	beq.n	801179e <_malloc_r+0x22>
 8011840:	1b9b      	subs	r3, r3, r6
 8011842:	50a3      	str	r3, [r4, r2]
 8011844:	e7ab      	b.n	801179e <_malloc_r+0x22>
 8011846:	42a3      	cmp	r3, r4
 8011848:	6862      	ldr	r2, [r4, #4]
 801184a:	d1dd      	bne.n	8011808 <_malloc_r+0x8c>
 801184c:	f8c8 2000 	str.w	r2, [r8]
 8011850:	e7ec      	b.n	801182c <_malloc_r+0xb0>
 8011852:	4623      	mov	r3, r4
 8011854:	6864      	ldr	r4, [r4, #4]
 8011856:	e7ac      	b.n	80117b2 <_malloc_r+0x36>
 8011858:	4634      	mov	r4, r6
 801185a:	6876      	ldr	r6, [r6, #4]
 801185c:	e7b4      	b.n	80117c8 <_malloc_r+0x4c>
 801185e:	4613      	mov	r3, r2
 8011860:	e7cc      	b.n	80117fc <_malloc_r+0x80>
 8011862:	230c      	movs	r3, #12
 8011864:	603b      	str	r3, [r7, #0]
 8011866:	4638      	mov	r0, r7
 8011868:	f000 f80e 	bl	8011888 <__malloc_unlock>
 801186c:	e797      	b.n	801179e <_malloc_r+0x22>
 801186e:	6025      	str	r5, [r4, #0]
 8011870:	e7dc      	b.n	801182c <_malloc_r+0xb0>
 8011872:	605b      	str	r3, [r3, #4]
 8011874:	deff      	udf	#255	; 0xff
 8011876:	bf00      	nop
 8011878:	20000c48 	.word	0x20000c48

0801187c <__malloc_lock>:
 801187c:	4801      	ldr	r0, [pc, #4]	; (8011884 <__malloc_lock+0x8>)
 801187e:	f7ff bedb 	b.w	8011638 <__retarget_lock_acquire_recursive>
 8011882:	bf00      	nop
 8011884:	20000c44 	.word	0x20000c44

08011888 <__malloc_unlock>:
 8011888:	4801      	ldr	r0, [pc, #4]	; (8011890 <__malloc_unlock+0x8>)
 801188a:	f7ff bed6 	b.w	801163a <__retarget_lock_release_recursive>
 801188e:	bf00      	nop
 8011890:	20000c44 	.word	0x20000c44

08011894 <__ssputs_r>:
 8011894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011898:	688e      	ldr	r6, [r1, #8]
 801189a:	461f      	mov	r7, r3
 801189c:	42be      	cmp	r6, r7
 801189e:	680b      	ldr	r3, [r1, #0]
 80118a0:	4682      	mov	sl, r0
 80118a2:	460c      	mov	r4, r1
 80118a4:	4690      	mov	r8, r2
 80118a6:	d82c      	bhi.n	8011902 <__ssputs_r+0x6e>
 80118a8:	898a      	ldrh	r2, [r1, #12]
 80118aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80118ae:	d026      	beq.n	80118fe <__ssputs_r+0x6a>
 80118b0:	6965      	ldr	r5, [r4, #20]
 80118b2:	6909      	ldr	r1, [r1, #16]
 80118b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80118b8:	eba3 0901 	sub.w	r9, r3, r1
 80118bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80118c0:	1c7b      	adds	r3, r7, #1
 80118c2:	444b      	add	r3, r9
 80118c4:	106d      	asrs	r5, r5, #1
 80118c6:	429d      	cmp	r5, r3
 80118c8:	bf38      	it	cc
 80118ca:	461d      	movcc	r5, r3
 80118cc:	0553      	lsls	r3, r2, #21
 80118ce:	d527      	bpl.n	8011920 <__ssputs_r+0x8c>
 80118d0:	4629      	mov	r1, r5
 80118d2:	f7ff ff53 	bl	801177c <_malloc_r>
 80118d6:	4606      	mov	r6, r0
 80118d8:	b360      	cbz	r0, 8011934 <__ssputs_r+0xa0>
 80118da:	6921      	ldr	r1, [r4, #16]
 80118dc:	464a      	mov	r2, r9
 80118de:	f7ff fead 	bl	801163c <memcpy>
 80118e2:	89a3      	ldrh	r3, [r4, #12]
 80118e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80118e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118ec:	81a3      	strh	r3, [r4, #12]
 80118ee:	6126      	str	r6, [r4, #16]
 80118f0:	6165      	str	r5, [r4, #20]
 80118f2:	444e      	add	r6, r9
 80118f4:	eba5 0509 	sub.w	r5, r5, r9
 80118f8:	6026      	str	r6, [r4, #0]
 80118fa:	60a5      	str	r5, [r4, #8]
 80118fc:	463e      	mov	r6, r7
 80118fe:	42be      	cmp	r6, r7
 8011900:	d900      	bls.n	8011904 <__ssputs_r+0x70>
 8011902:	463e      	mov	r6, r7
 8011904:	6820      	ldr	r0, [r4, #0]
 8011906:	4632      	mov	r2, r6
 8011908:	4641      	mov	r1, r8
 801190a:	f000 fd11 	bl	8012330 <memmove>
 801190e:	68a3      	ldr	r3, [r4, #8]
 8011910:	1b9b      	subs	r3, r3, r6
 8011912:	60a3      	str	r3, [r4, #8]
 8011914:	6823      	ldr	r3, [r4, #0]
 8011916:	4433      	add	r3, r6
 8011918:	6023      	str	r3, [r4, #0]
 801191a:	2000      	movs	r0, #0
 801191c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011920:	462a      	mov	r2, r5
 8011922:	f000 fd58 	bl	80123d6 <_realloc_r>
 8011926:	4606      	mov	r6, r0
 8011928:	2800      	cmp	r0, #0
 801192a:	d1e0      	bne.n	80118ee <__ssputs_r+0x5a>
 801192c:	6921      	ldr	r1, [r4, #16]
 801192e:	4650      	mov	r0, sl
 8011930:	f7ff feb0 	bl	8011694 <_free_r>
 8011934:	230c      	movs	r3, #12
 8011936:	f8ca 3000 	str.w	r3, [sl]
 801193a:	89a3      	ldrh	r3, [r4, #12]
 801193c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011940:	81a3      	strh	r3, [r4, #12]
 8011942:	f04f 30ff 	mov.w	r0, #4294967295
 8011946:	e7e9      	b.n	801191c <__ssputs_r+0x88>

08011948 <_svfiprintf_r>:
 8011948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801194c:	4698      	mov	r8, r3
 801194e:	898b      	ldrh	r3, [r1, #12]
 8011950:	061b      	lsls	r3, r3, #24
 8011952:	b09d      	sub	sp, #116	; 0x74
 8011954:	4607      	mov	r7, r0
 8011956:	460d      	mov	r5, r1
 8011958:	4614      	mov	r4, r2
 801195a:	d50e      	bpl.n	801197a <_svfiprintf_r+0x32>
 801195c:	690b      	ldr	r3, [r1, #16]
 801195e:	b963      	cbnz	r3, 801197a <_svfiprintf_r+0x32>
 8011960:	2140      	movs	r1, #64	; 0x40
 8011962:	f7ff ff0b 	bl	801177c <_malloc_r>
 8011966:	6028      	str	r0, [r5, #0]
 8011968:	6128      	str	r0, [r5, #16]
 801196a:	b920      	cbnz	r0, 8011976 <_svfiprintf_r+0x2e>
 801196c:	230c      	movs	r3, #12
 801196e:	603b      	str	r3, [r7, #0]
 8011970:	f04f 30ff 	mov.w	r0, #4294967295
 8011974:	e0d0      	b.n	8011b18 <_svfiprintf_r+0x1d0>
 8011976:	2340      	movs	r3, #64	; 0x40
 8011978:	616b      	str	r3, [r5, #20]
 801197a:	2300      	movs	r3, #0
 801197c:	9309      	str	r3, [sp, #36]	; 0x24
 801197e:	2320      	movs	r3, #32
 8011980:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011984:	f8cd 800c 	str.w	r8, [sp, #12]
 8011988:	2330      	movs	r3, #48	; 0x30
 801198a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011b30 <_svfiprintf_r+0x1e8>
 801198e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011992:	f04f 0901 	mov.w	r9, #1
 8011996:	4623      	mov	r3, r4
 8011998:	469a      	mov	sl, r3
 801199a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801199e:	b10a      	cbz	r2, 80119a4 <_svfiprintf_r+0x5c>
 80119a0:	2a25      	cmp	r2, #37	; 0x25
 80119a2:	d1f9      	bne.n	8011998 <_svfiprintf_r+0x50>
 80119a4:	ebba 0b04 	subs.w	fp, sl, r4
 80119a8:	d00b      	beq.n	80119c2 <_svfiprintf_r+0x7a>
 80119aa:	465b      	mov	r3, fp
 80119ac:	4622      	mov	r2, r4
 80119ae:	4629      	mov	r1, r5
 80119b0:	4638      	mov	r0, r7
 80119b2:	f7ff ff6f 	bl	8011894 <__ssputs_r>
 80119b6:	3001      	adds	r0, #1
 80119b8:	f000 80a9 	beq.w	8011b0e <_svfiprintf_r+0x1c6>
 80119bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80119be:	445a      	add	r2, fp
 80119c0:	9209      	str	r2, [sp, #36]	; 0x24
 80119c2:	f89a 3000 	ldrb.w	r3, [sl]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	f000 80a1 	beq.w	8011b0e <_svfiprintf_r+0x1c6>
 80119cc:	2300      	movs	r3, #0
 80119ce:	f04f 32ff 	mov.w	r2, #4294967295
 80119d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119d6:	f10a 0a01 	add.w	sl, sl, #1
 80119da:	9304      	str	r3, [sp, #16]
 80119dc:	9307      	str	r3, [sp, #28]
 80119de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80119e2:	931a      	str	r3, [sp, #104]	; 0x68
 80119e4:	4654      	mov	r4, sl
 80119e6:	2205      	movs	r2, #5
 80119e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119ec:	4850      	ldr	r0, [pc, #320]	; (8011b30 <_svfiprintf_r+0x1e8>)
 80119ee:	f7f2 fbef 	bl	80041d0 <memchr>
 80119f2:	9a04      	ldr	r2, [sp, #16]
 80119f4:	b9d8      	cbnz	r0, 8011a2e <_svfiprintf_r+0xe6>
 80119f6:	06d0      	lsls	r0, r2, #27
 80119f8:	bf44      	itt	mi
 80119fa:	2320      	movmi	r3, #32
 80119fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a00:	0711      	lsls	r1, r2, #28
 8011a02:	bf44      	itt	mi
 8011a04:	232b      	movmi	r3, #43	; 0x2b
 8011a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8011a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8011a10:	d015      	beq.n	8011a3e <_svfiprintf_r+0xf6>
 8011a12:	9a07      	ldr	r2, [sp, #28]
 8011a14:	4654      	mov	r4, sl
 8011a16:	2000      	movs	r0, #0
 8011a18:	f04f 0c0a 	mov.w	ip, #10
 8011a1c:	4621      	mov	r1, r4
 8011a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a22:	3b30      	subs	r3, #48	; 0x30
 8011a24:	2b09      	cmp	r3, #9
 8011a26:	d94d      	bls.n	8011ac4 <_svfiprintf_r+0x17c>
 8011a28:	b1b0      	cbz	r0, 8011a58 <_svfiprintf_r+0x110>
 8011a2a:	9207      	str	r2, [sp, #28]
 8011a2c:	e014      	b.n	8011a58 <_svfiprintf_r+0x110>
 8011a2e:	eba0 0308 	sub.w	r3, r0, r8
 8011a32:	fa09 f303 	lsl.w	r3, r9, r3
 8011a36:	4313      	orrs	r3, r2
 8011a38:	9304      	str	r3, [sp, #16]
 8011a3a:	46a2      	mov	sl, r4
 8011a3c:	e7d2      	b.n	80119e4 <_svfiprintf_r+0x9c>
 8011a3e:	9b03      	ldr	r3, [sp, #12]
 8011a40:	1d19      	adds	r1, r3, #4
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	9103      	str	r1, [sp, #12]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	bfbb      	ittet	lt
 8011a4a:	425b      	neglt	r3, r3
 8011a4c:	f042 0202 	orrlt.w	r2, r2, #2
 8011a50:	9307      	strge	r3, [sp, #28]
 8011a52:	9307      	strlt	r3, [sp, #28]
 8011a54:	bfb8      	it	lt
 8011a56:	9204      	strlt	r2, [sp, #16]
 8011a58:	7823      	ldrb	r3, [r4, #0]
 8011a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8011a5c:	d10c      	bne.n	8011a78 <_svfiprintf_r+0x130>
 8011a5e:	7863      	ldrb	r3, [r4, #1]
 8011a60:	2b2a      	cmp	r3, #42	; 0x2a
 8011a62:	d134      	bne.n	8011ace <_svfiprintf_r+0x186>
 8011a64:	9b03      	ldr	r3, [sp, #12]
 8011a66:	1d1a      	adds	r2, r3, #4
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	9203      	str	r2, [sp, #12]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	bfb8      	it	lt
 8011a70:	f04f 33ff 	movlt.w	r3, #4294967295
 8011a74:	3402      	adds	r4, #2
 8011a76:	9305      	str	r3, [sp, #20]
 8011a78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011b40 <_svfiprintf_r+0x1f8>
 8011a7c:	7821      	ldrb	r1, [r4, #0]
 8011a7e:	2203      	movs	r2, #3
 8011a80:	4650      	mov	r0, sl
 8011a82:	f7f2 fba5 	bl	80041d0 <memchr>
 8011a86:	b138      	cbz	r0, 8011a98 <_svfiprintf_r+0x150>
 8011a88:	9b04      	ldr	r3, [sp, #16]
 8011a8a:	eba0 000a 	sub.w	r0, r0, sl
 8011a8e:	2240      	movs	r2, #64	; 0x40
 8011a90:	4082      	lsls	r2, r0
 8011a92:	4313      	orrs	r3, r2
 8011a94:	3401      	adds	r4, #1
 8011a96:	9304      	str	r3, [sp, #16]
 8011a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a9c:	4825      	ldr	r0, [pc, #148]	; (8011b34 <_svfiprintf_r+0x1ec>)
 8011a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011aa2:	2206      	movs	r2, #6
 8011aa4:	f7f2 fb94 	bl	80041d0 <memchr>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	d038      	beq.n	8011b1e <_svfiprintf_r+0x1d6>
 8011aac:	4b22      	ldr	r3, [pc, #136]	; (8011b38 <_svfiprintf_r+0x1f0>)
 8011aae:	bb1b      	cbnz	r3, 8011af8 <_svfiprintf_r+0x1b0>
 8011ab0:	9b03      	ldr	r3, [sp, #12]
 8011ab2:	3307      	adds	r3, #7
 8011ab4:	f023 0307 	bic.w	r3, r3, #7
 8011ab8:	3308      	adds	r3, #8
 8011aba:	9303      	str	r3, [sp, #12]
 8011abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011abe:	4433      	add	r3, r6
 8011ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8011ac2:	e768      	b.n	8011996 <_svfiprintf_r+0x4e>
 8011ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ac8:	460c      	mov	r4, r1
 8011aca:	2001      	movs	r0, #1
 8011acc:	e7a6      	b.n	8011a1c <_svfiprintf_r+0xd4>
 8011ace:	2300      	movs	r3, #0
 8011ad0:	3401      	adds	r4, #1
 8011ad2:	9305      	str	r3, [sp, #20]
 8011ad4:	4619      	mov	r1, r3
 8011ad6:	f04f 0c0a 	mov.w	ip, #10
 8011ada:	4620      	mov	r0, r4
 8011adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ae0:	3a30      	subs	r2, #48	; 0x30
 8011ae2:	2a09      	cmp	r2, #9
 8011ae4:	d903      	bls.n	8011aee <_svfiprintf_r+0x1a6>
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d0c6      	beq.n	8011a78 <_svfiprintf_r+0x130>
 8011aea:	9105      	str	r1, [sp, #20]
 8011aec:	e7c4      	b.n	8011a78 <_svfiprintf_r+0x130>
 8011aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8011af2:	4604      	mov	r4, r0
 8011af4:	2301      	movs	r3, #1
 8011af6:	e7f0      	b.n	8011ada <_svfiprintf_r+0x192>
 8011af8:	ab03      	add	r3, sp, #12
 8011afa:	9300      	str	r3, [sp, #0]
 8011afc:	462a      	mov	r2, r5
 8011afe:	4b0f      	ldr	r3, [pc, #60]	; (8011b3c <_svfiprintf_r+0x1f4>)
 8011b00:	a904      	add	r1, sp, #16
 8011b02:	4638      	mov	r0, r7
 8011b04:	f3af 8000 	nop.w
 8011b08:	1c42      	adds	r2, r0, #1
 8011b0a:	4606      	mov	r6, r0
 8011b0c:	d1d6      	bne.n	8011abc <_svfiprintf_r+0x174>
 8011b0e:	89ab      	ldrh	r3, [r5, #12]
 8011b10:	065b      	lsls	r3, r3, #25
 8011b12:	f53f af2d 	bmi.w	8011970 <_svfiprintf_r+0x28>
 8011b16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b18:	b01d      	add	sp, #116	; 0x74
 8011b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b1e:	ab03      	add	r3, sp, #12
 8011b20:	9300      	str	r3, [sp, #0]
 8011b22:	462a      	mov	r2, r5
 8011b24:	4b05      	ldr	r3, [pc, #20]	; (8011b3c <_svfiprintf_r+0x1f4>)
 8011b26:	a904      	add	r1, sp, #16
 8011b28:	4638      	mov	r0, r7
 8011b2a:	f000 f9bd 	bl	8011ea8 <_printf_i>
 8011b2e:	e7eb      	b.n	8011b08 <_svfiprintf_r+0x1c0>
 8011b30:	08012cb0 	.word	0x08012cb0
 8011b34:	08012cba 	.word	0x08012cba
 8011b38:	00000000 	.word	0x00000000
 8011b3c:	08011895 	.word	0x08011895
 8011b40:	08012cb6 	.word	0x08012cb6

08011b44 <__sfputc_r>:
 8011b44:	6893      	ldr	r3, [r2, #8]
 8011b46:	3b01      	subs	r3, #1
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	b410      	push	{r4}
 8011b4c:	6093      	str	r3, [r2, #8]
 8011b4e:	da08      	bge.n	8011b62 <__sfputc_r+0x1e>
 8011b50:	6994      	ldr	r4, [r2, #24]
 8011b52:	42a3      	cmp	r3, r4
 8011b54:	db01      	blt.n	8011b5a <__sfputc_r+0x16>
 8011b56:	290a      	cmp	r1, #10
 8011b58:	d103      	bne.n	8011b62 <__sfputc_r+0x1e>
 8011b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b5e:	f7ff bc4c 	b.w	80113fa <__swbuf_r>
 8011b62:	6813      	ldr	r3, [r2, #0]
 8011b64:	1c58      	adds	r0, r3, #1
 8011b66:	6010      	str	r0, [r2, #0]
 8011b68:	7019      	strb	r1, [r3, #0]
 8011b6a:	4608      	mov	r0, r1
 8011b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b70:	4770      	bx	lr

08011b72 <__sfputs_r>:
 8011b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b74:	4606      	mov	r6, r0
 8011b76:	460f      	mov	r7, r1
 8011b78:	4614      	mov	r4, r2
 8011b7a:	18d5      	adds	r5, r2, r3
 8011b7c:	42ac      	cmp	r4, r5
 8011b7e:	d101      	bne.n	8011b84 <__sfputs_r+0x12>
 8011b80:	2000      	movs	r0, #0
 8011b82:	e007      	b.n	8011b94 <__sfputs_r+0x22>
 8011b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b88:	463a      	mov	r2, r7
 8011b8a:	4630      	mov	r0, r6
 8011b8c:	f7ff ffda 	bl	8011b44 <__sfputc_r>
 8011b90:	1c43      	adds	r3, r0, #1
 8011b92:	d1f3      	bne.n	8011b7c <__sfputs_r+0xa>
 8011b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011b98 <_vfiprintf_r>:
 8011b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b9c:	460d      	mov	r5, r1
 8011b9e:	b09d      	sub	sp, #116	; 0x74
 8011ba0:	4614      	mov	r4, r2
 8011ba2:	4698      	mov	r8, r3
 8011ba4:	4606      	mov	r6, r0
 8011ba6:	b118      	cbz	r0, 8011bb0 <_vfiprintf_r+0x18>
 8011ba8:	6a03      	ldr	r3, [r0, #32]
 8011baa:	b90b      	cbnz	r3, 8011bb0 <_vfiprintf_r+0x18>
 8011bac:	f7ff fb1e 	bl	80111ec <__sinit>
 8011bb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bb2:	07d9      	lsls	r1, r3, #31
 8011bb4:	d405      	bmi.n	8011bc2 <_vfiprintf_r+0x2a>
 8011bb6:	89ab      	ldrh	r3, [r5, #12]
 8011bb8:	059a      	lsls	r2, r3, #22
 8011bba:	d402      	bmi.n	8011bc2 <_vfiprintf_r+0x2a>
 8011bbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bbe:	f7ff fd3b 	bl	8011638 <__retarget_lock_acquire_recursive>
 8011bc2:	89ab      	ldrh	r3, [r5, #12]
 8011bc4:	071b      	lsls	r3, r3, #28
 8011bc6:	d501      	bpl.n	8011bcc <_vfiprintf_r+0x34>
 8011bc8:	692b      	ldr	r3, [r5, #16]
 8011bca:	b99b      	cbnz	r3, 8011bf4 <_vfiprintf_r+0x5c>
 8011bcc:	4629      	mov	r1, r5
 8011bce:	4630      	mov	r0, r6
 8011bd0:	f7ff fc50 	bl	8011474 <__swsetup_r>
 8011bd4:	b170      	cbz	r0, 8011bf4 <_vfiprintf_r+0x5c>
 8011bd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bd8:	07dc      	lsls	r4, r3, #31
 8011bda:	d504      	bpl.n	8011be6 <_vfiprintf_r+0x4e>
 8011bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8011be0:	b01d      	add	sp, #116	; 0x74
 8011be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be6:	89ab      	ldrh	r3, [r5, #12]
 8011be8:	0598      	lsls	r0, r3, #22
 8011bea:	d4f7      	bmi.n	8011bdc <_vfiprintf_r+0x44>
 8011bec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bee:	f7ff fd24 	bl	801163a <__retarget_lock_release_recursive>
 8011bf2:	e7f3      	b.n	8011bdc <_vfiprintf_r+0x44>
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	9309      	str	r3, [sp, #36]	; 0x24
 8011bf8:	2320      	movs	r3, #32
 8011bfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011bfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c02:	2330      	movs	r3, #48	; 0x30
 8011c04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8011db8 <_vfiprintf_r+0x220>
 8011c08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c0c:	f04f 0901 	mov.w	r9, #1
 8011c10:	4623      	mov	r3, r4
 8011c12:	469a      	mov	sl, r3
 8011c14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c18:	b10a      	cbz	r2, 8011c1e <_vfiprintf_r+0x86>
 8011c1a:	2a25      	cmp	r2, #37	; 0x25
 8011c1c:	d1f9      	bne.n	8011c12 <_vfiprintf_r+0x7a>
 8011c1e:	ebba 0b04 	subs.w	fp, sl, r4
 8011c22:	d00b      	beq.n	8011c3c <_vfiprintf_r+0xa4>
 8011c24:	465b      	mov	r3, fp
 8011c26:	4622      	mov	r2, r4
 8011c28:	4629      	mov	r1, r5
 8011c2a:	4630      	mov	r0, r6
 8011c2c:	f7ff ffa1 	bl	8011b72 <__sfputs_r>
 8011c30:	3001      	adds	r0, #1
 8011c32:	f000 80a9 	beq.w	8011d88 <_vfiprintf_r+0x1f0>
 8011c36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c38:	445a      	add	r2, fp
 8011c3a:	9209      	str	r2, [sp, #36]	; 0x24
 8011c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	f000 80a1 	beq.w	8011d88 <_vfiprintf_r+0x1f0>
 8011c46:	2300      	movs	r3, #0
 8011c48:	f04f 32ff 	mov.w	r2, #4294967295
 8011c4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c50:	f10a 0a01 	add.w	sl, sl, #1
 8011c54:	9304      	str	r3, [sp, #16]
 8011c56:	9307      	str	r3, [sp, #28]
 8011c58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c5c:	931a      	str	r3, [sp, #104]	; 0x68
 8011c5e:	4654      	mov	r4, sl
 8011c60:	2205      	movs	r2, #5
 8011c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c66:	4854      	ldr	r0, [pc, #336]	; (8011db8 <_vfiprintf_r+0x220>)
 8011c68:	f7f2 fab2 	bl	80041d0 <memchr>
 8011c6c:	9a04      	ldr	r2, [sp, #16]
 8011c6e:	b9d8      	cbnz	r0, 8011ca8 <_vfiprintf_r+0x110>
 8011c70:	06d1      	lsls	r1, r2, #27
 8011c72:	bf44      	itt	mi
 8011c74:	2320      	movmi	r3, #32
 8011c76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c7a:	0713      	lsls	r3, r2, #28
 8011c7c:	bf44      	itt	mi
 8011c7e:	232b      	movmi	r3, #43	; 0x2b
 8011c80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c84:	f89a 3000 	ldrb.w	r3, [sl]
 8011c88:	2b2a      	cmp	r3, #42	; 0x2a
 8011c8a:	d015      	beq.n	8011cb8 <_vfiprintf_r+0x120>
 8011c8c:	9a07      	ldr	r2, [sp, #28]
 8011c8e:	4654      	mov	r4, sl
 8011c90:	2000      	movs	r0, #0
 8011c92:	f04f 0c0a 	mov.w	ip, #10
 8011c96:	4621      	mov	r1, r4
 8011c98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c9c:	3b30      	subs	r3, #48	; 0x30
 8011c9e:	2b09      	cmp	r3, #9
 8011ca0:	d94d      	bls.n	8011d3e <_vfiprintf_r+0x1a6>
 8011ca2:	b1b0      	cbz	r0, 8011cd2 <_vfiprintf_r+0x13a>
 8011ca4:	9207      	str	r2, [sp, #28]
 8011ca6:	e014      	b.n	8011cd2 <_vfiprintf_r+0x13a>
 8011ca8:	eba0 0308 	sub.w	r3, r0, r8
 8011cac:	fa09 f303 	lsl.w	r3, r9, r3
 8011cb0:	4313      	orrs	r3, r2
 8011cb2:	9304      	str	r3, [sp, #16]
 8011cb4:	46a2      	mov	sl, r4
 8011cb6:	e7d2      	b.n	8011c5e <_vfiprintf_r+0xc6>
 8011cb8:	9b03      	ldr	r3, [sp, #12]
 8011cba:	1d19      	adds	r1, r3, #4
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	9103      	str	r1, [sp, #12]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	bfbb      	ittet	lt
 8011cc4:	425b      	neglt	r3, r3
 8011cc6:	f042 0202 	orrlt.w	r2, r2, #2
 8011cca:	9307      	strge	r3, [sp, #28]
 8011ccc:	9307      	strlt	r3, [sp, #28]
 8011cce:	bfb8      	it	lt
 8011cd0:	9204      	strlt	r2, [sp, #16]
 8011cd2:	7823      	ldrb	r3, [r4, #0]
 8011cd4:	2b2e      	cmp	r3, #46	; 0x2e
 8011cd6:	d10c      	bne.n	8011cf2 <_vfiprintf_r+0x15a>
 8011cd8:	7863      	ldrb	r3, [r4, #1]
 8011cda:	2b2a      	cmp	r3, #42	; 0x2a
 8011cdc:	d134      	bne.n	8011d48 <_vfiprintf_r+0x1b0>
 8011cde:	9b03      	ldr	r3, [sp, #12]
 8011ce0:	1d1a      	adds	r2, r3, #4
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	9203      	str	r2, [sp, #12]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	bfb8      	it	lt
 8011cea:	f04f 33ff 	movlt.w	r3, #4294967295
 8011cee:	3402      	adds	r4, #2
 8011cf0:	9305      	str	r3, [sp, #20]
 8011cf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8011dc8 <_vfiprintf_r+0x230>
 8011cf6:	7821      	ldrb	r1, [r4, #0]
 8011cf8:	2203      	movs	r2, #3
 8011cfa:	4650      	mov	r0, sl
 8011cfc:	f7f2 fa68 	bl	80041d0 <memchr>
 8011d00:	b138      	cbz	r0, 8011d12 <_vfiprintf_r+0x17a>
 8011d02:	9b04      	ldr	r3, [sp, #16]
 8011d04:	eba0 000a 	sub.w	r0, r0, sl
 8011d08:	2240      	movs	r2, #64	; 0x40
 8011d0a:	4082      	lsls	r2, r0
 8011d0c:	4313      	orrs	r3, r2
 8011d0e:	3401      	adds	r4, #1
 8011d10:	9304      	str	r3, [sp, #16]
 8011d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d16:	4829      	ldr	r0, [pc, #164]	; (8011dbc <_vfiprintf_r+0x224>)
 8011d18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d1c:	2206      	movs	r2, #6
 8011d1e:	f7f2 fa57 	bl	80041d0 <memchr>
 8011d22:	2800      	cmp	r0, #0
 8011d24:	d03f      	beq.n	8011da6 <_vfiprintf_r+0x20e>
 8011d26:	4b26      	ldr	r3, [pc, #152]	; (8011dc0 <_vfiprintf_r+0x228>)
 8011d28:	bb1b      	cbnz	r3, 8011d72 <_vfiprintf_r+0x1da>
 8011d2a:	9b03      	ldr	r3, [sp, #12]
 8011d2c:	3307      	adds	r3, #7
 8011d2e:	f023 0307 	bic.w	r3, r3, #7
 8011d32:	3308      	adds	r3, #8
 8011d34:	9303      	str	r3, [sp, #12]
 8011d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d38:	443b      	add	r3, r7
 8011d3a:	9309      	str	r3, [sp, #36]	; 0x24
 8011d3c:	e768      	b.n	8011c10 <_vfiprintf_r+0x78>
 8011d3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d42:	460c      	mov	r4, r1
 8011d44:	2001      	movs	r0, #1
 8011d46:	e7a6      	b.n	8011c96 <_vfiprintf_r+0xfe>
 8011d48:	2300      	movs	r3, #0
 8011d4a:	3401      	adds	r4, #1
 8011d4c:	9305      	str	r3, [sp, #20]
 8011d4e:	4619      	mov	r1, r3
 8011d50:	f04f 0c0a 	mov.w	ip, #10
 8011d54:	4620      	mov	r0, r4
 8011d56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d5a:	3a30      	subs	r2, #48	; 0x30
 8011d5c:	2a09      	cmp	r2, #9
 8011d5e:	d903      	bls.n	8011d68 <_vfiprintf_r+0x1d0>
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d0c6      	beq.n	8011cf2 <_vfiprintf_r+0x15a>
 8011d64:	9105      	str	r1, [sp, #20]
 8011d66:	e7c4      	b.n	8011cf2 <_vfiprintf_r+0x15a>
 8011d68:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d6c:	4604      	mov	r4, r0
 8011d6e:	2301      	movs	r3, #1
 8011d70:	e7f0      	b.n	8011d54 <_vfiprintf_r+0x1bc>
 8011d72:	ab03      	add	r3, sp, #12
 8011d74:	9300      	str	r3, [sp, #0]
 8011d76:	462a      	mov	r2, r5
 8011d78:	4b12      	ldr	r3, [pc, #72]	; (8011dc4 <_vfiprintf_r+0x22c>)
 8011d7a:	a904      	add	r1, sp, #16
 8011d7c:	4630      	mov	r0, r6
 8011d7e:	f3af 8000 	nop.w
 8011d82:	4607      	mov	r7, r0
 8011d84:	1c78      	adds	r0, r7, #1
 8011d86:	d1d6      	bne.n	8011d36 <_vfiprintf_r+0x19e>
 8011d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011d8a:	07d9      	lsls	r1, r3, #31
 8011d8c:	d405      	bmi.n	8011d9a <_vfiprintf_r+0x202>
 8011d8e:	89ab      	ldrh	r3, [r5, #12]
 8011d90:	059a      	lsls	r2, r3, #22
 8011d92:	d402      	bmi.n	8011d9a <_vfiprintf_r+0x202>
 8011d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011d96:	f7ff fc50 	bl	801163a <__retarget_lock_release_recursive>
 8011d9a:	89ab      	ldrh	r3, [r5, #12]
 8011d9c:	065b      	lsls	r3, r3, #25
 8011d9e:	f53f af1d 	bmi.w	8011bdc <_vfiprintf_r+0x44>
 8011da2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011da4:	e71c      	b.n	8011be0 <_vfiprintf_r+0x48>
 8011da6:	ab03      	add	r3, sp, #12
 8011da8:	9300      	str	r3, [sp, #0]
 8011daa:	462a      	mov	r2, r5
 8011dac:	4b05      	ldr	r3, [pc, #20]	; (8011dc4 <_vfiprintf_r+0x22c>)
 8011dae:	a904      	add	r1, sp, #16
 8011db0:	4630      	mov	r0, r6
 8011db2:	f000 f879 	bl	8011ea8 <_printf_i>
 8011db6:	e7e4      	b.n	8011d82 <_vfiprintf_r+0x1ea>
 8011db8:	08012cb0 	.word	0x08012cb0
 8011dbc:	08012cba 	.word	0x08012cba
 8011dc0:	00000000 	.word	0x00000000
 8011dc4:	08011b73 	.word	0x08011b73
 8011dc8:	08012cb6 	.word	0x08012cb6

08011dcc <_printf_common>:
 8011dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011dd0:	4616      	mov	r6, r2
 8011dd2:	4699      	mov	r9, r3
 8011dd4:	688a      	ldr	r2, [r1, #8]
 8011dd6:	690b      	ldr	r3, [r1, #16]
 8011dd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	bfb8      	it	lt
 8011de0:	4613      	movlt	r3, r2
 8011de2:	6033      	str	r3, [r6, #0]
 8011de4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011de8:	4607      	mov	r7, r0
 8011dea:	460c      	mov	r4, r1
 8011dec:	b10a      	cbz	r2, 8011df2 <_printf_common+0x26>
 8011dee:	3301      	adds	r3, #1
 8011df0:	6033      	str	r3, [r6, #0]
 8011df2:	6823      	ldr	r3, [r4, #0]
 8011df4:	0699      	lsls	r1, r3, #26
 8011df6:	bf42      	ittt	mi
 8011df8:	6833      	ldrmi	r3, [r6, #0]
 8011dfa:	3302      	addmi	r3, #2
 8011dfc:	6033      	strmi	r3, [r6, #0]
 8011dfe:	6825      	ldr	r5, [r4, #0]
 8011e00:	f015 0506 	ands.w	r5, r5, #6
 8011e04:	d106      	bne.n	8011e14 <_printf_common+0x48>
 8011e06:	f104 0a19 	add.w	sl, r4, #25
 8011e0a:	68e3      	ldr	r3, [r4, #12]
 8011e0c:	6832      	ldr	r2, [r6, #0]
 8011e0e:	1a9b      	subs	r3, r3, r2
 8011e10:	42ab      	cmp	r3, r5
 8011e12:	dc26      	bgt.n	8011e62 <_printf_common+0x96>
 8011e14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e18:	1e13      	subs	r3, r2, #0
 8011e1a:	6822      	ldr	r2, [r4, #0]
 8011e1c:	bf18      	it	ne
 8011e1e:	2301      	movne	r3, #1
 8011e20:	0692      	lsls	r2, r2, #26
 8011e22:	d42b      	bmi.n	8011e7c <_printf_common+0xb0>
 8011e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e28:	4649      	mov	r1, r9
 8011e2a:	4638      	mov	r0, r7
 8011e2c:	47c0      	blx	r8
 8011e2e:	3001      	adds	r0, #1
 8011e30:	d01e      	beq.n	8011e70 <_printf_common+0xa4>
 8011e32:	6823      	ldr	r3, [r4, #0]
 8011e34:	6922      	ldr	r2, [r4, #16]
 8011e36:	f003 0306 	and.w	r3, r3, #6
 8011e3a:	2b04      	cmp	r3, #4
 8011e3c:	bf02      	ittt	eq
 8011e3e:	68e5      	ldreq	r5, [r4, #12]
 8011e40:	6833      	ldreq	r3, [r6, #0]
 8011e42:	1aed      	subeq	r5, r5, r3
 8011e44:	68a3      	ldr	r3, [r4, #8]
 8011e46:	bf0c      	ite	eq
 8011e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e4c:	2500      	movne	r5, #0
 8011e4e:	4293      	cmp	r3, r2
 8011e50:	bfc4      	itt	gt
 8011e52:	1a9b      	subgt	r3, r3, r2
 8011e54:	18ed      	addgt	r5, r5, r3
 8011e56:	2600      	movs	r6, #0
 8011e58:	341a      	adds	r4, #26
 8011e5a:	42b5      	cmp	r5, r6
 8011e5c:	d11a      	bne.n	8011e94 <_printf_common+0xc8>
 8011e5e:	2000      	movs	r0, #0
 8011e60:	e008      	b.n	8011e74 <_printf_common+0xa8>
 8011e62:	2301      	movs	r3, #1
 8011e64:	4652      	mov	r2, sl
 8011e66:	4649      	mov	r1, r9
 8011e68:	4638      	mov	r0, r7
 8011e6a:	47c0      	blx	r8
 8011e6c:	3001      	adds	r0, #1
 8011e6e:	d103      	bne.n	8011e78 <_printf_common+0xac>
 8011e70:	f04f 30ff 	mov.w	r0, #4294967295
 8011e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e78:	3501      	adds	r5, #1
 8011e7a:	e7c6      	b.n	8011e0a <_printf_common+0x3e>
 8011e7c:	18e1      	adds	r1, r4, r3
 8011e7e:	1c5a      	adds	r2, r3, #1
 8011e80:	2030      	movs	r0, #48	; 0x30
 8011e82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e86:	4422      	add	r2, r4
 8011e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e90:	3302      	adds	r3, #2
 8011e92:	e7c7      	b.n	8011e24 <_printf_common+0x58>
 8011e94:	2301      	movs	r3, #1
 8011e96:	4622      	mov	r2, r4
 8011e98:	4649      	mov	r1, r9
 8011e9a:	4638      	mov	r0, r7
 8011e9c:	47c0      	blx	r8
 8011e9e:	3001      	adds	r0, #1
 8011ea0:	d0e6      	beq.n	8011e70 <_printf_common+0xa4>
 8011ea2:	3601      	adds	r6, #1
 8011ea4:	e7d9      	b.n	8011e5a <_printf_common+0x8e>
	...

08011ea8 <_printf_i>:
 8011ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011eac:	7e0f      	ldrb	r7, [r1, #24]
 8011eae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011eb0:	2f78      	cmp	r7, #120	; 0x78
 8011eb2:	4691      	mov	r9, r2
 8011eb4:	4680      	mov	r8, r0
 8011eb6:	460c      	mov	r4, r1
 8011eb8:	469a      	mov	sl, r3
 8011eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011ebe:	d807      	bhi.n	8011ed0 <_printf_i+0x28>
 8011ec0:	2f62      	cmp	r7, #98	; 0x62
 8011ec2:	d80a      	bhi.n	8011eda <_printf_i+0x32>
 8011ec4:	2f00      	cmp	r7, #0
 8011ec6:	f000 80d4 	beq.w	8012072 <_printf_i+0x1ca>
 8011eca:	2f58      	cmp	r7, #88	; 0x58
 8011ecc:	f000 80c0 	beq.w	8012050 <_printf_i+0x1a8>
 8011ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ed8:	e03a      	b.n	8011f50 <_printf_i+0xa8>
 8011eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011ede:	2b15      	cmp	r3, #21
 8011ee0:	d8f6      	bhi.n	8011ed0 <_printf_i+0x28>
 8011ee2:	a101      	add	r1, pc, #4	; (adr r1, 8011ee8 <_printf_i+0x40>)
 8011ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ee8:	08011f41 	.word	0x08011f41
 8011eec:	08011f55 	.word	0x08011f55
 8011ef0:	08011ed1 	.word	0x08011ed1
 8011ef4:	08011ed1 	.word	0x08011ed1
 8011ef8:	08011ed1 	.word	0x08011ed1
 8011efc:	08011ed1 	.word	0x08011ed1
 8011f00:	08011f55 	.word	0x08011f55
 8011f04:	08011ed1 	.word	0x08011ed1
 8011f08:	08011ed1 	.word	0x08011ed1
 8011f0c:	08011ed1 	.word	0x08011ed1
 8011f10:	08011ed1 	.word	0x08011ed1
 8011f14:	08012059 	.word	0x08012059
 8011f18:	08011f81 	.word	0x08011f81
 8011f1c:	08012013 	.word	0x08012013
 8011f20:	08011ed1 	.word	0x08011ed1
 8011f24:	08011ed1 	.word	0x08011ed1
 8011f28:	0801207b 	.word	0x0801207b
 8011f2c:	08011ed1 	.word	0x08011ed1
 8011f30:	08011f81 	.word	0x08011f81
 8011f34:	08011ed1 	.word	0x08011ed1
 8011f38:	08011ed1 	.word	0x08011ed1
 8011f3c:	0801201b 	.word	0x0801201b
 8011f40:	682b      	ldr	r3, [r5, #0]
 8011f42:	1d1a      	adds	r2, r3, #4
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	602a      	str	r2, [r5, #0]
 8011f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f50:	2301      	movs	r3, #1
 8011f52:	e09f      	b.n	8012094 <_printf_i+0x1ec>
 8011f54:	6820      	ldr	r0, [r4, #0]
 8011f56:	682b      	ldr	r3, [r5, #0]
 8011f58:	0607      	lsls	r7, r0, #24
 8011f5a:	f103 0104 	add.w	r1, r3, #4
 8011f5e:	6029      	str	r1, [r5, #0]
 8011f60:	d501      	bpl.n	8011f66 <_printf_i+0xbe>
 8011f62:	681e      	ldr	r6, [r3, #0]
 8011f64:	e003      	b.n	8011f6e <_printf_i+0xc6>
 8011f66:	0646      	lsls	r6, r0, #25
 8011f68:	d5fb      	bpl.n	8011f62 <_printf_i+0xba>
 8011f6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011f6e:	2e00      	cmp	r6, #0
 8011f70:	da03      	bge.n	8011f7a <_printf_i+0xd2>
 8011f72:	232d      	movs	r3, #45	; 0x2d
 8011f74:	4276      	negs	r6, r6
 8011f76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f7a:	485a      	ldr	r0, [pc, #360]	; (80120e4 <_printf_i+0x23c>)
 8011f7c:	230a      	movs	r3, #10
 8011f7e:	e012      	b.n	8011fa6 <_printf_i+0xfe>
 8011f80:	682b      	ldr	r3, [r5, #0]
 8011f82:	6820      	ldr	r0, [r4, #0]
 8011f84:	1d19      	adds	r1, r3, #4
 8011f86:	6029      	str	r1, [r5, #0]
 8011f88:	0605      	lsls	r5, r0, #24
 8011f8a:	d501      	bpl.n	8011f90 <_printf_i+0xe8>
 8011f8c:	681e      	ldr	r6, [r3, #0]
 8011f8e:	e002      	b.n	8011f96 <_printf_i+0xee>
 8011f90:	0641      	lsls	r1, r0, #25
 8011f92:	d5fb      	bpl.n	8011f8c <_printf_i+0xe4>
 8011f94:	881e      	ldrh	r6, [r3, #0]
 8011f96:	4853      	ldr	r0, [pc, #332]	; (80120e4 <_printf_i+0x23c>)
 8011f98:	2f6f      	cmp	r7, #111	; 0x6f
 8011f9a:	bf0c      	ite	eq
 8011f9c:	2308      	moveq	r3, #8
 8011f9e:	230a      	movne	r3, #10
 8011fa0:	2100      	movs	r1, #0
 8011fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011fa6:	6865      	ldr	r5, [r4, #4]
 8011fa8:	60a5      	str	r5, [r4, #8]
 8011faa:	2d00      	cmp	r5, #0
 8011fac:	bfa2      	ittt	ge
 8011fae:	6821      	ldrge	r1, [r4, #0]
 8011fb0:	f021 0104 	bicge.w	r1, r1, #4
 8011fb4:	6021      	strge	r1, [r4, #0]
 8011fb6:	b90e      	cbnz	r6, 8011fbc <_printf_i+0x114>
 8011fb8:	2d00      	cmp	r5, #0
 8011fba:	d04b      	beq.n	8012054 <_printf_i+0x1ac>
 8011fbc:	4615      	mov	r5, r2
 8011fbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8011fc2:	fb03 6711 	mls	r7, r3, r1, r6
 8011fc6:	5dc7      	ldrb	r7, [r0, r7]
 8011fc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011fcc:	4637      	mov	r7, r6
 8011fce:	42bb      	cmp	r3, r7
 8011fd0:	460e      	mov	r6, r1
 8011fd2:	d9f4      	bls.n	8011fbe <_printf_i+0x116>
 8011fd4:	2b08      	cmp	r3, #8
 8011fd6:	d10b      	bne.n	8011ff0 <_printf_i+0x148>
 8011fd8:	6823      	ldr	r3, [r4, #0]
 8011fda:	07de      	lsls	r6, r3, #31
 8011fdc:	d508      	bpl.n	8011ff0 <_printf_i+0x148>
 8011fde:	6923      	ldr	r3, [r4, #16]
 8011fe0:	6861      	ldr	r1, [r4, #4]
 8011fe2:	4299      	cmp	r1, r3
 8011fe4:	bfde      	ittt	le
 8011fe6:	2330      	movle	r3, #48	; 0x30
 8011fe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011fec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011ff0:	1b52      	subs	r2, r2, r5
 8011ff2:	6122      	str	r2, [r4, #16]
 8011ff4:	f8cd a000 	str.w	sl, [sp]
 8011ff8:	464b      	mov	r3, r9
 8011ffa:	aa03      	add	r2, sp, #12
 8011ffc:	4621      	mov	r1, r4
 8011ffe:	4640      	mov	r0, r8
 8012000:	f7ff fee4 	bl	8011dcc <_printf_common>
 8012004:	3001      	adds	r0, #1
 8012006:	d14a      	bne.n	801209e <_printf_i+0x1f6>
 8012008:	f04f 30ff 	mov.w	r0, #4294967295
 801200c:	b004      	add	sp, #16
 801200e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012012:	6823      	ldr	r3, [r4, #0]
 8012014:	f043 0320 	orr.w	r3, r3, #32
 8012018:	6023      	str	r3, [r4, #0]
 801201a:	4833      	ldr	r0, [pc, #204]	; (80120e8 <_printf_i+0x240>)
 801201c:	2778      	movs	r7, #120	; 0x78
 801201e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012022:	6823      	ldr	r3, [r4, #0]
 8012024:	6829      	ldr	r1, [r5, #0]
 8012026:	061f      	lsls	r7, r3, #24
 8012028:	f851 6b04 	ldr.w	r6, [r1], #4
 801202c:	d402      	bmi.n	8012034 <_printf_i+0x18c>
 801202e:	065f      	lsls	r7, r3, #25
 8012030:	bf48      	it	mi
 8012032:	b2b6      	uxthmi	r6, r6
 8012034:	07df      	lsls	r7, r3, #31
 8012036:	bf48      	it	mi
 8012038:	f043 0320 	orrmi.w	r3, r3, #32
 801203c:	6029      	str	r1, [r5, #0]
 801203e:	bf48      	it	mi
 8012040:	6023      	strmi	r3, [r4, #0]
 8012042:	b91e      	cbnz	r6, 801204c <_printf_i+0x1a4>
 8012044:	6823      	ldr	r3, [r4, #0]
 8012046:	f023 0320 	bic.w	r3, r3, #32
 801204a:	6023      	str	r3, [r4, #0]
 801204c:	2310      	movs	r3, #16
 801204e:	e7a7      	b.n	8011fa0 <_printf_i+0xf8>
 8012050:	4824      	ldr	r0, [pc, #144]	; (80120e4 <_printf_i+0x23c>)
 8012052:	e7e4      	b.n	801201e <_printf_i+0x176>
 8012054:	4615      	mov	r5, r2
 8012056:	e7bd      	b.n	8011fd4 <_printf_i+0x12c>
 8012058:	682b      	ldr	r3, [r5, #0]
 801205a:	6826      	ldr	r6, [r4, #0]
 801205c:	6961      	ldr	r1, [r4, #20]
 801205e:	1d18      	adds	r0, r3, #4
 8012060:	6028      	str	r0, [r5, #0]
 8012062:	0635      	lsls	r5, r6, #24
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	d501      	bpl.n	801206c <_printf_i+0x1c4>
 8012068:	6019      	str	r1, [r3, #0]
 801206a:	e002      	b.n	8012072 <_printf_i+0x1ca>
 801206c:	0670      	lsls	r0, r6, #25
 801206e:	d5fb      	bpl.n	8012068 <_printf_i+0x1c0>
 8012070:	8019      	strh	r1, [r3, #0]
 8012072:	2300      	movs	r3, #0
 8012074:	6123      	str	r3, [r4, #16]
 8012076:	4615      	mov	r5, r2
 8012078:	e7bc      	b.n	8011ff4 <_printf_i+0x14c>
 801207a:	682b      	ldr	r3, [r5, #0]
 801207c:	1d1a      	adds	r2, r3, #4
 801207e:	602a      	str	r2, [r5, #0]
 8012080:	681d      	ldr	r5, [r3, #0]
 8012082:	6862      	ldr	r2, [r4, #4]
 8012084:	2100      	movs	r1, #0
 8012086:	4628      	mov	r0, r5
 8012088:	f7f2 f8a2 	bl	80041d0 <memchr>
 801208c:	b108      	cbz	r0, 8012092 <_printf_i+0x1ea>
 801208e:	1b40      	subs	r0, r0, r5
 8012090:	6060      	str	r0, [r4, #4]
 8012092:	6863      	ldr	r3, [r4, #4]
 8012094:	6123      	str	r3, [r4, #16]
 8012096:	2300      	movs	r3, #0
 8012098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801209c:	e7aa      	b.n	8011ff4 <_printf_i+0x14c>
 801209e:	6923      	ldr	r3, [r4, #16]
 80120a0:	462a      	mov	r2, r5
 80120a2:	4649      	mov	r1, r9
 80120a4:	4640      	mov	r0, r8
 80120a6:	47d0      	blx	sl
 80120a8:	3001      	adds	r0, #1
 80120aa:	d0ad      	beq.n	8012008 <_printf_i+0x160>
 80120ac:	6823      	ldr	r3, [r4, #0]
 80120ae:	079b      	lsls	r3, r3, #30
 80120b0:	d413      	bmi.n	80120da <_printf_i+0x232>
 80120b2:	68e0      	ldr	r0, [r4, #12]
 80120b4:	9b03      	ldr	r3, [sp, #12]
 80120b6:	4298      	cmp	r0, r3
 80120b8:	bfb8      	it	lt
 80120ba:	4618      	movlt	r0, r3
 80120bc:	e7a6      	b.n	801200c <_printf_i+0x164>
 80120be:	2301      	movs	r3, #1
 80120c0:	4632      	mov	r2, r6
 80120c2:	4649      	mov	r1, r9
 80120c4:	4640      	mov	r0, r8
 80120c6:	47d0      	blx	sl
 80120c8:	3001      	adds	r0, #1
 80120ca:	d09d      	beq.n	8012008 <_printf_i+0x160>
 80120cc:	3501      	adds	r5, #1
 80120ce:	68e3      	ldr	r3, [r4, #12]
 80120d0:	9903      	ldr	r1, [sp, #12]
 80120d2:	1a5b      	subs	r3, r3, r1
 80120d4:	42ab      	cmp	r3, r5
 80120d6:	dcf2      	bgt.n	80120be <_printf_i+0x216>
 80120d8:	e7eb      	b.n	80120b2 <_printf_i+0x20a>
 80120da:	2500      	movs	r5, #0
 80120dc:	f104 0619 	add.w	r6, r4, #25
 80120e0:	e7f5      	b.n	80120ce <_printf_i+0x226>
 80120e2:	bf00      	nop
 80120e4:	08012cc1 	.word	0x08012cc1
 80120e8:	08012cd2 	.word	0x08012cd2

080120ec <__sflush_r>:
 80120ec:	898a      	ldrh	r2, [r1, #12]
 80120ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120f2:	4605      	mov	r5, r0
 80120f4:	0710      	lsls	r0, r2, #28
 80120f6:	460c      	mov	r4, r1
 80120f8:	d458      	bmi.n	80121ac <__sflush_r+0xc0>
 80120fa:	684b      	ldr	r3, [r1, #4]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	dc05      	bgt.n	801210c <__sflush_r+0x20>
 8012100:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012102:	2b00      	cmp	r3, #0
 8012104:	dc02      	bgt.n	801210c <__sflush_r+0x20>
 8012106:	2000      	movs	r0, #0
 8012108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801210c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801210e:	2e00      	cmp	r6, #0
 8012110:	d0f9      	beq.n	8012106 <__sflush_r+0x1a>
 8012112:	2300      	movs	r3, #0
 8012114:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012118:	682f      	ldr	r7, [r5, #0]
 801211a:	6a21      	ldr	r1, [r4, #32]
 801211c:	602b      	str	r3, [r5, #0]
 801211e:	d032      	beq.n	8012186 <__sflush_r+0x9a>
 8012120:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012122:	89a3      	ldrh	r3, [r4, #12]
 8012124:	075a      	lsls	r2, r3, #29
 8012126:	d505      	bpl.n	8012134 <__sflush_r+0x48>
 8012128:	6863      	ldr	r3, [r4, #4]
 801212a:	1ac0      	subs	r0, r0, r3
 801212c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801212e:	b10b      	cbz	r3, 8012134 <__sflush_r+0x48>
 8012130:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012132:	1ac0      	subs	r0, r0, r3
 8012134:	2300      	movs	r3, #0
 8012136:	4602      	mov	r2, r0
 8012138:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801213a:	6a21      	ldr	r1, [r4, #32]
 801213c:	4628      	mov	r0, r5
 801213e:	47b0      	blx	r6
 8012140:	1c43      	adds	r3, r0, #1
 8012142:	89a3      	ldrh	r3, [r4, #12]
 8012144:	d106      	bne.n	8012154 <__sflush_r+0x68>
 8012146:	6829      	ldr	r1, [r5, #0]
 8012148:	291d      	cmp	r1, #29
 801214a:	d82b      	bhi.n	80121a4 <__sflush_r+0xb8>
 801214c:	4a29      	ldr	r2, [pc, #164]	; (80121f4 <__sflush_r+0x108>)
 801214e:	410a      	asrs	r2, r1
 8012150:	07d6      	lsls	r6, r2, #31
 8012152:	d427      	bmi.n	80121a4 <__sflush_r+0xb8>
 8012154:	2200      	movs	r2, #0
 8012156:	6062      	str	r2, [r4, #4]
 8012158:	04d9      	lsls	r1, r3, #19
 801215a:	6922      	ldr	r2, [r4, #16]
 801215c:	6022      	str	r2, [r4, #0]
 801215e:	d504      	bpl.n	801216a <__sflush_r+0x7e>
 8012160:	1c42      	adds	r2, r0, #1
 8012162:	d101      	bne.n	8012168 <__sflush_r+0x7c>
 8012164:	682b      	ldr	r3, [r5, #0]
 8012166:	b903      	cbnz	r3, 801216a <__sflush_r+0x7e>
 8012168:	6560      	str	r0, [r4, #84]	; 0x54
 801216a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801216c:	602f      	str	r7, [r5, #0]
 801216e:	2900      	cmp	r1, #0
 8012170:	d0c9      	beq.n	8012106 <__sflush_r+0x1a>
 8012172:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012176:	4299      	cmp	r1, r3
 8012178:	d002      	beq.n	8012180 <__sflush_r+0x94>
 801217a:	4628      	mov	r0, r5
 801217c:	f7ff fa8a 	bl	8011694 <_free_r>
 8012180:	2000      	movs	r0, #0
 8012182:	6360      	str	r0, [r4, #52]	; 0x34
 8012184:	e7c0      	b.n	8012108 <__sflush_r+0x1c>
 8012186:	2301      	movs	r3, #1
 8012188:	4628      	mov	r0, r5
 801218a:	47b0      	blx	r6
 801218c:	1c41      	adds	r1, r0, #1
 801218e:	d1c8      	bne.n	8012122 <__sflush_r+0x36>
 8012190:	682b      	ldr	r3, [r5, #0]
 8012192:	2b00      	cmp	r3, #0
 8012194:	d0c5      	beq.n	8012122 <__sflush_r+0x36>
 8012196:	2b1d      	cmp	r3, #29
 8012198:	d001      	beq.n	801219e <__sflush_r+0xb2>
 801219a:	2b16      	cmp	r3, #22
 801219c:	d101      	bne.n	80121a2 <__sflush_r+0xb6>
 801219e:	602f      	str	r7, [r5, #0]
 80121a0:	e7b1      	b.n	8012106 <__sflush_r+0x1a>
 80121a2:	89a3      	ldrh	r3, [r4, #12]
 80121a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121a8:	81a3      	strh	r3, [r4, #12]
 80121aa:	e7ad      	b.n	8012108 <__sflush_r+0x1c>
 80121ac:	690f      	ldr	r7, [r1, #16]
 80121ae:	2f00      	cmp	r7, #0
 80121b0:	d0a9      	beq.n	8012106 <__sflush_r+0x1a>
 80121b2:	0793      	lsls	r3, r2, #30
 80121b4:	680e      	ldr	r6, [r1, #0]
 80121b6:	bf08      	it	eq
 80121b8:	694b      	ldreq	r3, [r1, #20]
 80121ba:	600f      	str	r7, [r1, #0]
 80121bc:	bf18      	it	ne
 80121be:	2300      	movne	r3, #0
 80121c0:	eba6 0807 	sub.w	r8, r6, r7
 80121c4:	608b      	str	r3, [r1, #8]
 80121c6:	f1b8 0f00 	cmp.w	r8, #0
 80121ca:	dd9c      	ble.n	8012106 <__sflush_r+0x1a>
 80121cc:	6a21      	ldr	r1, [r4, #32]
 80121ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80121d0:	4643      	mov	r3, r8
 80121d2:	463a      	mov	r2, r7
 80121d4:	4628      	mov	r0, r5
 80121d6:	47b0      	blx	r6
 80121d8:	2800      	cmp	r0, #0
 80121da:	dc06      	bgt.n	80121ea <__sflush_r+0xfe>
 80121dc:	89a3      	ldrh	r3, [r4, #12]
 80121de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121e2:	81a3      	strh	r3, [r4, #12]
 80121e4:	f04f 30ff 	mov.w	r0, #4294967295
 80121e8:	e78e      	b.n	8012108 <__sflush_r+0x1c>
 80121ea:	4407      	add	r7, r0
 80121ec:	eba8 0800 	sub.w	r8, r8, r0
 80121f0:	e7e9      	b.n	80121c6 <__sflush_r+0xda>
 80121f2:	bf00      	nop
 80121f4:	dfbffffe 	.word	0xdfbffffe

080121f8 <_fflush_r>:
 80121f8:	b538      	push	{r3, r4, r5, lr}
 80121fa:	690b      	ldr	r3, [r1, #16]
 80121fc:	4605      	mov	r5, r0
 80121fe:	460c      	mov	r4, r1
 8012200:	b913      	cbnz	r3, 8012208 <_fflush_r+0x10>
 8012202:	2500      	movs	r5, #0
 8012204:	4628      	mov	r0, r5
 8012206:	bd38      	pop	{r3, r4, r5, pc}
 8012208:	b118      	cbz	r0, 8012212 <_fflush_r+0x1a>
 801220a:	6a03      	ldr	r3, [r0, #32]
 801220c:	b90b      	cbnz	r3, 8012212 <_fflush_r+0x1a>
 801220e:	f7fe ffed 	bl	80111ec <__sinit>
 8012212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d0f3      	beq.n	8012202 <_fflush_r+0xa>
 801221a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801221c:	07d0      	lsls	r0, r2, #31
 801221e:	d404      	bmi.n	801222a <_fflush_r+0x32>
 8012220:	0599      	lsls	r1, r3, #22
 8012222:	d402      	bmi.n	801222a <_fflush_r+0x32>
 8012224:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012226:	f7ff fa07 	bl	8011638 <__retarget_lock_acquire_recursive>
 801222a:	4628      	mov	r0, r5
 801222c:	4621      	mov	r1, r4
 801222e:	f7ff ff5d 	bl	80120ec <__sflush_r>
 8012232:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012234:	07da      	lsls	r2, r3, #31
 8012236:	4605      	mov	r5, r0
 8012238:	d4e4      	bmi.n	8012204 <_fflush_r+0xc>
 801223a:	89a3      	ldrh	r3, [r4, #12]
 801223c:	059b      	lsls	r3, r3, #22
 801223e:	d4e1      	bmi.n	8012204 <_fflush_r+0xc>
 8012240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012242:	f7ff f9fa 	bl	801163a <__retarget_lock_release_recursive>
 8012246:	e7dd      	b.n	8012204 <_fflush_r+0xc>

08012248 <fiprintf>:
 8012248:	b40e      	push	{r1, r2, r3}
 801224a:	b503      	push	{r0, r1, lr}
 801224c:	4601      	mov	r1, r0
 801224e:	ab03      	add	r3, sp, #12
 8012250:	4805      	ldr	r0, [pc, #20]	; (8012268 <fiprintf+0x20>)
 8012252:	f853 2b04 	ldr.w	r2, [r3], #4
 8012256:	6800      	ldr	r0, [r0, #0]
 8012258:	9301      	str	r3, [sp, #4]
 801225a:	f7ff fc9d 	bl	8011b98 <_vfiprintf_r>
 801225e:	b002      	add	sp, #8
 8012260:	f85d eb04 	ldr.w	lr, [sp], #4
 8012264:	b003      	add	sp, #12
 8012266:	4770      	bx	lr
 8012268:	200000a4 	.word	0x200000a4

0801226c <__swhatbuf_r>:
 801226c:	b570      	push	{r4, r5, r6, lr}
 801226e:	460c      	mov	r4, r1
 8012270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012274:	2900      	cmp	r1, #0
 8012276:	b096      	sub	sp, #88	; 0x58
 8012278:	4615      	mov	r5, r2
 801227a:	461e      	mov	r6, r3
 801227c:	da0d      	bge.n	801229a <__swhatbuf_r+0x2e>
 801227e:	89a3      	ldrh	r3, [r4, #12]
 8012280:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012284:	f04f 0100 	mov.w	r1, #0
 8012288:	bf0c      	ite	eq
 801228a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801228e:	2340      	movne	r3, #64	; 0x40
 8012290:	2000      	movs	r0, #0
 8012292:	6031      	str	r1, [r6, #0]
 8012294:	602b      	str	r3, [r5, #0]
 8012296:	b016      	add	sp, #88	; 0x58
 8012298:	bd70      	pop	{r4, r5, r6, pc}
 801229a:	466a      	mov	r2, sp
 801229c:	f000 f862 	bl	8012364 <_fstat_r>
 80122a0:	2800      	cmp	r0, #0
 80122a2:	dbec      	blt.n	801227e <__swhatbuf_r+0x12>
 80122a4:	9901      	ldr	r1, [sp, #4]
 80122a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80122aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80122ae:	4259      	negs	r1, r3
 80122b0:	4159      	adcs	r1, r3
 80122b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80122b6:	e7eb      	b.n	8012290 <__swhatbuf_r+0x24>

080122b8 <__smakebuf_r>:
 80122b8:	898b      	ldrh	r3, [r1, #12]
 80122ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80122bc:	079d      	lsls	r5, r3, #30
 80122be:	4606      	mov	r6, r0
 80122c0:	460c      	mov	r4, r1
 80122c2:	d507      	bpl.n	80122d4 <__smakebuf_r+0x1c>
 80122c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80122c8:	6023      	str	r3, [r4, #0]
 80122ca:	6123      	str	r3, [r4, #16]
 80122cc:	2301      	movs	r3, #1
 80122ce:	6163      	str	r3, [r4, #20]
 80122d0:	b002      	add	sp, #8
 80122d2:	bd70      	pop	{r4, r5, r6, pc}
 80122d4:	ab01      	add	r3, sp, #4
 80122d6:	466a      	mov	r2, sp
 80122d8:	f7ff ffc8 	bl	801226c <__swhatbuf_r>
 80122dc:	9900      	ldr	r1, [sp, #0]
 80122de:	4605      	mov	r5, r0
 80122e0:	4630      	mov	r0, r6
 80122e2:	f7ff fa4b 	bl	801177c <_malloc_r>
 80122e6:	b948      	cbnz	r0, 80122fc <__smakebuf_r+0x44>
 80122e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122ec:	059a      	lsls	r2, r3, #22
 80122ee:	d4ef      	bmi.n	80122d0 <__smakebuf_r+0x18>
 80122f0:	f023 0303 	bic.w	r3, r3, #3
 80122f4:	f043 0302 	orr.w	r3, r3, #2
 80122f8:	81a3      	strh	r3, [r4, #12]
 80122fa:	e7e3      	b.n	80122c4 <__smakebuf_r+0xc>
 80122fc:	89a3      	ldrh	r3, [r4, #12]
 80122fe:	6020      	str	r0, [r4, #0]
 8012300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012304:	81a3      	strh	r3, [r4, #12]
 8012306:	9b00      	ldr	r3, [sp, #0]
 8012308:	6163      	str	r3, [r4, #20]
 801230a:	9b01      	ldr	r3, [sp, #4]
 801230c:	6120      	str	r0, [r4, #16]
 801230e:	b15b      	cbz	r3, 8012328 <__smakebuf_r+0x70>
 8012310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012314:	4630      	mov	r0, r6
 8012316:	f000 f837 	bl	8012388 <_isatty_r>
 801231a:	b128      	cbz	r0, 8012328 <__smakebuf_r+0x70>
 801231c:	89a3      	ldrh	r3, [r4, #12]
 801231e:	f023 0303 	bic.w	r3, r3, #3
 8012322:	f043 0301 	orr.w	r3, r3, #1
 8012326:	81a3      	strh	r3, [r4, #12]
 8012328:	89a3      	ldrh	r3, [r4, #12]
 801232a:	431d      	orrs	r5, r3
 801232c:	81a5      	strh	r5, [r4, #12]
 801232e:	e7cf      	b.n	80122d0 <__smakebuf_r+0x18>

08012330 <memmove>:
 8012330:	4288      	cmp	r0, r1
 8012332:	b510      	push	{r4, lr}
 8012334:	eb01 0402 	add.w	r4, r1, r2
 8012338:	d902      	bls.n	8012340 <memmove+0x10>
 801233a:	4284      	cmp	r4, r0
 801233c:	4623      	mov	r3, r4
 801233e:	d807      	bhi.n	8012350 <memmove+0x20>
 8012340:	1e43      	subs	r3, r0, #1
 8012342:	42a1      	cmp	r1, r4
 8012344:	d008      	beq.n	8012358 <memmove+0x28>
 8012346:	f811 2b01 	ldrb.w	r2, [r1], #1
 801234a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801234e:	e7f8      	b.n	8012342 <memmove+0x12>
 8012350:	4402      	add	r2, r0
 8012352:	4601      	mov	r1, r0
 8012354:	428a      	cmp	r2, r1
 8012356:	d100      	bne.n	801235a <memmove+0x2a>
 8012358:	bd10      	pop	{r4, pc}
 801235a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801235e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012362:	e7f7      	b.n	8012354 <memmove+0x24>

08012364 <_fstat_r>:
 8012364:	b538      	push	{r3, r4, r5, lr}
 8012366:	4d07      	ldr	r5, [pc, #28]	; (8012384 <_fstat_r+0x20>)
 8012368:	2300      	movs	r3, #0
 801236a:	4604      	mov	r4, r0
 801236c:	4608      	mov	r0, r1
 801236e:	4611      	mov	r1, r2
 8012370:	602b      	str	r3, [r5, #0]
 8012372:	f7f6 f854 	bl	800841e <_fstat>
 8012376:	1c43      	adds	r3, r0, #1
 8012378:	d102      	bne.n	8012380 <_fstat_r+0x1c>
 801237a:	682b      	ldr	r3, [r5, #0]
 801237c:	b103      	cbz	r3, 8012380 <_fstat_r+0x1c>
 801237e:	6023      	str	r3, [r4, #0]
 8012380:	bd38      	pop	{r3, r4, r5, pc}
 8012382:	bf00      	nop
 8012384:	20000c40 	.word	0x20000c40

08012388 <_isatty_r>:
 8012388:	b538      	push	{r3, r4, r5, lr}
 801238a:	4d06      	ldr	r5, [pc, #24]	; (80123a4 <_isatty_r+0x1c>)
 801238c:	2300      	movs	r3, #0
 801238e:	4604      	mov	r4, r0
 8012390:	4608      	mov	r0, r1
 8012392:	602b      	str	r3, [r5, #0]
 8012394:	f7f6 f853 	bl	800843e <_isatty>
 8012398:	1c43      	adds	r3, r0, #1
 801239a:	d102      	bne.n	80123a2 <_isatty_r+0x1a>
 801239c:	682b      	ldr	r3, [r5, #0]
 801239e:	b103      	cbz	r3, 80123a2 <_isatty_r+0x1a>
 80123a0:	6023      	str	r3, [r4, #0]
 80123a2:	bd38      	pop	{r3, r4, r5, pc}
 80123a4:	20000c40 	.word	0x20000c40

080123a8 <_sbrk_r>:
 80123a8:	b538      	push	{r3, r4, r5, lr}
 80123aa:	4d06      	ldr	r5, [pc, #24]	; (80123c4 <_sbrk_r+0x1c>)
 80123ac:	2300      	movs	r3, #0
 80123ae:	4604      	mov	r4, r0
 80123b0:	4608      	mov	r0, r1
 80123b2:	602b      	str	r3, [r5, #0]
 80123b4:	f7f6 f85c 	bl	8008470 <_sbrk>
 80123b8:	1c43      	adds	r3, r0, #1
 80123ba:	d102      	bne.n	80123c2 <_sbrk_r+0x1a>
 80123bc:	682b      	ldr	r3, [r5, #0]
 80123be:	b103      	cbz	r3, 80123c2 <_sbrk_r+0x1a>
 80123c0:	6023      	str	r3, [r4, #0]
 80123c2:	bd38      	pop	{r3, r4, r5, pc}
 80123c4:	20000c40 	.word	0x20000c40

080123c8 <abort>:
 80123c8:	b508      	push	{r3, lr}
 80123ca:	2006      	movs	r0, #6
 80123cc:	f000 f85a 	bl	8012484 <raise>
 80123d0:	2001      	movs	r0, #1
 80123d2:	f7f5 ffd5 	bl	8008380 <_exit>

080123d6 <_realloc_r>:
 80123d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123da:	4680      	mov	r8, r0
 80123dc:	4614      	mov	r4, r2
 80123de:	460e      	mov	r6, r1
 80123e0:	b921      	cbnz	r1, 80123ec <_realloc_r+0x16>
 80123e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80123e6:	4611      	mov	r1, r2
 80123e8:	f7ff b9c8 	b.w	801177c <_malloc_r>
 80123ec:	b92a      	cbnz	r2, 80123fa <_realloc_r+0x24>
 80123ee:	f7ff f951 	bl	8011694 <_free_r>
 80123f2:	4625      	mov	r5, r4
 80123f4:	4628      	mov	r0, r5
 80123f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123fa:	f000 f85f 	bl	80124bc <_malloc_usable_size_r>
 80123fe:	4284      	cmp	r4, r0
 8012400:	4607      	mov	r7, r0
 8012402:	d802      	bhi.n	801240a <_realloc_r+0x34>
 8012404:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012408:	d812      	bhi.n	8012430 <_realloc_r+0x5a>
 801240a:	4621      	mov	r1, r4
 801240c:	4640      	mov	r0, r8
 801240e:	f7ff f9b5 	bl	801177c <_malloc_r>
 8012412:	4605      	mov	r5, r0
 8012414:	2800      	cmp	r0, #0
 8012416:	d0ed      	beq.n	80123f4 <_realloc_r+0x1e>
 8012418:	42bc      	cmp	r4, r7
 801241a:	4622      	mov	r2, r4
 801241c:	4631      	mov	r1, r6
 801241e:	bf28      	it	cs
 8012420:	463a      	movcs	r2, r7
 8012422:	f7ff f90b 	bl	801163c <memcpy>
 8012426:	4631      	mov	r1, r6
 8012428:	4640      	mov	r0, r8
 801242a:	f7ff f933 	bl	8011694 <_free_r>
 801242e:	e7e1      	b.n	80123f4 <_realloc_r+0x1e>
 8012430:	4635      	mov	r5, r6
 8012432:	e7df      	b.n	80123f4 <_realloc_r+0x1e>

08012434 <_raise_r>:
 8012434:	291f      	cmp	r1, #31
 8012436:	b538      	push	{r3, r4, r5, lr}
 8012438:	4604      	mov	r4, r0
 801243a:	460d      	mov	r5, r1
 801243c:	d904      	bls.n	8012448 <_raise_r+0x14>
 801243e:	2316      	movs	r3, #22
 8012440:	6003      	str	r3, [r0, #0]
 8012442:	f04f 30ff 	mov.w	r0, #4294967295
 8012446:	bd38      	pop	{r3, r4, r5, pc}
 8012448:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801244a:	b112      	cbz	r2, 8012452 <_raise_r+0x1e>
 801244c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012450:	b94b      	cbnz	r3, 8012466 <_raise_r+0x32>
 8012452:	4620      	mov	r0, r4
 8012454:	f000 f830 	bl	80124b8 <_getpid_r>
 8012458:	462a      	mov	r2, r5
 801245a:	4601      	mov	r1, r0
 801245c:	4620      	mov	r0, r4
 801245e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012462:	f000 b817 	b.w	8012494 <_kill_r>
 8012466:	2b01      	cmp	r3, #1
 8012468:	d00a      	beq.n	8012480 <_raise_r+0x4c>
 801246a:	1c59      	adds	r1, r3, #1
 801246c:	d103      	bne.n	8012476 <_raise_r+0x42>
 801246e:	2316      	movs	r3, #22
 8012470:	6003      	str	r3, [r0, #0]
 8012472:	2001      	movs	r0, #1
 8012474:	e7e7      	b.n	8012446 <_raise_r+0x12>
 8012476:	2400      	movs	r4, #0
 8012478:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801247c:	4628      	mov	r0, r5
 801247e:	4798      	blx	r3
 8012480:	2000      	movs	r0, #0
 8012482:	e7e0      	b.n	8012446 <_raise_r+0x12>

08012484 <raise>:
 8012484:	4b02      	ldr	r3, [pc, #8]	; (8012490 <raise+0xc>)
 8012486:	4601      	mov	r1, r0
 8012488:	6818      	ldr	r0, [r3, #0]
 801248a:	f7ff bfd3 	b.w	8012434 <_raise_r>
 801248e:	bf00      	nop
 8012490:	200000a4 	.word	0x200000a4

08012494 <_kill_r>:
 8012494:	b538      	push	{r3, r4, r5, lr}
 8012496:	4d07      	ldr	r5, [pc, #28]	; (80124b4 <_kill_r+0x20>)
 8012498:	2300      	movs	r3, #0
 801249a:	4604      	mov	r4, r0
 801249c:	4608      	mov	r0, r1
 801249e:	4611      	mov	r1, r2
 80124a0:	602b      	str	r3, [r5, #0]
 80124a2:	f7f5 ff5d 	bl	8008360 <_kill>
 80124a6:	1c43      	adds	r3, r0, #1
 80124a8:	d102      	bne.n	80124b0 <_kill_r+0x1c>
 80124aa:	682b      	ldr	r3, [r5, #0]
 80124ac:	b103      	cbz	r3, 80124b0 <_kill_r+0x1c>
 80124ae:	6023      	str	r3, [r4, #0]
 80124b0:	bd38      	pop	{r3, r4, r5, pc}
 80124b2:	bf00      	nop
 80124b4:	20000c40 	.word	0x20000c40

080124b8 <_getpid_r>:
 80124b8:	f7f5 bf4a 	b.w	8008350 <_getpid>

080124bc <_malloc_usable_size_r>:
 80124bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80124c0:	1f18      	subs	r0, r3, #4
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	bfbc      	itt	lt
 80124c6:	580b      	ldrlt	r3, [r1, r0]
 80124c8:	18c0      	addlt	r0, r0, r3
 80124ca:	4770      	bx	lr

080124cc <_init>:
 80124cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ce:	bf00      	nop
 80124d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124d2:	bc08      	pop	{r3}
 80124d4:	469e      	mov	lr, r3
 80124d6:	4770      	bx	lr

080124d8 <_fini>:
 80124d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124da:	bf00      	nop
 80124dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124de:	bc08      	pop	{r3}
 80124e0:	469e      	mov	lr, r3
 80124e2:	4770      	bx	lr
